url,date,title,changes,file_name,patch_type,other_info,old_hunk_file,new_hunk_file,old_loc,new_loc,old_log,new_log,edit_types,edit_words,edit_feature,cluster,wait_time
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_209.cpp,,,data/crawl/tar/old_hunk_209.cpp,data/crawl/tar/new_hunk_209.cpp,3,3,report_difference (NULL);,"report_difference (&current_stat_info, NULL);","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_209.cpp,,,data/crawl/tar/old_hunk_209.cpp,data/crawl/tar/new_hunk_209.cpp,7,7,"report_difference (ngettext (""Could only read %lu of %lu byte"",
				       ""Could only read %lu of %lu bytes"",
				       bytes),
			     (unsigned long) status, (unsigned long) bytes);","report_difference (&current_stat_info, 
			     ngettext (""Could only read %lu of %lu byte"",
				       ""Could only read %lu of %lu bytes"",
				       bytes),
			     (unsigned long) status, (unsigned long) bytes);","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_210.cpp,,,data/crawl/tar/old_hunk_210.cpp,data/crawl/tar/new_hunk_210.cpp,3,3,"report_difference (_(""Contents differ""));","report_difference (&current_stat_info,
			 _(""Contents differ""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_211.cpp,,,data/crawl/tar/old_hunk_211.cpp,data/crawl/tar/new_hunk_211.cpp,3,3,"report_difference (_(""Contents differ""));","report_difference (&current_stat_info, _(""Contents differ""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_212.cpp,,,data/crawl/tar/old_hunk_212.cpp,data/crawl/tar/new_hunk_212.cpp,3,3,report_difference (NULL);,"report_difference (&current_stat_info, NULL);","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_213.cpp,,,data/crawl/tar/old_hunk_213.cpp,data/crawl/tar/new_hunk_213.cpp,3,3,"report_difference (_(""File type differs""));","report_difference (&current_stat_info, _(""File type differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_213.cpp,,,data/crawl/tar/old_hunk_213.cpp,data/crawl/tar/new_hunk_213.cpp,9,10,"report_difference (_(""Mode differs""));","report_difference (&current_stat_info, _(""Mode differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_213.cpp,,,data/crawl/tar/old_hunk_213.cpp,data/crawl/tar/new_hunk_213.cpp,14,18,"report_difference (_(""Mod time differs""));","report_difference (&current_stat_info, _(""Mod time differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_213.cpp,,,data/crawl/tar/old_hunk_213.cpp,data/crawl/tar/new_hunk_213.cpp,18,22,"report_difference (_(""Size differs""));","report_difference (&current_stat_info, _(""Size differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_214.cpp,,,data/crawl/tar/old_hunk_214.cpp,data/crawl/tar/new_hunk_214.cpp,3,3,report_difference (NULL);,"report_difference (&current_stat_info, NULL);","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_216.cpp,,,data/crawl/tar/old_hunk_216.cpp,data/crawl/tar/new_hunk_216.cpp,3,3,report_difference (NULL);,"report_difference (&current_stat_info, NULL);","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_216.cpp,,,data/crawl/tar/old_hunk_216.cpp,data/crawl/tar/new_hunk_216.cpp,7,7,"report_difference (_(""Symlink differs""));","report_difference (&current_stat_info, _(""Symlink differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_217.cpp,,,data/crawl/tar/old_hunk_217.cpp,data/crawl/tar/new_hunk_217.cpp,3,3,"report_difference (_(""File type differs""));","report_difference (&current_stat_info, _(""File type differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_218.cpp,,,data/crawl/tar/old_hunk_218.cpp,data/crawl/tar/new_hunk_218.cpp,3,3,"report_difference (_(""Device number differs""));","report_difference (&current_stat_info, _(""Device number differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_218.cpp,,,data/crawl/tar/old_hunk_218.cpp,data/crawl/tar/new_hunk_218.cpp,9,9,"report_difference (_(""Mode differs""));","report_difference (&current_stat_info, _(""Mode differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_219.cpp,,,data/crawl/tar/old_hunk_219.cpp,data/crawl/tar/new_hunk_219.cpp,3,3,"report_difference (_(""File type differs""));","report_difference (&current_stat_info, _(""File type differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_219.cpp,,,data/crawl/tar/old_hunk_219.cpp,data/crawl/tar/new_hunk_219.cpp,9,9,"report_difference (_(""Mode differs""));","report_difference (&current_stat_info, _(""Mode differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_220.cpp,,,data/crawl/tar/old_hunk_220.cpp,data/crawl/tar/new_hunk_220.cpp,3,3,"report_difference (_(""File type differs""));","report_difference (&current_stat_info, _(""File type differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_221.cpp,,,data/crawl/tar/old_hunk_221.cpp,data/crawl/tar/new_hunk_221.cpp,3,3,"report_difference (_(""Size differs""));","report_difference (&current_stat_info, _(""Size differs""));","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_222.cpp,,,data/crawl/tar/old_hunk_222.cpp,data/crawl/tar/new_hunk_222.cpp,3,3,report_difference (NULL);,"report_difference (&current_stat_info, NULL);","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_223.cpp,,,data/crawl/tar/old_hunk_223.cpp,data/crawl/tar/new_hunk_223.cpp,3,3,report_difference (NULL);,"report_difference (&current_stat_info, NULL);","[""addVariable""]","[[], [""&current_stat_info""]]",[6190982474121776615],595,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,96,,report_difference (NULL);,"[""addLog""]","[[], [""report_difference"", ""NULL""]]",[-3487817939530578388],594,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,317,,report_difference (NULL);,"[""addLog""]","[[], [""report_difference"", ""NULL""]]",[-3487817939530578388],594,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,347,,report_difference (NULL);,"[""addLog""]","[[], [""report_difference"", ""NULL""]]",[-3487817939530578388],594,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,414,,report_difference (NULL);,"[""addLog""]","[[], [""report_difference"", ""NULL""]]",[-3487817939530578388],594,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,525,,report_difference (NULL);,"[""addLog""]","[[], [""report_difference"", ""NULL""]]",[-3487817939530578388],594,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,574,,report_difference (NULL);,"[""addLog""]","[[], [""report_difference"", ""NULL""]]",[-3487817939530578388],594,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,608,,report_difference (NULL);,"[""addLog""]","[[], [""report_difference"", ""NULL""]]",[-3487817939530578388],594,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,755,,report_difference (NULL);,"[""addLog""]","[[], [""report_difference"", ""NULL""]]",[-3487817939530578388],594,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,765,,report_difference (NULL);,"[""addLog""]","[[], [""report_difference"", ""NULL""]]",[-3487817939530578388],594,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=debc485626c0c143731b0ca229d18b48085bb2ef,18 Jan 2012,"tar: quote 'like this', not `like this'

This fixes some test failures recently introduced by gnulib updates
prompted by recent changes to the GNU coding standards,
which now advise to use quotes 'like this' or ""like this""
rather than `like this'.
* NEWS: Document this.
* README, README-hacking, doc/Makefile.am, scripts/backup.in:
* scripts/backup.sh.in, scripts/dump-remind.in:
* src/buffer.c, src/checkpoint.c, src/create.c, src/incremen.c:
* src/misc.c, src/names.c, src/sparse.c, src/transform.c:
* tests/incr02.at, tests/incremental.at, tests/multiv08.at:
* tests/sparse04.at, tests/star/README, tests/update01.at:
Quote 'like this' in comments.
* src/tar.h:
Quote ""like this"" in comments, when quoting English phrases rather
than code.
* configure.ac:
* scripts/xsparse.c (get_var, read_xheader, main):
* src/compare.c (diff_archive):
* src/extract.c (prepare_to_extract):
* src/tar.c (request_stdin, tar_set_quoting_style, doc, options)
(set_subcommand_option, report_textual_dates, parse_opt)
(decode_options, main):
* src/xheader.c (decx):
Quote 'like this' in diagnostics.
* doc/tar.texi (list, warnings, override)
(Selecting Archive Members, quoting styles, after, hard links)
(Sparse Recovery, Multi-Volume Archives, label):
Adjust documentation to match new output.
* tests/backup01.at, tests/incr01.at, tests/incr04.at:
* tests/label04.at, tests/label05.at, tests/link03.at:
* tests/listed02.at, tests/multiv03.at, tests/multiv05.at:
* tests/rename01.at, tests/rename02.at, tests/rename03.at:
* tests/volume.at:
Adjust tests to match new quoting behavior.",527,data/crawl/tar/hunk_41.cpp,,,data/crawl/tar/old_hunk_41.cpp,data/crawl/tar/new_hunk_41.cpp,3,3,"ERROR ((0, 0, _(""%s: Unknown file type `%c', diffed as normal file""),
	      quotearg_colon (current_stat_info.file_name),
	      current_header->header.typeflag));","ERROR ((0, 0, _(""%s: Unknown file type '%c', diffed as normal file""),
	      quotearg_colon (current_stat_info.file_name),
	      current_header->header.typeflag));","[""updateContent""]","[[], []]",[0],593,"4531 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=debc485626c0c143731b0ca229d18b48085bb2ef,18 Jan 2012,"tar: quote 'like this', not `like this'

This fixes some test failures recently introduced by gnulib updates
prompted by recent changes to the GNU coding standards,
which now advise to use quotes 'like this' or ""like this""
rather than `like this'.
* NEWS: Document this.
* README, README-hacking, doc/Makefile.am, scripts/backup.in:
* scripts/backup.sh.in, scripts/dump-remind.in:
* src/buffer.c, src/checkpoint.c, src/create.c, src/incremen.c:
* src/misc.c, src/names.c, src/sparse.c, src/transform.c:
* tests/incr02.at, tests/incremental.at, tests/multiv08.at:
* tests/sparse04.at, tests/star/README, tests/update01.at:
Quote 'like this' in comments.
* src/tar.h:
Quote ""like this"" in comments, when quoting English phrases rather
than code.
* configure.ac:
* scripts/xsparse.c (get_var, read_xheader, main):
* src/compare.c (diff_archive):
* src/extract.c (prepare_to_extract):
* src/tar.c (request_stdin, tar_set_quoting_style, doc, options)
(set_subcommand_option, report_textual_dates, parse_opt)
(decode_options, main):
* src/xheader.c (decx):
Quote 'like this' in diagnostics.
* doc/tar.texi (list, warnings, override)
(Selecting Archive Members, quoting styles, after, hard links)
(Sparse Recovery, Multi-Volume Archives, label):
Adjust documentation to match new output.
* tests/backup01.at, tests/incr01.at, tests/incr04.at:
* tests/label04.at, tests/label05.at, tests/link03.at:
* tests/listed02.at, tests/multiv03.at, tests/multiv05.at:
* tests/rename01.at, tests/rename02.at, tests/rename03.at:
* tests/volume.at:
Adjust tests to match new quoting behavior.",527,data/crawl/tar/hunk_42.cpp,,,data/crawl/tar/old_hunk_42.cpp,data/crawl/tar/new_hunk_42.cpp,3,3,"argp_error (state, _(""Unknown density: `%c'""), arg[0]);","argp_error (state, _(""Unknown density: '%c'""), arg[0]);","[""updateContent""]","[[], []]",[0],593,"4531 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=debc485626c0c143731b0ca229d18b48085bb2ef,18 Jan 2012,"tar: quote 'like this', not `like this'

This fixes some test failures recently introduced by gnulib updates
prompted by recent changes to the GNU coding standards,
which now advise to use quotes 'like this' or ""like this""
rather than `like this'.
* NEWS: Document this.
* README, README-hacking, doc/Makefile.am, scripts/backup.in:
* scripts/backup.sh.in, scripts/dump-remind.in:
* src/buffer.c, src/checkpoint.c, src/create.c, src/incremen.c:
* src/misc.c, src/names.c, src/sparse.c, src/transform.c:
* tests/incr02.at, tests/incremental.at, tests/multiv08.at:
* tests/sparse04.at, tests/star/README, tests/update01.at:
Quote 'like this' in comments.
* src/tar.h:
Quote ""like this"" in comments, when quoting English phrases rather
than code.
* configure.ac:
* scripts/xsparse.c (get_var, read_xheader, main):
* src/compare.c (diff_archive):
* src/extract.c (prepare_to_extract):
* src/tar.c (request_stdin, tar_set_quoting_style, doc, options)
(set_subcommand_option, report_textual_dates, parse_opt)
(decode_options, main):
* src/xheader.c (decx):
Quote 'like this' in diagnostics.
* doc/tar.texi (list, warnings, override)
(Selecting Archive Members, quoting styles, after, hard links)
(Sparse Recovery, Multi-Volume Archives, label):
Adjust documentation to match new output.
* tests/backup01.at, tests/incr01.at, tests/incr04.at:
* tests/label04.at, tests/label05.at, tests/link03.at:
* tests/listed02.at, tests/multiv03.at, tests/multiv05.at:
* tests/rename01.at, tests/rename02.at, tests/rename03.at:
* tests/volume.at:
Adjust tests to match new quoting behavior.",527,data/crawl/tar/hunk_43.cpp,,,data/crawl/tar/old_hunk_43.cpp,data/crawl/tar/new_hunk_43.cpp,2,2,"argp_error (state,
		  _(""Options `-[0-7][lmh]' not supported by *this* tar""));","argp_error (state,
		  _(""Options '-[0-7][lmh]' not supported by *this* tar""));","[""updateContent""]","[[], []]",[0],593,"4531 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9a7297a8a135c0afd8f984b91578a822ba3b04c,26 Jun 2008,"* configure.ac, NEWS: Version 1.20.90 * doc/tar.texi: Document -J,
 --no-auto-compress, etc. * src/buffer.c (ct_tar): New constant. (magic): Add
 lzop support.  Proposed by Kevin Day <thekevinday@gmail.com>.
 (check_compressed_archive): Do not use autodetect if the compression program
 was specified explicitly. Fall back to analyzing archive name, if the
 autodetection fails. * src/suffix.c: Add .lzo * src/tar.c: New options --lzop
 and --no-auto-compress. New short option -J (alias for --lzma).
",171,data/crawl/tar/hunk_78.cpp,,,data/crawl/tar/old_hunk_78.cpp,data/crawl/tar/new_hunk_78.cpp,2,14,/buffer.c (try_new_volume);,/buffer.c (try_new_volume);,[],"[[], []]",[0],593,"3230 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4ef056729e5dc97952d04590afe33422ff6bb938,11 Jun 2006,"(xheader_set_single_keyword): Fix typo. (decode_time): Avoid using
 gotos.
",51,data/crawl/tar/hunk_116.cpp,,,data/crawl/tar/old_hunk_116.cpp,data/crawl/tar/new_hunk_116.cpp,7,18,"_(""Malformed extended header: invalid %s=%s"");","_(""Malformed extended header: invalid %s=%s"");",[],"[[], []]",[0],593,"2484 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=781d3818e520a7fe6ab1ceb051bc13777f8511d7,7 Apr 2005,"(diff_init): Read directory file if in listed incremental. This
 prevents spurious 'Contents differ' diagnostics. (diff_archive): Minor fixes
 to text messages (diff_file,diff_dumpdir,diff_multivol): Assign
 orig_file_name to save_name uniformly over the program. This fixes matching
 directory names at the start of an archive volume.
",11,data/crawl/tar/hunk_161.cpp,,,data/crawl/tar/old_hunk_161.cpp,data/crawl/tar/new_hunk_161.cpp,3,3,"ERROR ((0, 0, _(""%s: Unknown file type '%c', diffed as normal file""),
	      quotearg_colon (current_stat_info.file_name),
	      current_header->header.typeflag));","ERROR ((0, 0, _(""%s: Unknown file type `%c', diffed as normal file""),
	      quotearg_colon (current_stat_info.file_name),
	      current_header->header.typeflag));","[""updateContent""]","[[], []]",[0],593,"2054 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=62599b528521f9a87f259b0448ada4e33a2d547a,7 Apr 2005,"Minor fixes to text messages. Proposed by Benno Schulenberg.
",18,data/crawl/tar/hunk_162.cpp,,,data/crawl/tar/old_hunk_162.cpp,data/crawl/tar/new_hunk_162.cpp,3,3,"argp_error (state, _(""Unknown density: '%c'""), arg[0]);","argp_error (state, _(""Unknown density: `%c'""), arg[0]);","[""updateContent""]","[[], []]",[0],593,"2054 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e2e868af584e5e922948424545f73dc54fb634a,4 Feb 2005,"Add translators' comments
",9,data/crawl/tar/hunk_176.cpp,,,data/crawl/tar/old_hunk_176.cpp,data/crawl/tar/new_hunk_176.cpp,3,4,"ERROR ((0, 0, _(""Archive value %s is out of %s range %s.%s""),
	      value_string, type,
	      minval_string, STRINGIFY_BIGINT (maxval, maxval_buf)));","ERROR ((0, 0, _(""Archive value %s is out of %s range %s..%s""),
	      value_string, type,
	      minval_string, STRINGIFY_BIGINT (maxval, maxval_buf)));","[""updateContent""]","[[], []]",[0],593,"1992 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=2bda83b48d8a6807632312403561b11b79048443,5 Apr 2004,"Merge recent gnulib changes, and remove some lint.
",1583,data/crawl/tar/hunk_199.cpp,,,data/crawl/tar/old_hunk_199.cpp,data/crawl/tar/new_hunk_199.cpp,27,26,"report_difference (&current_stat_info, NULL);","report_difference (&current_stat_info, NULL);",[],"[[], []]",[0],593,"1687 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=096bc2bffd857a690a9364043c33109eee0a53b4,31 Aug 2003,"(decode_header): Added initial support for POSIX extended and STAR
 headers. (skip_member): Check oldgnu_header only if current_format is set to
 OLDGNU_FORMAT.
",136,data/crawl/tar/hunk_276.cpp,,,data/crawl/tar/old_hunk_276.cpp,data/crawl/tar/new_hunk_276.cpp,3,3,"ERROR ((0, 0, _(""Archive value %s is out of %s range %s..%s""),
	      value_string, type,
	      minval_string, STRINGIFY_BIGINT (maxval, maxval_buf)));","ERROR ((0, 0, _(""Archive value %s is out of %s range %s.%s""),
	      value_string, type,
	      minval_string, STRINGIFY_BIGINT (maxval, maxval_buf)));","[""updateContent""]","[[], []]",[0],593,"1469 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=df2ff9e4e495a32a962f6a1e61cca714503cbed3,13 Dec 1999,"(read_and, list_archive): Quote arbitrary strings in diagnostics.
 (from_header): Use locale_quoting_style to quote diagnostics. (print_header,
 print_for_mkdir): Quote with quotearg, not quote_copy_string.
",66,data/crawl/tar/hunk_349.cpp,,,data/crawl/tar/old_hunk_349.cpp,data/crawl/tar/new_hunk_349.cpp,9,9,"ERROR ((0, 0,
		  _(""Archive contains `%.*s' where numeric %s value expected""),
		  (int) sizeof buf, buf, type));","ERROR ((0, 0,
		  _(""Archive contains %.*s where numeric %s value expected""),
		  (int) sizeof buf, buf, type));","[""updateContent""]","[[], []]",[0],593,"112 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e4e624848b53ac02f1212af2209a63d28e40afec,22 Sep 1999,"(time): Declare if not defined. (base_64_digits): Moved here from
 create.c. (base64_map): Use UCHAR_MAX for size, not less-clear (unsigned
 char) -1. (read_and): Don't get time from header unless we need it now; as
 getting time can cause duplicate diagnostics if bogus. Remove ""Hmm, "" from
 diagnostic. Use ""Skipping to next header"" uniformly. (from_header): Renamed
 from from_chars.  All uses changed. Allow different forms for unportable 2's
 complement numbers. Don't check for extended forms when parsing checksums.
 Parse base-256 output. (gid_from_header): Renamed from gid_from_chars.  All
 uses changed. (major_from_header): Renamed from major_from_chars.  All uses
 changed. (minor_from_header): Renamed from minor_from_chars.  All uses
 changed. (mode_from_header): Renamed from mode_from_chars.  All uses changed.
 (off_from_header): Renamed from off_from_chars.  All uses changed.
 (size_from_header): Renamed from size_from_chars.  All uses changed.
 (time_from_header): Renamed from time_from_chars.  All uses changed. Warn
 about future timestamps. (uid_from_header): Renamed from uid_from_chars.  All
 uses changed. (uintmax_from_header): Renamed from uintmax_from_chars.  All
 uses changed. (tartime): New function, incorporating isotime. (isotime):
 Delete. (print_header): Use tartime.
",364,data/crawl/tar/hunk_399.cpp,,,data/crawl/tar/old_hunk_399.cpp,data/crawl/tar/new_hunk_399.cpp,35,73,"ERROR ((0, 0,
		      _(""Archive signed base 64 string `%.*s' is out of %s range""),
		      (int) digs, where0, type));","ERROR ((0, 0,
			  _(""Archive signed base-64 string `%.*s' is out of %s range""),
			  (int) digs, where0, type));","[""updateContent""]","[[], []]",[0],593,"30 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=aeef4574607477cf4fcdeb230fce04c7876ca2fa,23 Aug 1999,"Lint cleanup. (linklist): Now static. (to_chars): Fix wording of
 message to match from_chars.
",79,data/crawl/tar/hunk_404.cpp,,,data/crawl/tar/old_hunk_404.cpp,data/crawl/tar/new_hunk_404.cpp,9,9,"ERROR ((0, 0, _(""%s value %s out of range %s..%s""),
		type, value_string, minval_string, maxval_string));","ERROR ((0, 0, _(""value %s out of %s range %s..%s""),
		value_string, type, minval_string, maxval_string));","[""updateVariable"", ""updateContent""]","[[], []]",[0],593,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_233.cpp,,,data/crawl/tar/old_hunk_233.cpp,data/crawl/tar/new_hunk_233.cpp,10,9,report_difference (0);,report_difference (NULL);,"[""removeContent"", ""addVariable""]","[[""0""], [""NULL""]]",[-4166558493256717462],592,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_234.cpp,,,data/crawl/tar/old_hunk_234.cpp,data/crawl/tar/new_hunk_234.cpp,3,3,report_difference (0);,report_difference (NULL);,"[""removeContent"", ""addVariable""]","[[""0""], [""NULL""]]",[-4166558493256717462],592,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_235.cpp,,,data/crawl/tar/old_hunk_235.cpp,data/crawl/tar/new_hunk_235.cpp,3,3,report_difference (0);,report_difference (NULL);,"[""removeContent"", ""addVariable""]","[[""0""], [""NULL""]]",[-4166558493256717462],592,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_236.cpp,,,data/crawl/tar/old_hunk_236.cpp,data/crawl/tar/new_hunk_236.cpp,3,3,report_difference (0);,report_difference (NULL);,"[""removeContent"", ""addVariable""]","[[""0""], [""NULL""]]",[-4166558493256717462],592,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_237.cpp,,,data/crawl/tar/old_hunk_237.cpp,data/crawl/tar/new_hunk_237.cpp,3,3,report_difference (0);,report_difference (NULL);,"[""removeContent"", ""addVariable""]","[[""0""], [""NULL""]]",[-4166558493256717462],592,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_239.cpp,,,data/crawl/tar/old_hunk_239.cpp,data/crawl/tar/new_hunk_239.cpp,3,3,report_difference (0);,report_difference (NULL);,"[""removeContent"", ""addVariable""]","[[""0""], [""NULL""]]",[-4166558493256717462],592,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_241.cpp,,,data/crawl/tar/old_hunk_241.cpp,data/crawl/tar/new_hunk_241.cpp,3,3,report_difference (0);,report_difference (NULL);,"[""removeContent"", ""addVariable""]","[[""0""], [""NULL""]]",[-4166558493256717462],592,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_242.cpp,,,data/crawl/tar/old_hunk_242.cpp,data/crawl/tar/new_hunk_242.cpp,3,3,report_difference (0);,report_difference (NULL);,"[""removeContent"", ""addVariable""]","[[""0""], [""NULL""]]",[-4166558493256717462],592,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_243.cpp,,,data/crawl/tar/old_hunk_243.cpp,data/crawl/tar/new_hunk_243.cpp,3,3,report_difference (0);,report_difference (NULL);,"[""removeContent"", ""addVariable""]","[[""0""], [""NULL""]]",[-4166558493256717462],592,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c3fa22fc8023ad21ad32b13f934c3324756c9236,25 Jan 2010,"Read POSIX multivolume archives split at the header boundary.

* src/common.h (read_header_mode): New enum.
(read_header): Change type of the 3rd argument.
* src/list.c (read_header): Change type of the 3rd argument.
All callers updated.
* src/buffer.c (try_new_volume): Allow for volumes split at the
extended/ustar header boundary. This is against POSIX specs, but
we must be able to read such archives anyway.

* tests/multiv07.at: New test case.
* tests/Makefile.am: Add multiv07.at
* tests/testsuite.at: Likewise.

* src/compare.c: Update calls to read_header.
* src/delete.c: Likewise.
* src/update.c: Likewise.",157,data/crawl/tar/hunk_57.cpp,,,data/crawl/tar/old_hunk_57.cpp,data/crawl/tar/new_hunk_57.cpp,-1,7,,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""This"", ""does"", ""not"", ""look"", ""like"", ""a"", ""tar"", ""archive""]]",[25105532001702206967],591,"3759 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c3fa22fc8023ad21ad32b13f934c3324756c9236,25 Jan 2010,"Read POSIX multivolume archives split at the header boundary.

* src/common.h (read_header_mode): New enum.
(read_header): Change type of the 3rd argument.
* src/list.c (read_header): Change type of the 3rd argument.
All callers updated.
* src/buffer.c (try_new_volume): Allow for volumes split at the
extended/ustar header boundary. This is against POSIX specs, but
we must be able to read such archives anyway.

* tests/multiv07.at: New test case.
* tests/Makefile.am: Add multiv07.at
* tests/testsuite.at: Likewise.

* src/compare.c: Update calls to read_header.
* src/delete.c: Likewise.
* src/update.c: Likewise.",157,data/crawl/tar/hunk_57.cpp,,,data/crawl/tar/old_hunk_57.cpp,data/crawl/tar/new_hunk_57.cpp,-1,36,,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""This"", ""does"", ""not"", ""look"", ""like"", ""a"", ""tar"", ""archive""]]",[25105532001702206967],591,"3759 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9a7297a8a135c0afd8f984b91578a822ba3b04c,26 Jun 2008,"* configure.ac, NEWS: Version 1.20.90 * doc/tar.texi: Document -J,
 --no-auto-compress, etc. * src/buffer.c (ct_tar): New constant. (magic): Add
 lzop support.  Proposed by Kevin Day <thekevinday@gmail.com>.
 (check_compressed_archive): Do not use autodetect if the compression program
 was specified explicitly. Fall back to analyzing archive name, if the
 autodetection fails. * src/suffix.c: Add .lzo * src/tar.c: New options --lzop
 and --no-auto-compress. New short option -J (alias for --lzma).
",171,data/crawl/tar/hunk_79.cpp,,,data/crawl/tar/old_hunk_79.cpp,data/crawl/tar/new_hunk_79.cpp,-1,17,,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""This"", ""does"", ""not"", ""look"", ""like"", ""a"", ""tar"", ""archive""]]",[25105532001702206967],591,"3181 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5f4d99491da44c47654f3b4f0cab30ed84328138,5 Dec 2007,"(check_compressed_archive): Do not bail out if the file is too short,
 set boolean flag, passed as an argument instead.  This fixes a bug introduced
 on 2007-08-24. See also tests/shortupd.at.
",31,data/crawl/tar/hunk_84.cpp,,,data/crawl/tar/old_hunk_84.cpp,data/crawl/tar/new_hunk_84.cpp,-1,9,,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""This"", ""does"", ""not"", ""look"", ""like"", ""a"", ""tar"", ""archive""]]",[25105532001702206967],591,"2977 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5f4d99491da44c47654f3b4f0cab30ed84328138,5 Dec 2007,"(check_compressed_archive): Do not bail out if the file is too short,
 set boolean flag, passed as an argument instead.  This fixes a bug introduced
 on 2007-08-24. See also tests/shortupd.at.
",31,data/crawl/tar/hunk_85.cpp,,,data/crawl/tar/old_hunk_85.cpp,data/crawl/tar/new_hunk_85.cpp,-1,14,,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""This"", ""does"", ""not"", ""look"", ""like"", ""a"", ""tar"", ""archive""]]",[25105532001702206967],591,"2977 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=7c0b81cbb9790ab9402e983a4d677a8ebde010d5,24 Aug 2007,"(check_compressed_archive): Detect files smaller than 512 bytes.
",11,data/crawl/tar/hunk_89.cpp,,,data/crawl/tar/old_hunk_89.cpp,data/crawl/tar/new_hunk_89.cpp,-1,4,,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""This"", ""does"", ""not"", ""look"", ""like"", ""a"", ""tar"", ""archive""]]",[25105532001702206967],591,"2874 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5b1df7b55e9a77587984511e222b70d01b637205,11 Nov 2005,"(flush_write,flush_read): Change data type. (flush_archive): Compute
 actual buffer fill level before calling low level function. (close_archive):
 Call flush_archive again if the first call resulted in partially filled
 buffer. (try_new_volume): Rewritten handling of initial headers.
 (add_chunk_header): New function. Write an additional header before the
 continuation chunk. The purpose of the header is to allow third-party tars to
 extract the member. (simple_flush_write): Take an argument.
 (_gnu_flush_write): Correctly handle partially filled buffers.
",185,data/crawl/tar/hunk_136.cpp,,,data/crawl/tar/old_hunk_136.cpp,data/crawl/tar/new_hunk_136.cpp,-1,14,,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""This"", ""does"", ""not"", ""look"", ""like"", ""a"", ""tar"", ""archive""]]",[25105532001702206967],591,"2223 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=51f0c7c36448cb51018feb81a47fb9bb792784c7,11 Oct 1999,"(tartime): Now extern. (read_and): Invalid headers cause errors, not
 warnings.
",7,data/crawl/tar/hunk_393.cpp,,,data/crawl/tar/old_hunk_393.cpp,data/crawl/tar/new_hunk_393.cpp,-1,3,,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""This"", ""does"", ""not"", ""look"", ""like"", ""a"", ""tar"", ""archive""]]",[25105532001702206967],591,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,102,,report_difference (message);,"[""addLog""]","[[], [""report_difference"", ""message""]]",[-6167893420632801877],590,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,325,,report_difference (message);,"[""addLog""]","[[], [""report_difference"", ""message""]]",[-6167893420632801877],590,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,355,,report_difference (message);,"[""addLog""]","[[], [""report_difference"", ""message""]]",[-6167893420632801877],590,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,585,,report_difference (message);,"[""addLog""]","[[], [""report_difference"", ""message""]]",[-6167893420632801877],590,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=72290b64a6433a3c88ecb7b3044c3047beffeadc,18 Aug 1999,"(extract_sparse_file, extract_archive): Don't assume find_next_block
 yields nonnull. (extract_archive): Fix sparse array bug: we did not find end
 of array correctly.
",14,data/crawl/tar/hunk_412.cpp,,,data/crawl/tar/old_hunk_412.cpp,data/crawl/tar/new_hunk_412.cpp,-1,5,,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""on"", ""archive"", ""file""]]",[4659174231619724083],589,"855 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=72290b64a6433a3c88ecb7b3044c3047beffeadc,18 Aug 1999,"(extract_sparse_file, extract_archive): Don't assume find_next_block
 yields nonnull. (extract_archive): Fix sparse array bug: we did not find end
 of array correctly.
",14,data/crawl/tar/hunk_413.cpp,,,data/crawl/tar/old_hunk_413.cpp,data/crawl/tar/new_hunk_413.cpp,-1,5,,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""on"", ""archive"", ""file""]]",[4659174231619724083],589,"855 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b7890ac7573e6df20fa843fd85400072b5638c28,25 Apr 1997,"GNU tar 1.12
",1227,data/crawl/tar/hunk_467.cpp,,,data/crawl/tar/old_hunk_467.cpp,data/crawl/tar/new_hunk_467.cpp,-1,379,,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""on"", ""archive"", ""file""]]",[4659174231619724083],589,"10 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,328,,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""on"", ""archive"", ""file""]]",[4659174231619724083],589,"8 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,629,,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""on"", ""archive"", ""file""]]",[4659174231619724083],589,"8 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,158,,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""on"", ""archive"", ""file""]]",[4659174231619724083],589,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c8764440d9cb0187fcbabe26e7f6191c0148178e,4 Feb 2005,"(extract_archive): Rewritten
",836,data/crawl/tar/hunk_178.cpp,,,data/crawl/tar/old_hunk_178.cpp,data/crawl/tar/new_hunk_178.cpp,-1,168,,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""]]",[5167937610357500499],588,"2843 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8d6e47cc7fcfb6781b82ba60b8eb823c7fdc7013,17 Nov 2003,"Support for star sparse format
",157,data/crawl/tar/hunk_208.cpp,,,data/crawl/tar/old_hunk_208.cpp,data/crawl/tar/new_hunk_208.cpp,-1,45,,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""]]",[5167937610357500499],588,"2398 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a8b2b68c33e6166c8035f094574fc0d1d3459cd8,17 Nov 2003,"(sparse_diff_file): New function
",115,data/crawl/tar/hunk_226.cpp,,,data/crawl/tar/old_hunk_226.cpp,data/crawl/tar/new_hunk_226.cpp,-1,57,,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""]]",[5167937610357500499],588,"2398 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=18ef8acac57d9af27d42b11925c8767470976be9,17 Nov 2003,"Added sparse.c
",532,data/crawl/tar/hunk_229.cpp,,,data/crawl/tar/old_hunk_229.cpp,data/crawl/tar/new_hunk_229.cpp,-1,295,,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""]]",[5167937610357500499],588,"2398 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=18ef8acac57d9af27d42b11925c8767470976be9,17 Nov 2003,"Added sparse.c
",532,data/crawl/tar/hunk_229.cpp,,,data/crawl/tar/old_hunk_229.cpp,data/crawl/tar/new_hunk_229.cpp,-1,451,,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""]]",[5167937610357500499],588,"2398 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=675c5a2f243bb5e72c982c0e3c30762ec32e9a1b,5 Jul 2003,"(we_are_root): Now bool, not int. (check_time): Warn about
 implausibly old time stamps. (set_stat): Use utimbuf, not stat_info.
 (preprare_to_extract): New arg DIRECTORY. (fill_in_sparse_array): Moved here
 from compare.c. (extract_sparse_file): Now returns off_t, giving size left.
 Truncate file at end. (extract_archive): Use safer_name_suffix rather than
 rolling our own. Use fill_in_sparse_array rather than rolling our own. Strip
 trailing slashes more effectively. Check for unsafe names.
",391,data/crawl/tar/hunk_289.cpp,,,data/crawl/tar/old_hunk_289.cpp,data/crawl/tar/new_hunk_289.cpp,-1,42,,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""]]",[5167937610357500499],588,"2263 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,674,,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""]]",[5167937610357500499],588,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_402.cpp,,,data/crawl/tar/old_hunk_402.cpp,data/crawl/tar/new_hunk_402.cpp,-1,58,,"ERROR ((0, errno, _(""Cannot remove %s""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""]]",[8358368121424660287],587,"879 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_402.cpp,,,data/crawl/tar/old_hunk_402.cpp,data/crawl/tar/new_hunk_402.cpp,-1,318,,"ERROR ((0, errno, _(""Cannot remove %s""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""]]",[8358368121424660287],587,"879 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_402.cpp,,,data/crawl/tar/old_hunk_402.cpp,data/crawl/tar/new_hunk_402.cpp,-1,372,,"ERROR ((0, errno, _(""Cannot remove %s""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""]]",[8358368121424660287],587,"879 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_473.cpp,,,data/crawl/tar/old_hunk_473.cpp,data/crawl/tar/new_hunk_473.cpp,-1,95,,"ERROR ((0, errno, _(""Cannot remove %s""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""]]",[8358368121424660287],587,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_473.cpp,,,data/crawl/tar/old_hunk_473.cpp,data/crawl/tar/new_hunk_473.cpp,-1,381,,"ERROR ((0, errno, _(""Cannot remove %s""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""]]",[8358368121424660287],587,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_473.cpp,,,data/crawl/tar/old_hunk_473.cpp,data/crawl/tar/new_hunk_473.cpp,-1,441,,"ERROR ((0, errno, _(""Cannot remove %s""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""]]",[8358368121424660287],587,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_473.cpp,,,data/crawl/tar/old_hunk_473.cpp,data/crawl/tar/new_hunk_473.cpp,-1,695,,"ERROR ((0, errno, _(""Cannot remove %s""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""]]",[8358368121424660287],587,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,-1,440,,"ERROR ((0, errno, ""%s"", volno_file_option));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""volno_file_option""]]",[20890249650769766495],586,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,-1,443,,"ERROR ((0, errno, ""%s"", volno_file_option));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""volno_file_option""]]",[20890249650769766495],586,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,-1,459,,"ERROR ((0, errno, ""%s"", volno_file_option));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""volno_file_option""]]",[20890249650769766495],586,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,-1,462,,"ERROR ((0, errno, ""%s"", volno_file_option));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""volno_file_option""]]",[20890249650769766495],586,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49086e2770abfa6ad6a7647e2d0707b607ee1bf8,31 Oct 1997,"(newdir_umask, current_umask): Now mode_t. (extract_sparse_file):
 Args now use off_t.

(set_mode, set_stat, make_directories, extract_sparse_file,
extract_archive): Use off_t, size_t, ssize_t when appropriate.  Remove
now-useless casts.  Use unsigned long to print *_t types, except use
STRINGIFY_BIGINT for off_t.",130,data/crawl/tar/hunk_456.cpp,,,data/crawl/tar/old_hunk_456.cpp,data/crawl/tar/new_hunk_456.cpp,3,3,"ERROR ((0, errno, _(""%s: Cannot lchown to uid %d gid %d""),
		    file_name, stat_info->st_uid, stat_info->st_gid));","ERROR ((0, errno, _(""%s: Cannot lchown to uid %lu gid %lu""),
		    file_name,
		    (unsigned long) stat_info->st_uid,
		    (unsigned long) stat_info->st_gid));","[""updateContent"", ""addVariable""]","[[""%d"", ""%d""], [""%lu"", ""%lu"", ""unsigned"", ""long"", ""unsigned"", ""long""]]",[-11939518791742488030],585,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49086e2770abfa6ad6a7647e2d0707b607ee1bf8,31 Oct 1997,"(newdir_umask, current_umask): Now mode_t. (extract_sparse_file):
 Args now use off_t.

(set_mode, set_stat, make_directories, extract_sparse_file,
extract_archive): Use off_t, size_t, ssize_t when appropriate.  Remove
now-useless casts.  Use unsigned long to print *_t types, except use
STRINGIFY_BIGINT for off_t.",130,data/crawl/tar/hunk_456.cpp,,,data/crawl/tar/old_hunk_456.cpp,data/crawl/tar/new_hunk_456.cpp,9,11,"ERROR ((0, errno, _(""%s: Cannot chown to uid %d gid %d""),
		    file_name, stat_info->st_uid, stat_info->st_gid));","ERROR ((0, errno, _(""%s: Cannot chown to uid %lu gid %lu""),
		    file_name,
		    (unsigned long) stat_info->st_uid,
		    (unsigned long) stat_info->st_gid));","[""updateContent"", ""addVariable""]","[[""%d"", ""%d""], [""%lu"", ""%lu"", ""unsigned"", ""long"", ""unsigned"", ""long""]]",[-11939518791742488030],585,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49086e2770abfa6ad6a7647e2d0707b607ee1bf8,31 Oct 1997,"(newdir_umask, current_umask): Now mode_t. (extract_sparse_file):
 Args now use off_t.

(set_mode, set_stat, make_directories, extract_sparse_file,
extract_archive): Use off_t, size_t, ssize_t when appropriate.  Remove
now-useless casts.  Use unsigned long to print *_t types, except use
STRINGIFY_BIGINT for off_t.",130,data/crawl/tar/hunk_457.cpp,,,data/crawl/tar/old_hunk_457.cpp,data/crawl/tar/new_hunk_457.cpp,3,3,"ERROR ((0, errno, _(""%s: Cannot chown to uid %d gid %d""),
		  file_name, stat_info->st_uid, stat_info->st_gid));","ERROR ((0, errno, _(""%s: Cannot chown to uid %lu gid %lu""),
		  file_name,
		  (unsigned long) stat_info->st_uid,
		  (unsigned long) stat_info->st_gid));","[""updateContent"", ""addVariable""]","[[""%d"", ""%d""], [""%lu"", ""%lu"", ""unsigned"", ""long"", ""unsigned"", ""long""]]",[-11939518791742488030],585,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49086e2770abfa6ad6a7647e2d0707b607ee1bf8,31 Oct 1997,"(newdir_umask, current_umask): Now mode_t. (extract_sparse_file):
 Args now use off_t.

(set_mode, set_stat, make_directories, extract_sparse_file,
extract_archive): Use off_t, size_t, ssize_t when appropriate.  Remove
now-useless casts.  Use unsigned long to print *_t types, except use
STRINGIFY_BIGINT for off_t.",130,data/crawl/tar/hunk_458.cpp,,,data/crawl/tar/old_hunk_458.cpp,data/crawl/tar/new_hunk_458.cpp,2,2,"ERROR ((0, errno,
		      _(""%s: Cannot change owner to uid %d, gid %d""),
		      file_name, current_stat.st_uid, current_stat.st_gid));","ERROR ((0, errno,
		      _(""%s: Cannot change owner to uid %lu, gid %lu""),
		      file_name,
		      (unsigned long) current_stat.st_uid,
		      (unsigned long) current_stat.st_gid));","[""updateContent"", ""addVariable""]","[[""%d"", ""%d""], [""%lu"", ""%lu"", ""unsigned"", ""long"", ""unsigned"", ""long""]]",[-11939518791742488030],585,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1f27dca9765c886a72629a655d538c36c6cb0fea,20 Jul 1999,"(decode_options): ERROR ((TAREXIT_FAILURE, ... -> FATAL_ERROR ((0,
 for consistency.
",8,data/crawl/tar/hunk_425.cpp,,,data/crawl/tar/old_hunk_425.cpp,data/crawl/tar/new_hunk_425.cpp,3,3,"ERROR ((TAREXIT_FAILURE, 0, _(""Invalid group given on option"")));","FATAL_ERROR ((0, 0, _(""Invalid group given on option"")));","[""updateLog"", ""removeVariable"", ""addContent""]","[[""ERROR"", ""TAREXIT_FAILURE""], [""FATAL_ERROR"", ""0""]]",[-10039368319591374705],584,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1f27dca9765c886a72629a655d538c36c6cb0fea,20 Jul 1999,"(decode_options): ERROR ((TAREXIT_FAILURE, ... -> FATAL_ERROR ((0,
 for consistency.
",8,data/crawl/tar/hunk_426.cpp,,,data/crawl/tar/old_hunk_426.cpp,data/crawl/tar/new_hunk_426.cpp,3,3,"ERROR ((TAREXIT_FAILURE, 0, _(""Invalid mode given on option"")));","FATAL_ERROR ((0, 0, _(""Invalid mode given on option"")));","[""updateLog"", ""removeVariable"", ""addContent""]","[[""ERROR"", ""TAREXIT_FAILURE""], [""FATAL_ERROR"", ""0""]]",[-10039368319591374705],584,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1f27dca9765c886a72629a655d538c36c6cb0fea,20 Jul 1999,"(decode_options): ERROR ((TAREXIT_FAILURE, ... -> FATAL_ERROR ((0,
 for consistency.
",8,data/crawl/tar/hunk_426.cpp,,,data/crawl/tar/old_hunk_426.cpp,data/crawl/tar/new_hunk_426.cpp,5,5,"ERROR ((TAREXIT_FAILURE, 0, _(""Memory exhausted"")));","FATAL_ERROR ((0, 0, _(""Memory exhausted"")));","[""updateLog"", ""removeVariable"", ""addContent""]","[[""ERROR"", ""TAREXIT_FAILURE""], [""FATAL_ERROR"", ""0""]]",[-10039368319591374705],584,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1f27dca9765c886a72629a655d538c36c6cb0fea,20 Jul 1999,"(decode_options): ERROR ((TAREXIT_FAILURE, ... -> FATAL_ERROR ((0,
 for consistency.
",8,data/crawl/tar/hunk_427.cpp,,,data/crawl/tar/old_hunk_427.cpp,data/crawl/tar/new_hunk_427.cpp,3,3,"ERROR ((TAREXIT_FAILURE, 0, _(""Invalid owner given on option"")));","FATAL_ERROR ((0, 0, _(""Invalid owner given on option"")));","[""updateLog"", ""removeVariable"", ""addContent""]","[[""ERROR"", ""TAREXIT_FAILURE""], [""FATAL_ERROR"", ""0""]]",[-10039368319591374705],584,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=14b158325624a6e42e8bf4f7169c7a55f0afb6f9,16 Aug 1999,"indenting fixes
",8,data/crawl/tar/hunk_415.cpp,,,data/crawl/tar/old_hunk_415.cpp,data/crawl/tar/new_hunk_415.cpp,3,3,"ERROR ((0, errno, _(""\
Read error at byte %s, reading %lu bytes, in file %s""),
		      STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		      (unsigned long) bufsize, name));","ERROR ((0, errno,
		      _(""Read error at byte %s, reading %lu bytes, in file %s""),
		      STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		      (unsigned long) bufsize, name));","[""updateContent""]","[[""\\""], []]",[-11776035421],583,"2 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=14b158325624a6e42e8bf4f7169c7a55f0afb6f9,16 Aug 1999,"indenting fixes
",8,data/crawl/tar/hunk_416.cpp,,,data/crawl/tar/old_hunk_416.cpp,data/crawl/tar/new_hunk_416.cpp,3,3,"ERROR ((0, errno, _(""\
Read error at byte %s, reading %lu bytes, in file %s""),
			STRINGIFY_BIGINT (current_stat.st_size - sizeleft,
					  buf),
			(unsigned long) bufsize, p));","ERROR ((0, errno,
			_(""Read error at byte %s, reading %lu bytes, in file %s""),
			STRINGIFY_BIGINT (current_stat.st_size - sizeleft,
					  buf),
			(unsigned long) bufsize, p));","[""updateContent""]","[[""\\""], []]",[-11776035421],583,"2 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e027651e89233d4f3c4ca089db72468e31173,16 Aug 1999,"(make_directories): Do not chown intermediate directories, even if we
 are root.
",18,data/crawl/tar/hunk_418.cpp,,,data/crawl/tar/old_hunk_418.cpp,data/crawl/tar/new_hunk_418.cpp,3,3,"ERROR ((0, 0, _(""\
Cannot extract `%s' -- file is continued from another volume""),
	      current_file_name));","ERROR ((0, 0,
	      _(""Cannot extract `%s' -- file is continued from another volume""),
	      current_file_name));","[""updateContent""]","[[""\\""], []]",[-11776035421],583,"2 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=203dea13a40bae5c6d2dfa221036babd0e345ffe,14 Aug 1999,"(time): Don't declare if defined. (child_open_for_compress): Undo
 previous change. (close_archive): Use waitpid, POSIX-style, instead of old
 BSD style. (new_volume): Likewise.
",126,data/crawl/tar/hunk_419.cpp,,,data/crawl/tar/old_hunk_419.cpp,data/crawl/tar/new_hunk_419.cpp,8,7,"ERROR ((0, 0, _(""\
Write to compression program short %lu bytes""),
		      (unsigned long) (count - status)));","ERROR ((0, 0, _(""Write to compression program short %lu bytes""),
		      (unsigned long) (count - status)));","[""updateContent""]","[[""\\""], []]",[-11776035421],583,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,319,,"fputs(buf, out);","[""addLog""]","[[], [""fputs"", ""buf"", ""out""]]",[961448989603819052],582,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,330,,"fputs(buf, out);","[""addLog""]","[[], [""fputs"", ""buf"", ""out""]]",[961448989603819052],582,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,336,,"fputs(buf, out);","[""addLog""]","[[], [""fputs"", ""buf"", ""out""]]",[961448989603819052],582,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,563,,"fputs(buf, out);","[""addLog""]","[[], [""fputs"", ""buf"", ""out""]]",[961448989603819052],582,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_356.cpp,,,data/crawl/tar/old_hunk_356.cpp,data/crawl/tar/new_hunk_356.cpp,15,16,"ERROR ((0, errno, _(""Cannot remove %s""), file_name));",unlink_error (file_name);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s""], [""unlink_error""]]",[-12342690591773229784],581,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_376.cpp,,,data/crawl/tar/old_hunk_376.cpp,data/crawl/tar/new_hunk_376.cpp,3,3,"ERROR ((0, errno, _(""Cannot remove %s""), p));",unlink_error (p);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s""], [""unlink_error""]]",[-12342690591773229784],581,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_379.cpp,,,data/crawl/tar/old_hunk_379.cpp,data/crawl/tar/new_hunk_379.cpp,14,14,"ERROR ((0, errno, _(""Cannot remove %s""), p));",unlink_error (p);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s""], [""unlink_error""]]",[-12342690591773229784],581,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_380.cpp,,,data/crawl/tar/old_hunk_380.cpp,data/crawl/tar/new_hunk_380.cpp,3,3,"ERROR ((0, errno, _(""Cannot remove %s""), p));",unlink_error (p);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s""], [""unlink_error""]]",[-12342690591773229784],581,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_381.cpp,,,data/crawl/tar/old_hunk_381.cpp,data/crawl/tar/new_hunk_381.cpp,3,3,"ERROR ((0, errno, _(""Cannot remove %s""), p));",unlink_error (p);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s""], [""unlink_error""]]",[-12342690591773229784],581,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c2e32780ed9aa2c03408bf0eeea3fb564fc0b48,6 Feb 2005,"Various fixes in help and diagnostic messages
",20,data/crawl/tar/hunk_164.cpp,,,data/crawl/tar/old_hunk_164.cpp,data/crawl/tar/new_hunk_164.cpp,3,3,"argp_error (state, _(""Malformed density argument: '%s'""), arg);","argp_error (state, _(""Malformed density argument: %s""), quote (arg));","[""updateContent"", ""addVariable""]","[[], [""quote""]]",[-453826349353749559],580,"1882 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_369.cpp,,,data/crawl/tar/old_hunk_369.cpp,data/crawl/tar/new_hunk_369.cpp,2,2,"ERROR ((0, 0,
	      _(""Cannot extract `%s' -- file is continued from another volume""),
	      current_file_name));","ERROR ((0, 0,
	      _(""Cannot extract %s -- file is continued from another volume""),
	      quote (current_file_name)));","[""moveVariable"", ""updateContent"", ""addVariable""]","[[], [""quote""]]",[-453826349353749559],580,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_371.cpp,,,data/crawl/tar/old_hunk_371.cpp,data/crawl/tar/new_hunk_371.cpp,1,1,"ERROR ((0, 0, _(""Wrote %s of %s bytes to file %s""),
		  STRINGIFY_BIGINT (fullsize - *sizeleft, buf1),
		  STRINGIFY_BIGINT (fullsize, buf2),
		  name));","ERROR ((0, 0, _(""Wrote %s of %s bytes to file %s""),
		  STRINGIFY_BIGINT (fullsize - *sizeleft, buf1),
		  STRINGIFY_BIGINT (fullsize, buf2), quote (name)));","[""moveVariable"", ""addVariable""]","[[], [""quote""]]",[-453826349353749559],580,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_374.cpp,,,data/crawl/tar/old_hunk_374.cpp,data/crawl/tar/new_hunk_374.cpp,2,2,"ERROR ((0, 0,
		      _(""File %s shrunk, padding with zeros""),
		      name));","ERROR ((0, 0,
		      _(""File %s shrunk, padding with zeros""), quote (name)));","[""moveVariable"", ""addVariable""]","[[], [""quote""]]",[-453826349353749559],580,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_378.cpp,,,data/crawl/tar/old_hunk_378.cpp,data/crawl/tar/new_hunk_378.cpp,1,1,"ERROR ((0, 0,
			    _(""File %s shrunk by %s bytes, padding with zeros""),
			    p, STRINGIFY_BIGINT (sizeleft, buf)));","ERROR ((0, 0,
			    _(""File %s shrunk by %s bytes, padding with zeros""),
			    quote (p), STRINGIFY_BIGINT (sizeleft, buf)));","[""moveVariable"", ""addVariable""]","[[], [""quote""]]",[-453826349353749559],580,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_379.cpp,,,data/crawl/tar/old_hunk_379.cpp,data/crawl/tar/new_hunk_379.cpp,5,5,"ERROR ((0, 0, _(""%s: file changed as we read it""), p));","ERROR ((0, 0, _(""File %s changed as we read it""), quote (p)));","[""moveVariable"", ""updateContent"", ""addVariable""]","[[""file""], [""File"", ""quote""]]",[-453826349353749559],580,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=df2ff9e4e495a32a962f6a1e61cca714503cbed3,13 Dec 1999,"(read_and, list_archive): Quote arbitrary strings in diagnostics.
 (from_header): Use locale_quoting_style to quote diagnostics. (print_header,
 print_for_mkdir): Quote with quotearg, not quote_copy_string.
",66,data/crawl/tar/hunk_348.cpp,,,data/crawl/tar/old_hunk_348.cpp,data/crawl/tar/new_hunk_348.cpp,3,4,"ERROR ((0, errno, _(""Only wrote %lu of %lu bytes to file %s""),
		      (unsigned long) check,
		      (unsigned long) written, current_file_name));","ERROR ((0, e, _(""Only wrote %lu of %lu bytes to file %s""),
		      (unsigned long) check,
		      (unsigned long) written, quote (current_file_name)));","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""errno""], [""e"", ""quote""]]",[-8738965121426090876],579,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_371.cpp,,,data/crawl/tar/old_hunk_371.cpp,data/crawl/tar/new_hunk_371.cpp,11,11,"ERROR ((0, errno, _(""lseek error at byte %s in file %s""),
		  STRINGIFY_BIGINT (sparsearray[sparse_index - 1].offset, buf),
		  name));","ERROR ((0, e, _(""lseek error at byte %s in file %s""),
		  STRINGIFY_BIGINT (sparsearray[sparse_index - 1].offset,
				    buf),
		  quote (name)));","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""errno""], [""e"", ""quote""]]",[-8738965121426090876],579,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_372.cpp,,,data/crawl/tar/old_hunk_372.cpp,data/crawl/tar/new_hunk_372.cpp,3,4,"ERROR ((0, errno,
		      _(""Read error at byte %s, reading %lu bytes, in file %s""),
		      STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		      (unsigned long) bufsize, name));","ERROR ((0, e,
		      _(""Read error at byte %s, reading %lu bytes, in file %s""),
		      STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		      (unsigned long) bufsize, quote (name)));","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""errno""], [""e"", ""quote""]]",[-8738965121426090876],579,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_373.cpp,,,data/crawl/tar/old_hunk_373.cpp,data/crawl/tar/new_hunk_373.cpp,4,4,"ERROR ((0, errno,
		  _(""Read error at byte %s, reading %lu bytes, in file %s""),
		  STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		  (unsigned long) bufsize, name));","ERROR ((0, e,
		  _(""Read error at byte %s, reading %lu bytes, in file %s""),
		  STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		  (unsigned long) bufsize, quote (name)));","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""errno""], [""e"", ""quote""]]",[-8738965121426090876],579,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_377.cpp,,,data/crawl/tar/old_hunk_377.cpp,data/crawl/tar/new_hunk_377.cpp,3,4,"ERROR ((0, errno,
			    _(""Read error at byte %s, reading %lu bytes, in file %s""),
			    STRINGIFY_BIGINT (current_stat.st_size - sizeleft,
					      buf),
			    (unsigned long) bufsize, p));","ERROR ((0, e,
			    _(""Read error at byte %s, reading %lu bytes, in file %s""),
			    STRINGIFY_BIGINT (current_stat.st_size - sizeleft,
					      buf),
			    (unsigned long) bufsize, quote (p)));","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""errno""], [""e"", ""quote""]]",[-8738965121426090876],579,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f0429c4a22e5b19eefbdbc684e9e175a1cca9a3e,13 Dec 1999,"(<quotearg.h>): New include. (name_init, name_next, name_close,
 names_notfound, collect_and_sort_names): Don't assume that gettext preserves
 errno. Quote arbitrary strings in diagnostics. (excluded_name): Fix typo that
 caused empty patterns to be mishandled.
",20,data/crawl/tar/hunk_351.cpp,,,data/crawl/tar/old_hunk_351.cpp,data/crawl/tar/new_hunk_351.cpp,3,3,"ERROR ((0, 0, _(""%s: Not found in archive""), cursor->name));","ERROR ((0, 0, _(""%s: Not found in archive""),
		quotearg_colon (cursor->name)));","[""addVariable""]","[[], [""quotearg_colon""]]",[-1521945047501761070],578,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f0429c4a22e5b19eefbdbc684e9e175a1cca9a3e,13 Dec 1999,"(<quotearg.h>): New include. (name_init, name_next, name_close,
 names_notfound, collect_and_sort_names): Don't assume that gettext preserves
 errno. Quote arbitrary strings in diagnostics. (excluded_name): Fix typo that
 caused empty patterns to be mishandled.
",20,data/crawl/tar/hunk_352.cpp,,,data/crawl/tar/old_hunk_352.cpp,data/crawl/tar/new_hunk_352.cpp,3,3,"ERROR ((0, 0, _(""%s: Not found in archive""), name));","ERROR ((0, 0, _(""%s: Not found in archive""),
		quotearg_colon (name)));","[""moveVariable"", ""addVariable""]","[[], [""quotearg_colon""]]",[-1521945047501761070],578,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_359.cpp,,,data/crawl/tar/old_hunk_359.cpp,data/crawl/tar/new_hunk_359.cpp,8,8,"ERROR ((0, 0, _(""%s: Could only write %s of %s bytes""),
		  name,
		  STRINGIFY_BIGINT (totalsize - *sizeleft, buf1),
		  STRINGIFY_BIGINT (totalsize, buf2)));","ERROR ((0, 0, _(""%s: Could only write %s of %s bytes""),
		  quotearg_colon (name),
		  STRINGIFY_BIGINT (totalsize - *sizeleft, buf1),
		  STRINGIFY_BIGINT (totalsize, buf2)));","[""moveVariable"", ""addVariable""]","[[], [""quotearg_colon""]]",[-1521945047501761070],578,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_363.cpp,,,data/crawl/tar/old_hunk_363.cpp,data/crawl/tar/new_hunk_363.cpp,6,5,"ERROR ((0, 0, _(""%s: Could only write %lu of %lu bytes""),
		      CURRENT_FILE_NAME,
		      (unsigned long) sstatus,
		      (unsigned long) written));","ERROR ((0, 0, _(""%s: Could only write %lu of %lu bytes""),
		      quotearg_colon (CURRENT_FILE_NAME),
		      (unsigned long) sstatus,
		      (unsigned long) written));","[""moveVariable"", ""addVariable""]","[[], [""quotearg_colon""]]",[-1521945047501761070],578,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_381.cpp,,,data/crawl/tar/old_hunk_381.cpp,data/crawl/tar/new_hunk_381.cpp,8,8,"ERROR ((0, 0, _(""%s: Unknown file type; file ignored""), p));","ERROR ((0, 0, _(""%s: Unknown file type; file ignored""),
	  quotearg_colon (p)));","[""moveVariable"", ""addVariable""]","[[], [""quotearg_colon""]]",[-1521945047501761070],578,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_355.cpp,,,data/crawl/tar/old_hunk_355.cpp,data/crawl/tar/new_hunk_355.cpp,30,32,"ERROR ((0, errno, _(""%s: Cannot lchown to uid %lu gid %lu""),
		    file_name,
		    (unsigned long) stat_info->st_uid,
		    (unsigned long) stat_info->st_gid));","ERROR ((0, e, _(""%s: Cannot lchown to uid %lu gid %lu""),
		      quotearg_colon (file_name),
		      (unsigned long) stat_info->st_uid,
		      (unsigned long) stat_info->st_gid));","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""errno""], [""e"", ""quotearg_colon""]]",[-9807083819574102387],577,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_355.cpp,,,data/crawl/tar/old_hunk_355.cpp,data/crawl/tar/new_hunk_355.cpp,39,44,"ERROR ((0, errno, _(""%s: Cannot chown to uid %lu gid %lu""),
		    file_name,
		    (unsigned long) stat_info->st_uid,
		    (unsigned long) stat_info->st_gid));","ERROR ((0, e, _(""%s: Cannot chown to uid %lu gid %lu""),
		      quotearg_colon (file_name),
		      (unsigned long) stat_info->st_uid,
		      (unsigned long) stat_info->st_gid));","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""errno""], [""e"", ""quotearg_colon""]]",[-9807083819574102387],577,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_357.cpp,,,data/crawl/tar/old_hunk_357.cpp,data/crawl/tar/new_hunk_357.cpp,3,4,"ERROR ((0, errno, _(""%s: lseek error at byte %s""),
		  STRINGIFY_BIGINT (sparsearray[sparse_ind].offset, buf),
		  name));","ERROR ((0, e, _(""%s: lseek error at byte %s""),
		  quotearg_colon (name),
		  STRINGIFY_BIGINT (sparsearray[sparse_ind].offset, buf)));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""errno""], [""e"", ""quotearg_colon""]]",[-9807083819574102387],577,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_361.cpp,,,data/crawl/tar/old_hunk_361.cpp,data/crawl/tar/new_hunk_361.cpp,3,4,"ERROR ((0, errno, _(""%s: Was unable to backup this file""),
		CURRENT_FILE_NAME));","ERROR ((0, e, _(""%s: Was unable to backup this file""),
		quotearg_colon (CURRENT_FILE_NAME)));","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""errno""], [""e"", ""quotearg_colon""]]",[-9807083819574102387],577,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_260.cpp,,,data/crawl/tar/old_hunk_260.cpp,data/crawl/tar/new_hunk_260.cpp,24,21,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""updateContent""]","[[""on"", ""file""], [""in""]]",[508763378737776416],576,"1332 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c18999bad51b56995a293cb4d6936315b5a6bdff,7 Jan 2000,"(read_and): Invoke apply_nonancestor_delayed_set_stat on file names
 after handling them. (list_archive): Use consistent message for unexpected
 EOF. Use error message functions to report errors consistently.
 (read_header): Use xalloc_die to report memory exhaustion. Use consistent
 message for unexpected EOF. (decode_mode): Remove; moved to misc.c.
 (skip_file): Use consistent message for unexpected EOF.
 (skip_extended_headers): Likewise.
",95,data/crawl/tar/hunk_324.cpp,,,data/crawl/tar/old_hunk_324.cpp,data/crawl/tar/new_hunk_324.cpp,3,3,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""updateContent""]","[[""on"", ""file""], [""in""]]",[508763378737776416],576,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_338.cpp,,,data/crawl/tar/old_hunk_338.cpp,data/crawl/tar/new_hunk_338.cpp,3,3,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""updateContent""]","[[""on"", ""file""], [""in""]]",[508763378737776416],576,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_339.cpp,,,data/crawl/tar/old_hunk_339.cpp,data/crawl/tar/new_hunk_339.cpp,3,3,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""updateContent""]","[[""on"", ""file""], [""in""]]",[508763378737776416],576,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_341.cpp,,,data/crawl/tar/old_hunk_341.cpp,data/crawl/tar/new_hunk_341.cpp,3,3,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""updateContent""]","[[""on"", ""file""], [""in""]]",[508763378737776416],576,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_342.cpp,,,data/crawl/tar/old_hunk_342.cpp,data/crawl/tar/new_hunk_342.cpp,3,3,"ERROR ((0, 0, _(""Unexpected EOF on archive file"")));","ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""updateContent""]","[[""on"", ""file""], [""in""]]",[508763378737776416],576,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_259.cpp,,,data/crawl/tar/old_hunk_259.cpp,data/crawl/tar/new_hunk_259.cpp,68,52,report_difference (NULL);,report_difference (0);,"[""removeVariable"", ""addContent""]","[[""NULL""], [""0""]]",[4166558493256717462],575,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_262.cpp,,,data/crawl/tar/old_hunk_262.cpp,data/crawl/tar/new_hunk_262.cpp,10,12,report_difference (NULL);,report_difference (0);,"[""removeVariable"", ""addContent""]","[[""NULL""], [""0""]]",[4166558493256717462],575,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_263.cpp,,,data/crawl/tar/old_hunk_263.cpp,data/crawl/tar/new_hunk_263.cpp,26,20,report_difference (NULL);,report_difference (0);,"[""removeVariable"", ""addContent""]","[[""NULL""], [""0""]]",[4166558493256717462],575,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_266.cpp,,,data/crawl/tar/old_hunk_266.cpp,data/crawl/tar/new_hunk_266.cpp,17,17,report_difference (NULL);,report_difference (0);,"[""removeVariable"", ""addContent""]","[[""NULL""], [""0""]]",[4166558493256717462],575,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_268.cpp,,,data/crawl/tar/old_hunk_268.cpp,data/crawl/tar/new_hunk_268.cpp,31,29,report_difference (NULL);,report_difference (0);,"[""removeVariable"", ""addContent""]","[[""NULL""], [""0""]]",[4166558493256717462],575,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_268.cpp,,,data/crawl/tar/old_hunk_268.cpp,data/crawl/tar/new_hunk_268.cpp,41,37,report_difference (NULL);,report_difference (0);,"[""removeVariable"", ""addContent""]","[[""NULL""], [""0""]]",[4166558493256717462],575,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_233.cpp,,,data/crawl/tar/old_hunk_233.cpp,data/crawl/tar/new_hunk_233.cpp,19,-1,report_difference (message);,,"[""removeLog""]","[[""report_difference"", ""message""], []]",[6167893420632801877],574,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_235.cpp,,,data/crawl/tar/old_hunk_235.cpp,data/crawl/tar/new_hunk_235.cpp,14,-1,report_difference (message);,,"[""removeLog""]","[[""report_difference"", ""message""], []]",[6167893420632801877],574,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_236.cpp,,,data/crawl/tar/old_hunk_236.cpp,data/crawl/tar/new_hunk_236.cpp,14,-1,report_difference (message);,,"[""removeLog""]","[[""report_difference"", ""message""], []]",[6167893420632801877],574,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_240.cpp,,,data/crawl/tar/old_hunk_240.cpp,data/crawl/tar/new_hunk_240.cpp,21,-1,report_difference (message);,,"[""removeLog""]","[[""report_difference"", ""message""], []]",[6167893420632801877],574,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f6458a827ae7a2c41616490f653714068072b257,7 Nov 2005,"(list_archive): Handle incremental backups in pax format.
 (decode_header): Initialize stat_info.dumpdir
",47,data/crawl/tar/hunk_139.cpp,,,data/crawl/tar/old_hunk_139.cpp,data/crawl/tar/new_hunk_139.cpp,28,-1,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""], []]",[-5167937610357500499],573,"856 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c8764440d9cb0187fcbabe26e7f6191c0148178e,4 Feb 2005,"(extract_archive): Rewritten
",836,data/crawl/tar/hunk_179.cpp,,,data/crawl/tar/old_hunk_179.cpp,data/crawl/tar/new_hunk_179.cpp,86,-1,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""], []]",[-5167937610357500499],573,"580 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=87fa28ed2abd92693a08e58523d7ab7f7c4563f0,17 Nov 2003,"Use new sparse file interface.
",163,data/crawl/tar/hunk_228.cpp,,,data/crawl/tar/old_hunk_228.cpp,data/crawl/tar/new_hunk_228.cpp,42,-1,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""], []]",[-5167937610357500499],573,"135 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=87fa28ed2abd92693a08e58523d7ab7f7c4563f0,17 Nov 2003,"Use new sparse file interface.
",163,data/crawl/tar/hunk_228.cpp,,,data/crawl/tar/old_hunk_228.cpp,data/crawl/tar/new_hunk_228.cpp,99,-1,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""], []]",[-5167937610357500499],573,"135 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=87fa28ed2abd92693a08e58523d7ab7f7c4563f0,17 Nov 2003,"Use new sparse file interface.
",163,data/crawl/tar/hunk_228.cpp,,,data/crawl/tar/old_hunk_228.cpp,data/crawl/tar/new_hunk_228.cpp,122,-1,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""], []]",[-5167937610357500499],573,"135 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=675c5a2f243bb5e72c982c0e3c30762ec32e9a1b,5 Jul 2003,"(we_are_root): Now bool, not int. (check_time): Warn about
 implausibly old time stamps. (set_stat): Use utimbuf, not stat_info.
 (preprare_to_extract): New arg DIRECTORY. (fill_in_sparse_array): Moved here
 from compare.c. (extract_sparse_file): Now returns off_t, giving size left.
 Truncate file at end. (extract_archive): Use safer_name_suffix rather than
 rolling our own. Use fill_in_sparse_array rather than rolling our own. Strip
 trailing slashes more effectively. Check for unsafe names.
",391,data/crawl/tar/hunk_292.cpp,,,data/crawl/tar/old_hunk_292.cpp,data/crawl/tar/new_hunk_292.cpp,44,-1,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""archive""], []]",[-5167937610357500499],573,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3999bf6360930179f08a1265ce8713705aafd405,17 Nov 2003,"(diff_sparse_files): Temporary placeholder.
",144,data/crawl/tar/hunk_227.cpp,,,data/crawl/tar/old_hunk_227.cpp,data/crawl/tar/new_hunk_227.cpp,47,-1,report_difference (NULL);,,"[""removeLog""]","[[""report_difference"", ""NULL""], []]",[3487817939530578388],572,"78 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3999bf6360930179f08a1265ce8713705aafd405,17 Nov 2003,"(diff_sparse_files): Temporary placeholder.
",144,data/crawl/tar/hunk_227.cpp,,,data/crawl/tar/old_hunk_227.cpp,data/crawl/tar/new_hunk_227.cpp,68,-1,report_difference (NULL);,,"[""removeLog""]","[[""report_difference"", ""NULL""], []]",[3487817939530578388],572,"78 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3999bf6360930179f08a1265ce8713705aafd405,17 Nov 2003,"(diff_sparse_files): Temporary placeholder.
",144,data/crawl/tar/hunk_227.cpp,,,data/crawl/tar/old_hunk_227.cpp,data/crawl/tar/new_hunk_227.cpp,100,-1,report_difference (NULL);,,"[""removeLog""]","[[""report_difference"", ""NULL""], []]",[3487817939530578388],572,"78 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_264.cpp,,,data/crawl/tar/old_hunk_264.cpp,data/crawl/tar/new_hunk_264.cpp,63,-1,report_difference (NULL);,,"[""removeLog""]","[[""report_difference"", ""NULL""], []]",[3487817939530578388],572,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_265.cpp,,,data/crawl/tar/old_hunk_265.cpp,data/crawl/tar/new_hunk_265.cpp,19,-1,report_difference (NULL);,,"[""removeLog""]","[[""report_difference"", ""NULL""], []]",[3487817939530578388],572,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_102.cpp,,,data/crawl/tar/old_hunk_102.cpp,data/crawl/tar/new_hunk_102.cpp,21,28,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option),
		lineno,
		_(""Invalid time stamp"")));","ERROR ((0, errno, ""%s:%ld: %s"",
		      quotearg_colon (listed_incremental_option),
		      lineno,
		      _(""Invalid time stamp"")));","[""removeContent"", ""addVariable""]","[[""0""], [""errno""]]",[8285138778856361720],571,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_103.cpp,,,data/crawl/tar/old_hunk_103.cpp,data/crawl/tar/new_hunk_103.cpp,14,17,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Invalid modification time (seconds)"")));","ERROR ((0, errno, ""%s:%ld: %s"",
		      quotearg_colon (listed_incremental_option), lineno,
		      _(""Invalid modification time (seconds)"")));","[""removeContent"", ""addVariable""]","[[""0""], [""errno""]]",[8285138778856361720],571,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_103.cpp,,,data/crawl/tar/old_hunk_103.cpp,data/crawl/tar/new_hunk_103.cpp,26,32,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Invalid modification time (nanoseconds)"")));","ERROR ((0, errno, ""%s:%ld: %s"",
		      quotearg_colon (listed_incremental_option), lineno,
		      _(""Invalid modification time (nanoseconds)"")));","[""removeContent"", ""addVariable""]","[[""0""], [""errno""]]",[8285138778856361720],571,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_103.cpp,,,data/crawl/tar/old_hunk_103.cpp,data/crawl/tar/new_hunk_103.cpp,41,52,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option), lineno,
		_(""Invalid device number"")));","ERROR ((0, errno, ""%s:%ld: %s"",
		  quotearg_colon (listed_incremental_option), lineno,
		  _(""Invalid device number"")));","[""removeContent"", ""addVariable""]","[[""0""], [""errno""]]",[8285138778856361720],571,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_103.cpp,,,data/crawl/tar/old_hunk_103.cpp,data/crawl/tar/new_hunk_103.cpp,53,67,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option), lineno,
		_(""Invalid inode number"")));","ERROR ((0, errno, ""%s:%ld: %s"",
		  quotearg_colon (listed_incremental_option), lineno,
		  _(""Invalid inode number"")));","[""removeContent"", ""addVariable""]","[[""0""], [""errno""]]",[8285138778856361720],571,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,319,-1,"fputs(buf, out);",,"[""removeLog""]","[[""fputs"", ""buf"", ""out""], []]",[-961448989603819052],570,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,330,-1,"fputs(buf, out);",,"[""removeLog""]","[[""fputs"", ""buf"", ""out""], []]",[-961448989603819052],570,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,336,-1,"fputs(buf, out);",,"[""removeLog""]","[[""fputs"", ""buf"", ""out""], []]",[-961448989603819052],570,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,563,-1,"fputs(buf, out);",,"[""removeLog""]","[[""fputs"", ""buf"", ""out""], []]",[-961448989603819052],570,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=239441b5dfd0468858bca2e219aae563e1f96d02,6 Dec 2015,"Bugfix

* src/buffer.c (try_new_volume): Warn if user supplied malformed
tar archive.
Consistently use WARN (instead of ERROR) when reporting.",9,data/crawl/tar/hunk_3.cpp,Bug,add log for fix bug and consistence,data/crawl/tar/old_hunk_3.cpp,data/crawl/tar/new_hunk_3.cpp,3,3,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","WARN ((0, 0, _(""This does not look like a tar archive"")));","[""updateLog""]","[[""ERROR""], [""WARN""]]",[-11954066244619719719],569,"5812 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=239441b5dfd0468858bca2e219aae563e1f96d02,6 Dec 2015,"Bugfix

* src/buffer.c (try_new_volume): Warn if user supplied malformed
tar archive.
Consistently use WARN (instead of ERROR) when reporting.",9,data/crawl/tar/hunk_4.cpp,Bug,add log for fix bug and consistence,data/crawl/tar/old_hunk_4.cpp,data/crawl/tar/new_hunk_4.cpp,3,3,"ERROR ((0, 0, _(""This does not look like a tar archive"")));","WARN ((0, 0, _(""This does not look like a tar archive"")));","[""updateLog""]","[[""ERROR""], [""WARN""]]",[-11954066244619719719],569,"5812 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=967fcb93181ffea221561bc09224cc6172aadbba,30 May 2007," (decx): Unknown pax keywords produce a warning,not error.
",4,data/crawl/tar/hunk_90.cpp,,,data/crawl/tar/old_hunk_90.cpp,data/crawl/tar/new_hunk_90.cpp,3,3,"ERROR((0, 0, _(""Ignoring unknown extended header keyword `%s'""),
	   keyword));","WARN((0, 0, _(""Ignoring unknown extended header keyword `%s'""),
	 keyword));","[""updateLog""]","[[""ERROR""], [""WARN""]]",[-11954066244619719719],569,"2700 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f74454cb37c715674796f21a2fd75eb0a5a34002,7 Jan 2000,"(find_new_file_size): Return size instead of storing through pointer.
 All callers changed. (deal_with_sparse): Don't keep reading after read
 errors. (finish_sparse_file): Just abort if there is an internal error. Use
 error message functions to report errors consistently. (dump_file): Fix typo:
 stat_warn and stat_error were interchanged. Quote file names with colons if
 possible. Don't restore access times on directories during incremental dumps
 until after dealing with the directory. If ignoring failed reads, count
 closedir errors as warnings, not errors. Fix buffer overrun problem when
 dumping sparse files. If ignoring failed reads, count read errors as
 warnings, not errors. Use error message functions to report errors
 consistently. If ignoring failed reads, count unknown files as warnings, not
 errors.
",236,data/crawl/tar/hunk_331.cpp,,,data/crawl/tar/old_hunk_331.cpp,data/crawl/tar/new_hunk_331.cpp,3,3,"ERROR ((0, 0, _(""%s: Unknown file type; file ignored""),
	  quotearg_colon (p)));","WARN ((0, 0, _(""%s: Unknown file type; file ignored""),
	 quotearg_colon (p)));","[""updateLog""]","[[""ERROR""], [""WARN""]]",[-11954066244619719719],569,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=32841f71caa7337a62ce231ed787609003bce86f,16 Nov 1994,"*** empty log message ***
",1369,data/crawl/tar/hunk_500.cpp,,,data/crawl/tar/old_hunk_500.cpp,data/crawl/tar/new_hunk_500.cpp,-1,1170,,"fputs(prefix, stream);","[""addLog""]","[[], [""fputs"", ""prefix"", ""stream""]]",[-17431155182665630263],568,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=32841f71caa7337a62ce231ed787609003bce86f,16 Nov 1994,"*** empty log message ***
",1369,data/crawl/tar/hunk_500.cpp,,,data/crawl/tar/old_hunk_500.cpp,data/crawl/tar/new_hunk_500.cpp,-1,1183,,"fputs(prefix, stream);","[""addLog""]","[[], [""fputs"", ""prefix"", ""stream""]]",[-17431155182665630263],568,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,706,,"ERROR ((0, errno, _(""%s: Error while closing""), CURRENT_FILE_NAME));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Error"", ""while"", ""closing"", ""CURRENT_FILE_NAME""]]",[30110988958145336131],567,"8 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,550,,"ERROR ((0, errno, _(""Error while closing %s""), current_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Error"", ""while"", ""closing"", ""%s"", ""current_file_name""]]",[30110988958145336131],567,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,783,,"ERROR ((0, errno, _(""Error while closing %s""), current_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Error"", ""while"", ""closing"", ""%s"", ""current_file_name""]]",[30110988958145336131],567,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,503,,"report_difference (_(""Size differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Size"", ""differs""]]",[4142371617784608422],566,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,745,,"report_difference (_(""Size differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Size"", ""differs""]]",[4142371617784608422],566,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,486,,"report_difference (_(""Mode differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Mode"", ""differs""]]",[-2338259091415480836],565,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,717,,"report_difference (_(""Mode differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Mode"", ""differs""]]",[-2338259091415480836],565,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,479,,"report_difference (_(""Not a regular file""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Not"", ""a"", ""regular"", ""file""]]",[-3113032933145235184],564,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,736,,"report_difference (_(""Not a regular file""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Not"", ""a"", ""regular"", ""file""]]",[-3113032933145235184],564,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,109,,"report_difference (_(""Data differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Data"", ""differs""]]",[-2835912118937840285],563,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,129,,"report_difference (_(""Data differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Data"", ""differs""]]",[-2835912118937840285],563,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,391,,"report_difference (_(""Data differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Data"", ""differs""]]",[-2835912118937840285],563,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=51f0c7c36448cb51018feb81a47fb9bb792784c7,11 Oct 1999,"(tartime): Now extern. (read_and): Invalid headers cause errors, not
 warnings.
",7,data/crawl/tar/hunk_393.cpp,,,data/crawl/tar/old_hunk_393.cpp,data/crawl/tar/new_hunk_393.cpp,-1,8,,"ERROR ((0, 0, _(""Skipping to next header"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Skipping"", ""to"", ""next"", ""header""]]",[-1753903362793465671],562,"905 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3e3d9b7e3962df782fd733ea9dd2fe2be37f58d6,25 Apr 1997,"GNU tar 1.12
",336,data/crawl/tar/hunk_469.cpp,,,data/crawl/tar/old_hunk_469.cpp,data/crawl/tar/new_hunk_469.cpp,-1,181,,"ERROR ((0, 0, _(""Skipping to next header"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Skipping"", ""to"", ""next"", ""header""]]",[-1753903362793465671],562,"6 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eed93f9a58ed79ec07028b85d54804f042bf7af9,19 Apr 1997,"GNU tar 1.12
",688,data/crawl/tar/hunk_481.cpp,,,data/crawl/tar/old_hunk_481.cpp,data/crawl/tar/new_hunk_481.cpp,-1,160,,"ERROR ((0, 0, _(""Skipping to next header"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Skipping"", ""to"", ""next"", ""header""]]",[-1753903362793465671],562,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,337,,"ERROR ((0, errno, _(""%s: Could not write to file""), name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""write"", ""to"", ""file"", ""name""]]",[33921562830575753003],561,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,347,,"ERROR ((0, errno, _(""%s: Could not write to file""), name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""write"", ""to"", ""file"", ""name""]]",[33921562830575753003],561,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,181,,"ERROR ((0, errno, _(""%s: Cannot chown to uid %d gid %d""),
		    file_name, stat_info->st_uid, stat_info->st_gid));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""chown"", ""to"", ""uid"", ""%d"", ""gid"", ""%d"", ""file_name"", ""stat_info"", ""st_uid"", ""stat_info"", ""st_gid""]]",[13735850454740235596],560,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,190,,"ERROR ((0, errno, _(""%s: Cannot chown to uid %d gid %d""),
		  file_name, stat_info->st_uid, stat_info->st_gid));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""chown"", ""to"", ""uid"", ""%d"", ""gid"", ""%d"", ""file_name"", ""stat_info"", ""st_uid"", ""stat_info"", ""st_gid""]]",[13735850454740235596],560,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,495,,"ERROR ((0, errno, ""%s"", listed_incremental_option));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""listed_incremental_option""]]",[12854428047407403626],559,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,532,,"ERROR ((0, errno, ""%s"", listed_incremental_option));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""listed_incremental_option""]]",[12854428047407403626],559,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,466,-1,"fputs (prefix, stream);",,"[""removeLog""]","[[""fputs"", ""prefix"", ""stream""], []]",[17431155182665630263],558,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,482,-1,"fputs (prefix, stream);",,"[""removeLog""]","[[""fputs"", ""prefix"", ""stream""], []]",[17431155182665630263],558,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,1002,,"fputs (_(""\
This is free software; see the source for copying conditions.  There is NO\n\
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""This"", ""is"", ""free"", ""software"", ""see"", ""the"", ""source"", ""for"", ""copying"", ""conditions"", ""There"", ""is"", ""NO\\n\\"", ""warranty"", ""not"", ""even"", ""for"", ""MERCHANTABILITY"", ""or"", ""FITNESS"", ""FOR"", ""A"", ""PARTICULAR"", ""PURPOSE"", ""\\n"", ""stdout""]]",[6248968462278530505],557,"3 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5540d5aaff399b947f097772be9c5ebc39c8a7d5,22 Apr 1997,"tar 1.13
",194,data/crawl/tar/hunk_479.cpp,,,data/crawl/tar/old_hunk_479.cpp,data/crawl/tar/new_hunk_479.cpp,-1,160,,"fputs (_(""\
This is free software; see the source for copying conditions.  There is NO\n\
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""This"", ""is"", ""free"", ""software"", ""see"", ""the"", ""source"", ""for"", ""copying"", ""conditions"", ""There"", ""is"", ""NO\\n\\"", ""warranty"", ""not"", ""even"", ""for"", ""MERCHANTABILITY"", ""or"", ""FITNESS"", ""FOR"", ""A"", ""PARTICULAR"", ""PURPOSE"", ""\\n"", ""stdout""]]",[6248968462278530505],557,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=48be206fbfd81aa56056d7327fa8295e27011e5f,31 Oct 1997,"(to_oct): Now static.  Value arg is now uintmax_t.  Accept new args
 giving name of type of octal field, for error messages.  Report an error if
 the value is too large to fit in the field. (gid_to_oct, major_to_oct,
 minor_to_oct, mode_to_oct, off_to_oct, size_to_oct, time_to_oct, uid_to_oct,
 uintmax_to_oct): New functions.

(write_eot, write_long, finish_header, deal_with_sparse,
finish_sparse_file, dump_file): Use dev_t, off_t, ssize_t, size_t when
appropriate.  Remove now-useless casts.  Use unsigned long to print
*_t types, except use STRINGIFY_BIGINT for off_t.

(find_new_file_size): 1st arg is now off_t*.
(finish_sparse_file): Args now use off_t, not long.
Check for lseek error.
(create_archive, dump_file): Cast -1 to dev_t when necessary.
(dump_file): Device arg is now dev_t.
Avoid overflow when testing whether file has holes
by using the new ST_NBLOCKSIZE macro.",281,data/crawl/tar/hunk_447.cpp,,,data/crawl/tar/old_hunk_447.cpp,data/crawl/tar/new_hunk_447.cpp,3,4,"ERROR ((0, errno, _(""\
Read error at byte %ld, reading %d bytes, in file %s""),
			 fullsize - *sizeleft, bufsize, name));","ERROR ((0, errno, _(""\
Read error at byte %s, reading %lu bytes, in file %s""),
		      STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		      (unsigned long) bufsize, name));","[""moveVariable"", ""updateContent"", ""addVariable""]","[[""%ld"", ""%d""], [""%lu"", ""%s"", ""STRINGIFY_BIGINT"", ""buf"", ""unsigned"", ""long""]]",[-621088932867069340],556,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=48be206fbfd81aa56056d7327fa8295e27011e5f,31 Oct 1997,"(to_oct): Now static.  Value arg is now uintmax_t.  Accept new args
 giving name of type of octal field, for error messages.  Report an error if
 the value is too large to fit in the field. (gid_to_oct, major_to_oct,
 minor_to_oct, mode_to_oct, off_to_oct, size_to_oct, time_to_oct, uid_to_oct,
 uintmax_to_oct): New functions.

(write_eot, write_long, finish_header, deal_with_sparse,
finish_sparse_file, dump_file): Use dev_t, off_t, ssize_t, size_t when
appropriate.  Remove now-useless casts.  Use unsigned long to print
*_t types, except use STRINGIFY_BIGINT for off_t.

(find_new_file_size): 1st arg is now off_t*.
(finish_sparse_file): Args now use off_t, not long.
Check for lseek error.
(create_archive, dump_file): Cast -1 to dev_t when necessary.
(dump_file): Device arg is now dev_t.
Avoid overflow when testing whether file has holes
by using the new ST_NBLOCKSIZE macro.",281,data/crawl/tar/hunk_448.cpp,,,data/crawl/tar/old_hunk_448.cpp,data/crawl/tar/new_hunk_448.cpp,9,11,"ERROR ((0, errno,
		  _(""Read error at byte %ld, reading %d bytes, in file %s""),
		  fullsize - *sizeleft, bufsize, name));","ERROR ((0, errno,
		  _(""Read error at byte %s, reading %lu bytes, in file %s""),
		  STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		  (unsigned long) bufsize, name));","[""moveVariable"", ""updateContent"", ""addVariable""]","[[""%ld"", ""%d""], [""%lu"", ""%s"", ""STRINGIFY_BIGINT"", ""buf"", ""unsigned"", ""long""]]",[-621088932867069340],556,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4dd9bd50bdcf78b6fbe86cb1153579d3fe57334b,12 Jul 1999,"(append_file): Open the file before statting it, to avoid a race.
 Complain about file shrinkage only when we reach EOF.
",65,data/crawl/tar/hunk_430.cpp,,,data/crawl/tar/old_hunk_430.cpp,data/crawl/tar/new_hunk_430.cpp,-1,13,,"ERROR ((0, errno, ""%s"", path));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""path""]]",[20717563378442670088],555,"809 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3728196fa69fb0908f5c175d750978d1423b8340,24 Apr 1997,"GNU tar 1.12
",481,data/crawl/tar/hunk_474.cpp,,,data/crawl/tar/old_hunk_474.cpp,data/crawl/tar/new_hunk_474.cpp,-1,418,,"ERROR ((0, errno, ""%s"", path));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""path""]]",[20717563378442670088],555,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=dc4a8aa0c6a5bd68735e2ae220260242487c3f1e,11 Aug 1999,"(<fnmatch.h>): Do not include. (from_chars): Renamed from from_oct. 
 New parameter specifing the negative of the minimum allowed value.  Support
 negative and base-64 values. (base64_map): New var. (base64_init): New
 function. (print_header): Output numeric uids and gids if
 numeric_owner_option.
",207,data/crawl/tar/hunk_423.cpp,,,data/crawl/tar/old_hunk_423.cpp,data/crawl/tar/new_hunk_423.cpp,19,22,"ERROR ((0, 0, _(""Blanks in header where octal %s value expected""),
		    type));","ERROR ((0, 0,
		    _(""Blanks in header where numeric %s value expected""),
		    type));","[""updateContent""]","[[""octal""], [""numeric""]]",[4094980648074829014],554,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=dc4a8aa0c6a5bd68735e2ae220260242487c3f1e,11 Aug 1999,"(<fnmatch.h>): Do not include. (from_chars): Renamed from from_oct. 
 New parameter specifing the negative of the minimum allowed value.  Support
 negative and base-64 values. (base64_map): New var. (base64_init): New
 function. (print_header): Output numeric uids and gids if
 numeric_owner_option.
",207,data/crawl/tar/hunk_424.cpp,,,data/crawl/tar/old_hunk_424.cpp,data/crawl/tar/new_hunk_424.cpp,6,6,"ERROR ((0, 0,
		  _(""Header contains %.*s where octal %s value expected""),
		  (int) sizeof buf, buf, type));","ERROR ((0, 0,
		  _(""Header contains `%.*s' where numeric %s value expected""),
		  (int) sizeof buf, buf, type));","[""updateContent""]","[[""octal""], [""numeric""]]",[4094980648074829014],554,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=203dea13a40bae5c6d2dfa221036babd0e345ffe,14 Aug 1999,"(time): Don't declare if defined. (child_open_for_compress): Undo
 previous change. (close_archive): Use waitpid, POSIX-style, instead of old
 BSD style. (new_volume): Likewise.
",126,data/crawl/tar/hunk_420.cpp,,,data/crawl/tar/old_hunk_420.cpp,data/crawl/tar/new_hunk_420.cpp,-1,8,,"ERROR ((0, errno, _(""While waiting for child"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""While"", ""waiting"", ""for"", ""child""]]",[9697808245548899792],553,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=203dea13a40bae5c6d2dfa221036babd0e345ffe,14 Aug 1999,"(time): Don't declare if defined. (child_open_for_compress): Undo
 previous change. (close_archive): Use waitpid, POSIX-style, instead of old
 BSD style. (new_volume): Likewise.
",126,data/crawl/tar/hunk_421.cpp,,,data/crawl/tar/old_hunk_421.cpp,data/crawl/tar/new_hunk_421.cpp,-1,28,,"ERROR ((0, errno,
				      _(""While waiting for child"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""While"", ""waiting"", ""for"", ""child""]]",[9697808245548899792],553,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,710,,"fputs(breaks[0], out);","[""addLog""]","[[], [""fputs"", ""breaks[0]"", ""out""]]",[-3244297555930287933],552,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,715,,"fputs(breaks[0], out);","[""addLog""]","[[], [""fputs"", ""breaks[0]"", ""out""]]",[-3244297555930287933],552,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,691,,"fputs("");"", out);","[""addLog""]","[[], [""fputs"", ""out""]]",[634424772777578192],551,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,702,,"fputs("", "", out);","[""addLog""]","[[], [""fputs"", ""out""]]",[634424772777578192],551,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,704,,"fputs("")  "", out);","[""addLog""]","[[], [""fputs"", ""out""]]",[634424772777578192],551,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_402.cpp,,,data/crawl/tar/old_hunk_402.cpp,data/crawl/tar/new_hunk_402.cpp,-1,311,,"ERROR ((0, errno, _(""%s: close""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""close"", ""p""]]",[23518771888860101399],550,"203 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=13617c42d896aa66178d914d744d2d42fb988248,2 Mar 1999,"(to_oct): New parameter substitute, giving a substitute value to use
 when the original value is out of range.  Do not append a space to the
 output; modern tars don't.  When a value is out of range, specify the maximum
 value, not the number of bits. (GID_NOBODY, UID_NOBODY): New macros.
 (gid_to_oct, uid_to_oct): Use them as substitutes. (finish_header): Do not
 assume that UINTMAX_TO_OCT appends a space. (dump_file): Check whether the
 file changed as we read it.
",79,data/crawl/tar/hunk_443.cpp,,,data/crawl/tar/old_hunk_443.cpp,data/crawl/tar/new_hunk_443.cpp,-1,10,,"ERROR ((0, errno, _(""%s: close""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""close"", ""p""]]",[23518771888860101399],550,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_402.cpp,,,data/crawl/tar/old_hunk_402.cpp,data/crawl/tar/new_hunk_402.cpp,-1,309,,"ERROR ((0, errno, _(""%s: file changed as we read it""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""file"", ""changed"", ""as"", ""we"", ""read"", ""it"", ""p""]]",[2082046952357175080],549,"203 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=13617c42d896aa66178d914d744d2d42fb988248,2 Mar 1999,"(to_oct): New parameter substitute, giving a substitute value to use
 when the original value is out of range.  Do not append a space to the
 output; modern tars don't.  When a value is out of range, specify the maximum
 value, not the number of bits. (GID_NOBODY, UID_NOBODY): New macros.
 (gid_to_oct, uid_to_oct): Use them as substitutes. (finish_header): Do not
 assume that UINTMAX_TO_OCT appends a space. (dump_file): Check whether the
 file changed as we read it.
",79,data/crawl/tar/hunk_443.cpp,,,data/crawl/tar/old_hunk_443.cpp,data/crawl/tar/new_hunk_443.cpp,-1,8,,"ERROR ((0, errno, _(""%s: file changed as we read it""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""file"", ""changed"", ""as"", ""we"", ""read"", ""it"", ""p""]]",[2082046952357175080],549,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_402.cpp,,,data/crawl/tar/old_hunk_402.cpp,data/crawl/tar/new_hunk_402.cpp,-1,306,,"ERROR ((0, errno, ""%s: fstat"", p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""fstat"", ""p""]]",[12074517764533803997],548,"203 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=13617c42d896aa66178d914d744d2d42fb988248,2 Mar 1999,"(to_oct): New parameter substitute, giving a substitute value to use
 when the original value is out of range.  Do not append a space to the
 output; modern tars don't.  When a value is out of range, specify the maximum
 value, not the number of bits. (GID_NOBODY, UID_NOBODY): New macros.
 (gid_to_oct, uid_to_oct): Use them as substitutes. (finish_header): Do not
 assume that UINTMAX_TO_OCT appends a space. (dump_file): Check whether the
 file changed as we read it.
",79,data/crawl/tar/hunk_443.cpp,,,data/crawl/tar/old_hunk_443.cpp,data/crawl/tar/new_hunk_443.cpp,-1,5,,"ERROR ((0, errno, ""%s: fstat"", p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""fstat"", ""p""]]",[12074517764533803997],548,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_400.cpp,,,data/crawl/tar/old_hunk_400.cpp,data/crawl/tar/new_hunk_400.cpp,62,-1,"ERROR ((0, errno, _(""Cannot remove %s""), p));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""], []]",[-8358368121424660287],547,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_400.cpp,,,data/crawl/tar/old_hunk_400.cpp,data/crawl/tar/new_hunk_400.cpp,353,-1,"ERROR ((0, errno, _(""Cannot remove %s""), p));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""], []]",[-8358368121424660287],547,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_400.cpp,,,data/crawl/tar/old_hunk_400.cpp,data/crawl/tar/new_hunk_400.cpp,413,-1,"ERROR ((0, errno, _(""Cannot remove %s""), p));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""p""], []]",[-8358368121424660287],547,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e36ce5668fdaf3e710ec29b3082c9a1f5c27de5,23 Sep 1999,"(name_next): Go back to using plain chdir. (name_gather): Use
 chdir_arg to keep track of arguments to chdir. (addname): Likewise.
 (name_match): Use chdir_do to act on chdir args. (merge_sort): Moved here
 from incremen.c. (compare_names, add_hierarchy_to_namelist,
 collect_and_sort_names): Likewise. (name_expand): Remove. (name_from_list):
 Skip fack names. Use chdir_do to act on chdir args. (struct avoided_name):
 New struct. (avoided_names): New var. (add_avoided_name, is_avoided_name):
 New functions.
",299,data/crawl/tar/hunk_398.cpp,,,data/crawl/tar/old_hunk_398.cpp,data/crawl/tar/new_hunk_398.cpp,-1,184,,"ERROR ((0, errno, _(""Cannot stat %s""), name->name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""%s"", ""name"", ""name""]]",[5291327620340408044],546,"882 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,597,,"ERROR ((0, errno, _(""Cannot stat %s""), name->name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""%s"", ""name"", ""name""]]",[5291327620340408044],546,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=196caec187f27a3c3e4a68eee6bb388d79dac960,13 Dec 1999,"(xclose, xdup2, child_open_for_compress, child_open_for_uncompress,
 archive_write_error, archive_read_error, flush_archive, close_archive,
 init_volume_number, new_volume): Don't assume that gettext preserves errno.

(xdup2): Don't report errno if dup returns an unexpected nonnegative value.
(open_archive): Reject multivolume verify attempts a bit earlier.
Rename local variable `access', in case it's defined by system header.

(open_archive, backspace_output): Use `Cannot' uniformly, instead of
`Could not' sometimes and `Cannot' others.

(open_archive, flush_read, flush_archive, close_archive, new_volume):
Quote arbitrary strings in diagnostics.

(read_error): Set archive to STDOUT_FILENO temporarily when writing
archive buffer.

(init_volume_number): Check for input and output errors in volno_file.

(new_volume): Use new fatal_exit function to exit, and new xfork
function to fork.",292,data/crawl/tar/hunk_384.cpp,,,data/crawl/tar/old_hunk_384.cpp,data/crawl/tar/new_hunk_384.cpp,7,9,"ERROR ((0, errno, ""%s"", volno_file_option));",open_error (volno_file_option);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""%s""], [""open_error""]]",[-16338113477479155614],545,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=196caec187f27a3c3e4a68eee6bb388d79dac960,13 Dec 1999,"(xclose, xdup2, child_open_for_compress, child_open_for_uncompress,
 archive_write_error, archive_read_error, flush_archive, close_archive,
 init_volume_number, new_volume): Don't assume that gettext preserves errno.

(xdup2): Don't report errno if dup returns an unexpected nonnegative value.
(open_archive): Reject multivolume verify attempts a bit earlier.
Rename local variable `access', in case it's defined by system header.

(open_archive, backspace_output): Use `Cannot' uniformly, instead of
`Could not' sometimes and `Cannot' others.

(open_archive, flush_read, flush_archive, close_archive, new_volume):
Quote arbitrary strings in diagnostics.

(read_error): Set archive to STDOUT_FILENO temporarily when writing
archive buffer.

(init_volume_number): Check for input and output errors in volno_file.

(new_volume): Use new fatal_exit function to exit, and new xfork
function to fork.",292,data/crawl/tar/hunk_385.cpp,,,data/crawl/tar/old_hunk_385.cpp,data/crawl/tar/new_hunk_385.cpp,7,9,"ERROR ((0, errno, ""%s"", volno_file_option));",open_error (volno_file_option);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""%s""], [""open_error""]]",[-16338113477479155614],545,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_365.cpp,,,data/crawl/tar/old_hunk_365.cpp,data/crawl/tar/new_hunk_365.cpp,7,9,"ERROR ((0, errno, _(""%s: Could not create symlink to `%s'""),
		  CURRENT_FILE_NAME, current_link_name));","ERROR ((0, e, _(""%s: Cannot create symlink to %s""),
		  quotearg_colon (CURRENT_FILE_NAME),
		  quote (current_link_name)));","[""updateVariable"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""errno"", ""Could"", ""not""], [""e"", ""Cannot"", ""quotearg_colon"", ""quote""]]",[-24576053682506722969],544,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_366.cpp,,,data/crawl/tar/old_hunk_366.cpp,data/crawl/tar/new_hunk_366.cpp,14,15,"ERROR ((0, errno, _(""%s: Could not link to `%s'""),
		CURRENT_FILE_NAME, current_link_name));","ERROR ((0, e, _(""%s: Cannot link to %s""),
		quotearg_colon (CURRENT_FILE_NAME),
		quote (current_link_name)));","[""updateVariable"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""errno"", ""Could"", ""not""], [""e"", ""Cannot"", ""quotearg_colon"", ""quote""]]",[-24576053682506722969],544,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_358.cpp,,,data/crawl/tar/old_hunk_358.cpp,data/crawl/tar/new_hunk_358.cpp,3,3,"ERROR ((0, errno, _(""%s: Could not write to file""), name));",write_error (name);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""write"", ""to"", ""file""], [""write_error""]]",[-38846500230814132941],543,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_359.cpp,,,data/crawl/tar/old_hunk_359.cpp,data/crawl/tar/new_hunk_359.cpp,3,3,"ERROR ((0, errno, _(""%s: Could not write to file""), name));",write_error (name);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""write"", ""to"", ""file""], [""write_error""]]",[-38846500230814132941],543,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_363.cpp,,,data/crawl/tar/old_hunk_363.cpp,data/crawl/tar/new_hunk_363.cpp,3,3,"ERROR ((0, errno, _(""%s: Could not write to file""),
		      CURRENT_FILE_NAME));",write_error (CURRENT_FILE_NAME);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""write"", ""to"", ""file""], [""write_error""]]",[-38846500230814132941],543,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_337.cpp,,,data/crawl/tar/old_hunk_337.cpp,data/crawl/tar/new_hunk_337.cpp,3,3,"ERROR ((0, 0, _(""Unexpected inconsistency when making directory %s""),
	  quote (dir_name)));","ERROR ((0, 0, _(""%s: Unexpected inconsistency when making directory""),
	  quotearg_colon (dir_name)));","[""updateVariable"", ""updateContent""]","[[""quote""], [""quotearg_colon""]]",[-1068118698148011511],542,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_345.cpp,,,data/crawl/tar/old_hunk_345.cpp,data/crawl/tar/new_hunk_345.cpp,2,2,"ERROR ((0, 0,
	      _(""Cannot extract %s -- file is continued from another volume""),
	      quote (current_file_name)));","ERROR ((0, 0,
	      _(""%s: Cannot extract -- file is continued from another volume""),
	      quotearg_colon (current_file_name)));","[""updateVariable"", ""updateContent""]","[[""quote""], [""quotearg_colon""]]",[-1068118698148011511],542,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f74454cb37c715674796f21a2fd75eb0a5a34002,7 Jan 2000,"(find_new_file_size): Return size instead of storing through pointer.
 All callers changed. (deal_with_sparse): Don't keep reading after read
 errors. (finish_sparse_file): Just abort if there is an internal error. Use
 error message functions to report errors consistently. (dump_file): Fix typo:
 stat_warn and stat_error were interchanged. Quote file names with colons if
 possible. Don't restore access times on directories during incremental dumps
 until after dealing with the directory. If ignoring failed reads, count
 closedir errors as warnings, not errors. Fix buffer overrun problem when
 dumping sparse files. If ignoring failed reads, count read errors as
 warnings, not errors. Use error message functions to report errors
 consistently. If ignoring failed reads, count unknown files as warnings, not
 errors.
",236,data/crawl/tar/hunk_326.cpp,,,data/crawl/tar/old_hunk_326.cpp,data/crawl/tar/new_hunk_326.cpp,22,-1,"ERROR ((0, e,
		      _(""Read error at byte %s, reading %lu bytes, in file %s""),
		      STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		      (unsigned long) bufsize, quote (name)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""Read"", ""error"", ""at"", ""byte"", ""%s"", ""reading"", ""%lu"", ""bytes"", ""in"", ""file"", ""%s"", ""STRINGIFY_BIGINT"", ""fullsize"", ""*sizeleft"", ""buf"", ""unsigned"", ""long"", ""bufsize"", ""quote"", ""name""], []]",[-2315910437762395717],541,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f74454cb37c715674796f21a2fd75eb0a5a34002,7 Jan 2000,"(find_new_file_size): Return size instead of storing through pointer.
 All callers changed. (deal_with_sparse): Don't keep reading after read
 errors. (finish_sparse_file): Just abort if there is an internal error. Use
 error message functions to report errors consistently. (dump_file): Fix typo:
 stat_warn and stat_error were interchanged. Quote file names with colons if
 possible. Don't restore access times on directories during incremental dumps
 until after dealing with the directory. If ignoring failed reads, count
 closedir errors as warnings, not errors. Fix buffer overrun problem when
 dumping sparse files. If ignoring failed reads, count read errors as
 warnings, not errors. Use error message functions to report errors
 consistently. If ignoring failed reads, count unknown files as warnings, not
 errors.
",236,data/crawl/tar/hunk_327.cpp,,,data/crawl/tar/old_hunk_327.cpp,data/crawl/tar/new_hunk_327.cpp,5,-1,"ERROR ((0, e,
		  _(""Read error at byte %s, reading %lu bytes, in file %s""),
		  STRINGIFY_BIGINT (fullsize - *sizeleft, buf),
		  (unsigned long) bufsize, quote (name)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""Read"", ""error"", ""at"", ""byte"", ""%s"", ""reading"", ""%lu"", ""bytes"", ""in"", ""file"", ""%s"", ""STRINGIFY_BIGINT"", ""fullsize"", ""*sizeleft"", ""buf"", ""unsigned"", ""long"", ""bufsize"", ""quote"", ""name""], []]",[-2315910437762395717],541,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,20,,"ERROR ((0, e, _(""%s: Cannot rename to %s""),
	      quotearg_colon (before_backup_name),
	      quote_n (1, after_backup_name)));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""rename"", ""to"", ""%s"", ""quotearg_colon"", ""before_backup_name"", ""quote_n"", ""1"", ""after_backup_name""]]",[16504530862957520272],540,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,38,,"ERROR ((0, e, _(""%s: Cannot rename to %s""),
		  quotearg_colon (after_backup_name),
		  quote_n (1, before_backup_name)));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""rename"", ""to"", ""%s"", ""quotearg_colon"", ""after_backup_name"", ""quote_n"", ""1"", ""before_backup_name""]]",[16504530862957520272],540,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_281.cpp,,,data/crawl/tar/old_hunk_281.cpp,data/crawl/tar/new_hunk_281.cpp,3,3,"ERROR ((0, errno, ""%s"", path));",stat_error (path);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""%s""], [""stat_error""]]",[-20763455767742925080],539,"1319 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a78ab36e1e4d7dccedaf7d1fcbaca6bb6ec0eed6,13 Dec 1999,"(<quotearg.h>): New include. (append_file): Don't assume that gettext
 preserves errno. Quote arbitrary strings in diagnostics. Check for close
 error.
",24,data/crawl/tar/hunk_347.cpp,,,data/crawl/tar/old_hunk_347.cpp,data/crawl/tar/new_hunk_347.cpp,8,8,"ERROR ((0, errno, ""%s"", path));",stat_error (path);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""%s""], [""stat_error""]]",[-20763455767742925080],539,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5be0f2ba491f27074c35875185286d1d425ce044,31 Aug 2003,"New file
",295,data/crawl/tar/hunk_277.cpp,,,data/crawl/tar/old_hunk_277.cpp,data/crawl/tar/new_hunk_277.cpp,-1,110,,"ERROR ((0, 0, _(""Malformed extended headed"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""headed""]]",[6499775363201000727],538,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5be0f2ba491f27074c35875185286d1d425ce044,31 Aug 2003,"New file
",295,data/crawl/tar/hunk_277.cpp,,,data/crawl/tar/old_hunk_277.cpp,data/crawl/tar/new_hunk_277.cpp,-1,121,,"ERROR ((0, 0, _(""Malformed extended headed"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""headed""]]",[6499775363201000727],538,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,181,93,"ERROR ((0, errno, ""%s"", listed_incremental_option));",read_error (listed_incremental_option);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""%s""], [""read_error""]]",[-22658329873496918114],537,"1357 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=196caec187f27a3c3e4a68eee6bb388d79dac960,13 Dec 1999,"(xclose, xdup2, child_open_for_compress, child_open_for_uncompress,
 archive_write_error, archive_read_error, flush_archive, close_archive,
 init_volume_number, new_volume): Don't assume that gettext preserves errno.

(xdup2): Don't report errno if dup returns an unexpected nonnegative value.
(open_archive): Reject multivolume verify attempts a bit earlier.
Rename local variable `access', in case it's defined by system header.

(open_archive, backspace_output): Use `Cannot' uniformly, instead of
`Could not' sometimes and `Cannot' others.

(open_archive, flush_read, flush_archive, close_archive, new_volume):
Quote arbitrary strings in diagnostics.

(read_error): Set archive to STDOUT_FILENO temporarily when writing
archive buffer.

(init_volume_number): Check for input and output errors in volno_file.

(new_volume): Use new fatal_exit function to exit, and new xfork
function to fork.",292,data/crawl/tar/hunk_384.cpp,,,data/crawl/tar/old_hunk_384.cpp,data/crawl/tar/new_hunk_384.cpp,4,4,"ERROR ((0, errno, ""%s"", volno_file_option));",read_error (volno_file_option);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""%s""], [""read_error""]]",[-22658329873496918114],537,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_273.cpp,,,data/crawl/tar/old_hunk_273.cpp,data/crawl/tar/new_hunk_273.cpp,157,172,"ERROR ((0, errno, _(""Cannot stat %s""), name_buffer));",stat_error (name_buffer);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""%s""], [""stat_error""]]",[-17812926757777908747],536,"1357 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f0429c4a22e5b19eefbdbc684e9e175a1cca9a3e,13 Dec 1999,"(<quotearg.h>): New include. (name_init, name_next, name_close,
 names_notfound, collect_and_sort_names): Don't assume that gettext preserves
 errno. Quote arbitrary strings in diagnostics. (excluded_name): Fix typo that
 caused empty patterns to be mishandled.
",20,data/crawl/tar/hunk_353.cpp,,,data/crawl/tar/old_hunk_353.cpp,data/crawl/tar/new_hunk_353.cpp,3,3,"ERROR ((0, errno, _(""Cannot stat %s""), name->name));",stat_error (name->name);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""%s""], [""stat_error""]]",[-17812926757777908747],536,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_264.cpp,,,data/crawl/tar/old_hunk_264.cpp,data/crawl/tar/new_hunk_264.cpp,17,14,"report_difference (_(""Not a regular file""));","report_difference (_(""File type differs""));","[""updateContent""]","[[""Not"", ""a"", ""regular"", ""file""], [""File"", ""type"", ""differs""]]",[10900295297319332681],535,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_268.cpp,,,data/crawl/tar/old_hunk_268.cpp,data/crawl/tar/new_hunk_268.cpp,12,11,"report_difference (_(""Not a regular file""));","report_difference (_(""File type differs""));","[""updateContent""]","[[""Not"", ""a"", ""regular"", ""file""], [""File"", ""type"", ""differs""]]",[10900295297319332681],535,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_259.cpp,,,data/crawl/tar/old_hunk_259.cpp,data/crawl/tar/new_hunk_259.cpp,81,65,"report_difference (_(""Data differs""));","report_difference (_(""Contents differ""));","[""updateContent""]","[[""Data"", ""differs""], [""Contents"", ""differ""]]",[5844901200695419596],534,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_259.cpp,,,data/crawl/tar/old_hunk_259.cpp,data/crawl/tar/new_hunk_259.cpp,101,81,"report_difference (_(""Data differs""));","report_difference (_(""Contents differ""));","[""updateContent""]","[[""Data"", ""differs""], [""Contents"", ""differ""]]",[5844901200695419596],534,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_263.cpp,,,data/crawl/tar/old_hunk_263.cpp,data/crawl/tar/new_hunk_263.cpp,3,3,"report_difference (_(""Data differs""));","report_difference (_(""Contents differ""));","[""updateContent""]","[[""Data"", ""differs""], [""Contents"", ""differ""]]",[5844901200695419596],534,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=10edb315da532371e65a7d83a16f50ade5b545e4,3 Sep 2003,"(struct xhdr_tab.keyword): Now pointer to const. (struct
 xhdr_tab.coder, struct xhdr_tab.decoder, locate_handler, decode_record,
 xheader_store, xheader_print, code_string, code_time, code_num, dummy_coder,
 dummy_decoder, atime_coder, atime_decoder, gid_coder, gid_decoder,
 gname_coder, gname_decoder, linkpath_coder, linkpath_decoder, ctime_coder,
 ctime_decoder, mtime_coder, mtime_decoder, path_coder, path_decoder,
 size_coder, size_decoder, uid_coder, uid_decoder, uname_coder,
 uname_decoder): Use pointers to const when possible. (xhdr_tab): Now const.

(struct xhdr_tab.decoder, dummy_decoder,
atime_decoder, gid_decoder, gname_decoder, linkpath_decoder,
ctime_decoder, mtime_decoder, path_decoder, size_decoder,
uid_decoder, uname_decoder): Remove unused keyword arg.
All uses changed.

(xhdr_tab, format_uintmax): Now static.

(dummy_coder, dummy_decoder, atime_coder,
atime_decoder, gid_coder, gid_decoder, gname_coder, gname_decoder,
linkpath_coder, linkpath_decoder, mtime_coder, mtime_decoder,
ctime_coder, ctime_decoder, path_coder, path_decoder, size_coder,
size_decoder, uid_coder, uid_decoder, uname_coder, uname_decoder):
Remove forward decls; no longer needed.
(xhdr_tab): Move to end, so that the forward decls aren't needed.
Add a forward declaration.

(decode_record): Return bool, not int.

(decode_record): Fix misspelling in diagnostic
""extended headed"" -> ""extended header"".

(decode_record, xheader_decode):
Do not use decls like ""char *p, *q;"".",258,data/crawl/tar/hunk_257.cpp,,,data/crawl/tar/old_hunk_257.cpp,data/crawl/tar/new_hunk_257.cpp,17,18,"ERROR ((0, 0, _(""Malformed extended headed"")));","ERROR ((0, 0, _(""Malformed extended header"")));","[""updateContent""]","[[""headed""], [""header""]]",[10],533,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=10edb315da532371e65a7d83a16f50ade5b545e4,3 Sep 2003,"(struct xhdr_tab.keyword): Now pointer to const. (struct
 xhdr_tab.coder, struct xhdr_tab.decoder, locate_handler, decode_record,
 xheader_store, xheader_print, code_string, code_time, code_num, dummy_coder,
 dummy_decoder, atime_coder, atime_decoder, gid_coder, gid_decoder,
 gname_coder, gname_decoder, linkpath_coder, linkpath_decoder, ctime_coder,
 ctime_decoder, mtime_coder, mtime_decoder, path_coder, path_decoder,
 size_coder, size_decoder, uid_coder, uid_decoder, uname_coder,
 uname_decoder): Use pointers to const when possible. (xhdr_tab): Now const.

(struct xhdr_tab.decoder, dummy_decoder,
atime_decoder, gid_decoder, gname_decoder, linkpath_decoder,
ctime_decoder, mtime_decoder, path_decoder, size_decoder,
uid_decoder, uname_decoder): Remove unused keyword arg.
All uses changed.

(xhdr_tab, format_uintmax): Now static.

(dummy_coder, dummy_decoder, atime_coder,
atime_decoder, gid_coder, gid_decoder, gname_coder, gname_decoder,
linkpath_coder, linkpath_decoder, mtime_coder, mtime_decoder,
ctime_coder, ctime_decoder, path_coder, path_decoder, size_coder,
size_decoder, uid_coder, uid_decoder, uname_coder, uname_decoder):
Remove forward decls; no longer needed.
(xhdr_tab): Move to end, so that the forward decls aren't needed.
Add a forward declaration.

(decode_record): Return bool, not int.

(decode_record): Fix misspelling in diagnostic
""extended headed"" -> ""extended header"".

(decode_record, xheader_decode):
Do not use decls like ""char *p, *q;"".",258,data/crawl/tar/hunk_258.cpp,,,data/crawl/tar/old_hunk_258.cpp,data/crawl/tar/new_hunk_258.cpp,3,3,"ERROR ((0, 0, _(""Malformed extended headed"")));","ERROR ((0, 0, _(""Malformed extended header"")));","[""updateContent""]","[[""headed""], [""header""]]",[10],533,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b085ca30976ec26256344bd3532205d440e69309,4 Oct 2003,"System-dependent functions
",633,data/crawl/tar/hunk_245.cpp,,,data/crawl/tar/old_hunk_245.cpp,data/crawl/tar/new_hunk_245.cpp,-1,237,,"report_difference (_(""Gid differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Gid"", ""differs""]]",[679502179580441274],532,"2363 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,495,,"report_difference (_(""Gid differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Gid"", ""differs""]]",[679502179580441274],532,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b085ca30976ec26256344bd3532205d440e69309,4 Oct 2003,"System-dependent functions
",633,data/crawl/tar/hunk_245.cpp,,,data/crawl/tar/old_hunk_245.cpp,data/crawl/tar/new_hunk_245.cpp,-1,235,,"report_difference (_(""Uid differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Uid"", ""differs""]]",[3361469078397983500],531,"2363 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,493,,"report_difference (_(""Uid differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Uid"", ""differs""]]",[3361469078397983500],531,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b085ca30976ec26256344bd3532205d440e69309,4 Oct 2003,"System-dependent functions
",633,data/crawl/tar/hunk_245.cpp,,,data/crawl/tar/old_hunk_245.cpp,data/crawl/tar/new_hunk_245.cpp,-1,201,,"ERROR ((0, 0, _(""Child returned status %d""),
		WEXITSTATUS (wait_status)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Child"", ""returned"", ""status"", ""%d"", ""WEXITSTATUS"", ""wait_status""]]",[5089383475775470177],530,"2353 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,-1,412,,"ERROR ((0, 0, _(""Child returned status %d""),
		      WEXITSTATUS (wait_status)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Child"", ""returned"", ""status"", ""%d"", ""WEXITSTATUS"", ""wait_status""]]",[5089383475775470177],530,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_235.cpp,,,data/crawl/tar/old_hunk_235.cpp,data/crawl/tar/new_hunk_235.cpp,-1,7,,"report_difference (ngettext (""Could only read %lu of %lu byte"",
				     ""Could only read %lu of %lu bytes"",
				     chunk_size),
				     (unsigned long) status,
				     (unsigned long) chunk_size);","[""addLog""]","[[], [""report_difference"", ""ngettext"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""byte"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""bytes"", ""chunk_size"", ""unsigned"", ""long"", ""status"", ""unsigned"", ""long"", ""chunk_size""]]",[-22896553458468658720],529,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_236.cpp,,,data/crawl/tar/old_hunk_236.cpp,data/crawl/tar/new_hunk_236.cpp,-1,7,,"report_difference (ngettext (""Could only read %lu of %lu byte"",
				 ""Could only read %lu of %lu bytes"",
				 chunk_size),
				 (unsigned long) status,
				 (unsigned long) chunk_size);","[""addLog""]","[[], [""report_difference"", ""ngettext"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""byte"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""bytes"", ""chunk_size"", ""unsigned"", ""long"", ""status"", ""unsigned"", ""long"", ""chunk_size""]]",[-22896553458468658720],529,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3999bf6360930179f08a1265ce8713705aafd405,17 Nov 2003,"(diff_sparse_files): Temporary placeholder.
",144,data/crawl/tar/hunk_227.cpp,,,data/crawl/tar/old_hunk_227.cpp,data/crawl/tar/new_hunk_227.cpp,72,-1,"report_difference (ngettext (""Could only read %lu of %lu byte"",
				     ""Could only read %lu of %lu bytes"",
				     chunk_size),
				     (unsigned long) status,
				     (unsigned long) chunk_size);",,"[""removeLog""]","[[""report_difference"", ""ngettext"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""byte"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""bytes"", ""chunk_size"", ""unsigned"", ""long"", ""status"", ""unsigned"", ""long"", ""chunk_size""], []]",[22896553458468658720],528,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3999bf6360930179f08a1265ce8713705aafd405,17 Nov 2003,"(diff_sparse_files): Temporary placeholder.
",144,data/crawl/tar/hunk_227.cpp,,,data/crawl/tar/old_hunk_227.cpp,data/crawl/tar/new_hunk_227.cpp,104,-1,"report_difference (ngettext (""Could only read %lu of %lu byte"",
				 ""Could only read %lu of %lu bytes"",
				 chunk_size),
				 (unsigned long) status,
				 (unsigned long) chunk_size);",,"[""removeLog""]","[[""report_difference"", ""ngettext"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""byte"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""bytes"", ""chunk_size"", ""unsigned"", ""long"", ""status"", ""unsigned"", ""long"", ""chunk_size""], []]",[22896553458468658720],528,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d4e70d365615e56cadd4093aaa5c0046cf2c9c95,17 Nov 2003,"(sys_compare_uid,sys_compare_gid): New functions
 (sys_compare_uid_gid): Removed. (sys_compare_links): Changed declaration
",44,data/crawl/tar/hunk_224.cpp,,,data/crawl/tar/old_hunk_224.cpp,data/crawl/tar/new_hunk_224.cpp,9,-1,"report_difference (_(""Gid differs""));",,"[""removeLog""]","[[""report_difference"", ""_"", ""Gid"", ""differs""], []]",[-679502179580441274],527,"44 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_238.cpp,,,data/crawl/tar/old_hunk_238.cpp,data/crawl/tar/new_hunk_238.cpp,10,-1,"report_difference (_(""Gid differs""));",,"[""removeLog""]","[[""report_difference"", ""_"", ""Gid"", ""differs""], []]",[-679502179580441274],527,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d4e70d365615e56cadd4093aaa5c0046cf2c9c95,17 Nov 2003,"(sys_compare_uid,sys_compare_gid): New functions
 (sys_compare_uid_gid): Removed. (sys_compare_links): Changed declaration
",44,data/crawl/tar/hunk_224.cpp,,,data/crawl/tar/old_hunk_224.cpp,data/crawl/tar/new_hunk_224.cpp,7,-1,"report_difference (_(""Uid differs""));",,"[""removeLog""]","[[""report_difference"", ""_"", ""Uid"", ""differs""], []]",[-3361469078397983500],526,"44 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_238.cpp,,,data/crawl/tar/old_hunk_238.cpp,data/crawl/tar/new_hunk_238.cpp,8,-1,"report_difference (_(""Uid differs""));",,"[""removeLog""]","[[""report_difference"", ""_"", ""Uid"", ""differs""], []]",[-3361469078397983500],526,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8d6e47cc7fcfb6781b82ba60b8eb823c7fdc7013,17 Nov 2003,"Support for star sparse format
",157,data/crawl/tar/hunk_208.cpp,,,data/crawl/tar/old_hunk_208.cpp,data/crawl/tar/new_hunk_208.cpp,-1,55,,"ERROR ((0, 0, _(""%s: invalid sparse archive member""),
	      file->stat_info->orig_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""invalid"", ""sparse"", ""archive"", ""member"", ""file"", ""stat_info"", ""orig_file_name""]]",[26612204202219195932],525,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=18ef8acac57d9af27d42b11925c8767470976be9,17 Nov 2003,"Added sparse.c
",532,data/crawl/tar/hunk_229.cpp,,,data/crawl/tar/old_hunk_229.cpp,data/crawl/tar/new_hunk_229.cpp,-1,461,,"ERROR ((0, 0, _(""%s: invalid sparse archive member""),
	      file->stat_info->orig_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""invalid"", ""sparse"", ""archive"", ""member"", ""file"", ""stat_info"", ""orig_file_name""]]",[26612204202219195932],525,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a71d32d2f16989a8c82d3946d4f7ecd6093a55a,5 Feb 2005,"Code clean up.
",489,data/crawl/tar/hunk_168.cpp,,,data/crawl/tar/old_hunk_168.cpp,data/crawl/tar/new_hunk_168.cpp,-1,233,,"ERROR ((0, 0, _(""%s: Unknown file type '%c', diffed as normal file""),
	      quotearg_colon (current_stat_info.file_name),
	      current_header->header.typeflag));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Unknown"", ""file"", ""type"", ""%c"", ""diffed"", ""as"", ""normal"", ""file"", ""quotearg_colon"", ""current_stat_info"", ""file_name"", ""current_header"", ""header"", ""typeflag""]]",[-9769860923353638288],524,"524 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_263.cpp,,,data/crawl/tar/old_hunk_263.cpp,data/crawl/tar/new_hunk_263.cpp,-1,50,,"ERROR ((0, 0, _(""%s: Unknown file type '%c', diffed as normal file""),
	      quotearg_colon (current_stat_info.file_name),
	      current_header->header.typeflag));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Unknown"", ""file"", ""type"", ""%c"", ""diffed"", ""as"", ""normal"", ""file"", ""quotearg_colon"", ""current_stat_info"", ""file_name"", ""current_header"", ""header"", ""typeflag""]]",[-9769860923353638288],524,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=374ae10d39e9e52789a00202c831a1c7c45e1610,7 Nov 2005,"(xheader_keyword_deleted_p): Remove static qualifier. (struct
 xhdr_tab.decoder): Change prototype. POSIX allows string values to contain
 embedded nulls, so take an extra argument specifying the length of the
 string. (decx,decg,dummy_decoder,atime_decoder,gid_decoder)
 (gname_decoder,linkpath_decoder,ctime_decoder,mtime_decoder)
 (path_decoder,size_decoder,uid_decoder,uname_decoder)
 (sparse_size_decoder,sparse_numblocks_decoder)
 (sparse_offset_decoder,sparse_numbytes_decoder): Likewise. (decode_record):
 Pass value length to the handler (run_override_list): Pass value length to
 the decoder (xheader_print_n): New function (xheader_print): Rewritten using
 xheader_print_n (xheader_finish): Do not rely om strlen to compute the length
 of the collected string: it can contain embedded nulls
 (xheader_string_begin,xheader_string_add,xheader_string_end): New functions.
 (sparse_map_decoder,dumpdir_coder,dumpdir_decoder): New functions. Handle
 GNU.sparse.map and GNU.dumpdir variables. (xhdr_tab): Add new variables.
",275,data/crawl/tar/hunk_138.cpp,,,data/crawl/tar/old_hunk_138.cpp,data/crawl/tar/new_hunk_138.cpp,-1,19,,"ERROR ((0, 0, _(""Malformed extended header: invalid %s=%s""),
		  keyword, arg));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""invalid"", ""%s"", ""%s"", ""keyword"", ""arg""]]",[-7993277460257527416],523,"138 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d659cbaccdc1f3279c49107cf15f15a639738529,22 Jun 2005,"Carefully crafted invalid headers can cause buffer overrun. Invalid
 header fields go undiagnosed. Some valid time strings are ignored.

* NEWS: Better support for full-resolution time stamps.
The -v option now prints time stamps only to 1-minute resolution.
* gnulib.modules: Add utimens.
* lib/.cvsignore: Add imaxtostr.c, inttostr.c, inttostr.h,
offtostr.c, umaxtostr.c, utimens.c, utimens.h.  Remove paxconvert.c.
* lib/Makefile.tmpl (libtar_a_SOURCES): Remove paxconvert.c.
* lib/paxconvert.c: Remove; superseded by umaxtostr.c.
* po/POTFILES.in: Remove lib/paxconvert.c.  Add lib/xalloc-die.c,
lib/obstack.c.
* src/buffer.c (set_start_time, compute_duration, start_time):
Use gettime rather than rolling our own code.
* src/common.h (OLDGNU_NAME_FIELD_SIZE, MAXOCTAL11, MAXOCTAL7): Remove.
(newer_ctime_option): Remove.
(timespec_lt): New function.
(OLDER_STAT_TIME): Use it.
(string_to_chars): First arg is char const *, not char *.
(tartime): Time arg is now struct timespec.  New bool arg.
All callers changed.
(code_ns_fraction): New decl.
(sys_stat_nanoseconds): Remove decl.
(get_stat_atime, get_stat_ctime, get_stat_mtime): New functions.
(set_stat_atime, set_stat_ctime, set_stat_mtime): New functions.
* src/compare.c: Include utimens.h rather than rolling our own.
(diff_dir, diff_file, diff_link, diff_symlink, diff_special):
Prototype.
(diff_dumpdir, diff_multivol): Prototype.
(diff_file): Support higher-resolution time stamps.
* src/create.c: Include utimens.h rather than rolling our own.
(MAX_OCTAL_VAL): New macro.
(tar_copy_str, string_to_chars): Don't bother to zero-fill;
the destination is already zeroed.
(string_to_chars): First arg is char const *.
(start_private_header): Use MINOR_TO_CHARS, not MAJOR_TO_CHARS,
for minor device number.
(write_header_name, dump_hard_link, dump_file0):
Simplify test for old GNU format.
(start_header): Put in placeholders for uid, etc., even when
using extended headers, for benefit of older ""tar"" implementations.
Don't assume uintmax_t is wider than 32 bits.
Output extended header for mtime if needed.
(dump_regular_finish, dump_file0):
Support extended time stamp resolution.
* src/extract.c: Include utimens.h rather than rolling our own.
(check_time): Support extended time stamp resolution.
* src/list.c: Include <inttostr.h>.
(tartime): Use umaxtostr rather than stringify_uintmax_t_backwards.
* src/xheader.c: Include <inttostr.h>.
Do not include <xstrtol.h>.
(strtoimax) [!HAVE_DECL_STRTOIMAX && !defined strtoimax]: New decl.
(strtoumax) [!HAVE_DECL_STRTOUMAX && !defined strtoumax]: New decl.
(BILLION, LOG10_BILLION): New constants.
(to_decimal): Remove; superseded by inttostr.  All callers changed
to use umaxtostr.
(xheader_format_name): Don't assume pids and uintmax_t values
fit in 63 bytes (!) when printed.
(decode_record): Don't bother to check for ERANGE; an out of range
value must be treater than len_max anyway.
If the length is out of range, output it in the diagnostic.
(format_uintmax): Remove; all callers changed to use umaxtostr.
(xheader_print): Don't assume sizes can be printed in 99 bytes (!).
(out_of_range_header): New function.
(decode_time): Use it.
(code_time): Accept struct timespec, not time_t and unsigned long.
All callers changed.  Size sbuf properly, and remove unnecessary check.
Don't assume time stamps can fit in 199 bytes.
Handle negative time stamps.  Handle fractional time stamps
more consistently.  Don't output unnecessary trailing zeros.
(decode_time): Yield struct timespec, not time_t and unsigned long.
All callers changed.
Handle negative time stamps.  Truncate towards minus infinity
consistently.  Improve overflow checks, and output a better
diagnostic on overflow.
(code_num): Don't assume uintmax_t can be printed in 99 bytes (!).
(decode_num): New function, for better diagnostics.
(atime_coder, atime_decoder, gid_decoder, ctime_coder):
(ctime_decoder, mtime_coder, mtime_decoder, size_decoder):
(uid_decoder, sparse_size_decoder, sparse_numblocks_decoder):
(sparse_offset_decoder, sparse_numbytes_decoder):
Use decode_num, etc., instead of xstrtoumax, etc.

* src/xheader.c (sparse_numblocks_decoder): Remove unchecked use
of `calloc'.  Use xcalloc instead.
(decode_time, gid_decoder, size_decoder, uid_decoder):
(sparse_size_decoder, sparse_offset_decoder, sparse_numblocks_decoder):
Ensure that the result of calling xstrtoumax is no larger than
the maximum value for the target type.  Upon any failure, exit with
a diagnostic.
(sparse_numblocks_decoder): Avoid buffer overrun/heap corruption:
use x2nrealloc, rather than `n *= 2' and xrealloc(p, n,....
(decode_time): Rewrite to accept time strings like
1119018481.000000000.  Before, such strings were always ignored.",1185,data/crawl/tar/hunk_148.cpp,,,data/crawl/tar/old_hunk_148.cpp,data/crawl/tar/new_hunk_148.cpp,-1,98,,"ERROR ((0, 0, _(""Malformed extended header: invalid %s=%s""),
	  keyword, arg));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""invalid"", ""%s"", ""%s"", ""keyword"", ""arg""]]",[-7993277460257527416],523,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d659cbaccdc1f3279c49107cf15f15a639738529,22 Jun 2005,"Carefully crafted invalid headers can cause buffer overrun. Invalid
 header fields go undiagnosed. Some valid time strings are ignored.

* NEWS: Better support for full-resolution time stamps.
The -v option now prints time stamps only to 1-minute resolution.
* gnulib.modules: Add utimens.
* lib/.cvsignore: Add imaxtostr.c, inttostr.c, inttostr.h,
offtostr.c, umaxtostr.c, utimens.c, utimens.h.  Remove paxconvert.c.
* lib/Makefile.tmpl (libtar_a_SOURCES): Remove paxconvert.c.
* lib/paxconvert.c: Remove; superseded by umaxtostr.c.
* po/POTFILES.in: Remove lib/paxconvert.c.  Add lib/xalloc-die.c,
lib/obstack.c.
* src/buffer.c (set_start_time, compute_duration, start_time):
Use gettime rather than rolling our own code.
* src/common.h (OLDGNU_NAME_FIELD_SIZE, MAXOCTAL11, MAXOCTAL7): Remove.
(newer_ctime_option): Remove.
(timespec_lt): New function.
(OLDER_STAT_TIME): Use it.
(string_to_chars): First arg is char const *, not char *.
(tartime): Time arg is now struct timespec.  New bool arg.
All callers changed.
(code_ns_fraction): New decl.
(sys_stat_nanoseconds): Remove decl.
(get_stat_atime, get_stat_ctime, get_stat_mtime): New functions.
(set_stat_atime, set_stat_ctime, set_stat_mtime): New functions.
* src/compare.c: Include utimens.h rather than rolling our own.
(diff_dir, diff_file, diff_link, diff_symlink, diff_special):
Prototype.
(diff_dumpdir, diff_multivol): Prototype.
(diff_file): Support higher-resolution time stamps.
* src/create.c: Include utimens.h rather than rolling our own.
(MAX_OCTAL_VAL): New macro.
(tar_copy_str, string_to_chars): Don't bother to zero-fill;
the destination is already zeroed.
(string_to_chars): First arg is char const *.
(start_private_header): Use MINOR_TO_CHARS, not MAJOR_TO_CHARS,
for minor device number.
(write_header_name, dump_hard_link, dump_file0):
Simplify test for old GNU format.
(start_header): Put in placeholders for uid, etc., even when
using extended headers, for benefit of older ""tar"" implementations.
Don't assume uintmax_t is wider than 32 bits.
Output extended header for mtime if needed.
(dump_regular_finish, dump_file0):
Support extended time stamp resolution.
* src/extract.c: Include utimens.h rather than rolling our own.
(check_time): Support extended time stamp resolution.
* src/list.c: Include <inttostr.h>.
(tartime): Use umaxtostr rather than stringify_uintmax_t_backwards.
* src/xheader.c: Include <inttostr.h>.
Do not include <xstrtol.h>.
(strtoimax) [!HAVE_DECL_STRTOIMAX && !defined strtoimax]: New decl.
(strtoumax) [!HAVE_DECL_STRTOUMAX && !defined strtoumax]: New decl.
(BILLION, LOG10_BILLION): New constants.
(to_decimal): Remove; superseded by inttostr.  All callers changed
to use umaxtostr.
(xheader_format_name): Don't assume pids and uintmax_t values
fit in 63 bytes (!) when printed.
(decode_record): Don't bother to check for ERANGE; an out of range
value must be treater than len_max anyway.
If the length is out of range, output it in the diagnostic.
(format_uintmax): Remove; all callers changed to use umaxtostr.
(xheader_print): Don't assume sizes can be printed in 99 bytes (!).
(out_of_range_header): New function.
(decode_time): Use it.
(code_time): Accept struct timespec, not time_t and unsigned long.
All callers changed.  Size sbuf properly, and remove unnecessary check.
Don't assume time stamps can fit in 199 bytes.
Handle negative time stamps.  Handle fractional time stamps
more consistently.  Don't output unnecessary trailing zeros.
(decode_time): Yield struct timespec, not time_t and unsigned long.
All callers changed.
Handle negative time stamps.  Truncate towards minus infinity
consistently.  Improve overflow checks, and output a better
diagnostic on overflow.
(code_num): Don't assume uintmax_t can be printed in 99 bytes (!).
(decode_num): New function, for better diagnostics.
(atime_coder, atime_decoder, gid_decoder, ctime_coder):
(ctime_decoder, mtime_coder, mtime_decoder, size_decoder):
(uid_decoder, sparse_size_decoder, sparse_numblocks_decoder):
(sparse_offset_decoder, sparse_numbytes_decoder):
Use decode_num, etc., instead of xstrtoumax, etc.

* src/xheader.c (sparse_numblocks_decoder): Remove unchecked use
of `calloc'.  Use xcalloc instead.
(decode_time, gid_decoder, size_decoder, uid_decoder):
(sparse_size_decoder, sparse_offset_decoder, sparse_numblocks_decoder):
Ensure that the result of calling xstrtoumax is no larger than
the maximum value for the target type.  Upon any failure, exit with
a diagnostic.
(sparse_numblocks_decoder): Avoid buffer overrun/heap corruption:
use x2nrealloc, rather than `n *= 2' and xrealloc(p, n,....
(decode_time): Rewrite to accept time strings like
1119018481.000000000.  Before, such strings were always ignored.",1185,data/crawl/tar/hunk_148.cpp,,,data/crawl/tar/old_hunk_148.cpp,data/crawl/tar/new_hunk_148.cpp,-1,125,,"ERROR ((0, 0, _(""Malformed extended header: invalid %s=%s""),
	      keyword, arg));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""invalid"", ""%s"", ""%s"", ""keyword"", ""arg""]]",[-7993277460257527416],523,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,40,,"ERROR ((0, 0, ""%s:%ld: %s"",
	    quotearg_colon (listed_incremental_option),
	    lineno,
	    _(""Time stamp out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Time"", ""stamp"", ""out"", ""of"", ""range""]]",[-2806195093742348100],522,"184 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,55,,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option),
		lineno,
		_(""Time stamp out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Time"", ""stamp"", ""out"", ""of"", ""range""]]",[-2806195093742348100],522,"184 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_141.cpp,,,data/crawl/tar/old_hunk_141.cpp,data/crawl/tar/new_hunk_141.cpp,-1,39,,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option),
		lineno,
		_(""Time stamp out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Time"", ""stamp"", ""out"", ""of"", ""range""]]",[-2806195093742348100],522,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,35,,"ERROR ((0, 0, ""%s:%ld: %s"",
	    quotearg_colon (listed_incremental_option),
	    lineno,
	    _(""Invalid time stamp"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""time"", ""stamp""]]",[-12204441145755381776],521,"184 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,50,,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option),
		lineno,
		_(""Invalid time stamp"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""time"", ""stamp""]]",[-12204441145755381776],521,"184 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_141.cpp,,,data/crawl/tar/old_hunk_141.cpp,data/crawl/tar/new_hunk_141.cpp,-1,34,,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option),
		lineno,
		_(""Invalid time stamp"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""time"", ""stamp""]]",[-12204441145755381776],521,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_141.cpp,,,data/crawl/tar/old_hunk_141.cpp,data/crawl/tar/new_hunk_141.cpp,-1,11,,"ERROR((1, 0, _(""Bad incremental file format"")));","[""addLog""]","[[], [""ERROR"", ""1"", ""0"", ""_"", ""Bad"", ""incremental"", ""file"", ""format""]]",[11796039148251015704],520,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_141.cpp,,,data/crawl/tar/old_hunk_141.cpp,data/crawl/tar/new_hunk_141.cpp,-1,14,,"ERROR((1, 0, _(""Bad incremental file format"")));","[""addLog""]","[[], [""ERROR"", ""1"", ""0"", ""_"", ""Bad"", ""incremental"", ""file"", ""format""]]",[11796039148251015704],520,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_141.cpp,,,data/crawl/tar/old_hunk_141.cpp,data/crawl/tar/new_hunk_141.cpp,7,49,"ERROR ((0, 0, ""%s:1: %s"", quotearg_colon (listed_incremental_option),
		_(""Invalid time stamp"")));","ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option),
		    lineno,
		    _(""Invalid time stamp"")));","[""updateContent"", ""addVariable""]","[[""1""], [""%ld"", ""lineno""]]",[-11775054436867289357],519,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_141.cpp,,,data/crawl/tar/old_hunk_141.cpp,data/crawl/tar/new_hunk_141.cpp,10,54,"ERROR ((0, 0, ""%s:1: %s"", quotearg_colon (listed_incremental_option),
		_(""Time stamp out of range"")));","ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option),
		    lineno,
		    _(""Time stamp out of range"")));","[""updateContent"", ""addVariable""]","[[""1""], [""%ld"", ""lineno""]]",[-11775054436867289357],519,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=374ae10d39e9e52789a00202c831a1c7c45e1610,7 Nov 2005,"(xheader_keyword_deleted_p): Remove static qualifier. (struct
 xhdr_tab.decoder): Change prototype. POSIX allows string values to contain
 embedded nulls, so take an extra argument specifying the length of the
 string. (decx,decg,dummy_decoder,atime_decoder,gid_decoder)
 (gname_decoder,linkpath_decoder,ctime_decoder,mtime_decoder)
 (path_decoder,size_decoder,uid_decoder,uname_decoder)
 (sparse_size_decoder,sparse_numblocks_decoder)
 (sparse_offset_decoder,sparse_numbytes_decoder): Likewise. (decode_record):
 Pass value length to the handler (run_override_list): Pass value length to
 the decoder (xheader_print_n): New function (xheader_print): Rewritten using
 xheader_print_n (xheader_finish): Do not rely om strlen to compute the length
 of the collected string: it can contain embedded nulls
 (xheader_string_begin,xheader_string_add,xheader_string_end): New functions.
 (sparse_map_decoder,dumpdir_coder,dumpdir_decoder): New functions. Handle
 GNU.sparse.map and GNU.dumpdir variables. (xhdr_tab): Add new variables.
",275,data/crawl/tar/hunk_138.cpp,,,data/crawl/tar/old_hunk_138.cpp,data/crawl/tar/new_hunk_138.cpp,-1,47,,"ERROR ((0, 0, _(""Malformed extended header: excess %s=%s""),
		      ""GNU.sparse.numbytes"", arg));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""excess"", ""%s"", ""%s"", ""GNU"", ""sparse"", ""numbytes"", ""arg""]]",[5762359339431995225],518,"137 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=040b5ab5f969f9ee6c69a54bc284e2ff57b86556,23 Jun 2005,"A sweep of the sparse code prompted by a bug report by Jim Meyering.
 * src/sparse.c: Include <inttostr.h>. (struct tar_sparse_file): offset and
 dumped_size are off_t, not size_t.  optab is now const *. (dump_zeros):
 Return bool success flag, not off_t. All callers changed. Use a constant-zero
 buffer rather than clearing a buffer each time. Don't mess up if write fails.
 (dump_zeros, check_sparse_region): Don't assume off_t is no wider than
 size_t. (tar_sparse_init): Don't bother clearing a field that is already
 clear. (zero_block_p): First arg is const *, not *. (clear_block,
 SPARSES_INIT_COUNT): Remove. (sparse_add_map): First arg is now struct
 start_stat_info *, not struct tar_sparse_file *.  All callers changed. Use
 x2nrealloc to check for size_t overflow. (parse_scan_file): Cache
 commonly-used parts of file. Use an auto buffer, not a static one. Don't
 bother clearing the buffer; not needed. Don't bother clearing items that are
 already clear. (oldgnu_optab, star_optab, pax_optab): Now const.
 (sparse_dump_region): Don't bother clearing the buffer before reading into
 it; just clear the parts that aren't read into. (sparse_dump_file): Clear the
 whole local variable 'file'. (diff_buffer): Remove; now a local var.
 (check_sparse_region): Don't bother clearing buffer before reading into it. 
 Don't assume off_t is promoted to long. (oldgnu_get_sparse_info,
 star_get_sparse_info): Use an auto status, not static. * src/tar.h (struct
 tar_stat_info): had_trailing_slash is now bool, not int. * src/xheader.c
 (sparse_offset_coder, sparse_numbytes_coder): Rewrite to avoid cast.
 (sparse_offset_decoder, sparse_numbytes_decoder): Diagnose excess entries
 rather than crashing.
",225,data/crawl/tar/hunk_145.cpp,,,data/crawl/tar/old_hunk_145.cpp,data/crawl/tar/new_hunk_145.cpp,-1,6,,"ERROR ((0, 0, _(""Malformed extended header: excess %s=%s""),
		""GNU.sparse.numbytes"", arg));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""excess"", ""%s"", ""%s"", ""GNU"", ""sparse"", ""numbytes"", ""arg""]]",[5762359339431995225],518,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_102.cpp,,,data/crawl/tar/old_hunk_102.cpp,data/crawl/tar/new_hunk_102.cpp,26,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option),
		lineno,
		_(""Time stamp out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Time"", ""stamp"", ""out"", ""of"", ""range""], []]",[2806195093742348100],517,"91 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,25,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option),
		lineno,
		_(""Time stamp out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Time"", ""stamp"", ""out"", ""of"", ""range""], []]",[2806195093742348100],517,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,40,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option),
		    lineno,
		    _(""Time stamp out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Time"", ""stamp"", ""out"", ""of"", ""range""], []]",[2806195093742348100],517,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_102.cpp,,,data/crawl/tar/old_hunk_102.cpp,data/crawl/tar/new_hunk_102.cpp,6,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
	    quotearg_colon (listed_incremental_option),
	    lineno,
	    _(""Invalid time stamp"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""time"", ""stamp""], []]",[12204441145755381776],516,"91 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,20,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option),
		lineno,
		_(""Invalid time stamp"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""time"", ""stamp""], []]",[12204441145755381776],516,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,35,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option),
		    lineno,
		    _(""Invalid time stamp"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""time"", ""stamp""], []]",[12204441145755381776],516,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,129,,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option), lineno,
		_(""Inode number out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Inode"", ""number"", ""out"", ""of"", ""range""]]",[-22812606432656395322],515,"981 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,-1,81,,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Inode number out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Inode"", ""number"", ""out"", ""of"", ""range""]]",[-22812606432656395322],515,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,113,,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option), lineno,
		_(""Invalid device number"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""device"", ""number""]]",[-32877137414318571082],514,"981 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,-1,65,,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Invalid device number"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""device"", ""number""]]",[-32877137414318571082],514,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,102,,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Modification time (nanoseconds) out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Modification"", ""time"", ""nanoseconds"", ""out"", ""of"", ""range""]]",[-10374727969655615658],513,"184 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_142.cpp,,,data/crawl/tar/old_hunk_142.cpp,data/crawl/tar/new_hunk_142.cpp,-1,31,,"ERROR ((0, 0, ""%s:%ld: %s"",
			quotearg_colon (listed_incremental_option), lineno,
			_(""Modification time (nanoseconds) out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Modification"", ""time"", ""nanoseconds"", ""out"", ""of"", ""range""]]",[-10374727969655615658],513,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,98,,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Invalid modification time (nanoseconds)"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""modification"", ""time"", ""nanoseconds""]]",[-19772974021668649334],512,"184 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_142.cpp,,,data/crawl/tar/old_hunk_142.cpp,data/crawl/tar/new_hunk_142.cpp,-1,27,,"ERROR ((0, 0, ""%s:%ld: %s"",
			quotearg_colon (listed_incremental_option), lineno,
			_(""Invalid modification time (nanoseconds)"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""modification"", ""time"", ""nanoseconds""]]",[-19772974021668649334],512,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,90,,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Modification time (seconds) out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Modification"", ""time"", ""seconds"", ""out"", ""of"", ""range""]]",[-13329338601747945452],511,"184 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_142.cpp,,,data/crawl/tar/old_hunk_142.cpp,data/crawl/tar/new_hunk_142.cpp,-1,19,,"ERROR ((0, 0, ""%s:%ld: %s"",
			quotearg_colon (listed_incremental_option), lineno,
			_(""Modification time (seconds) out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Modification"", ""time"", ""seconds"", ""out"", ""of"", ""range""]]",[-13329338601747945452],511,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,86,,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Invalid modification time (seconds)"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""modification"", ""time"", ""seconds""]]",[-22727584653760979128],510,"184 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_142.cpp,,,data/crawl/tar/old_hunk_142.cpp,data/crawl/tar/new_hunk_142.cpp,-1,15,,"ERROR ((0, 0, ""%s:%ld: %s"",
			quotearg_colon (listed_incremental_option), lineno,
			_(""Invalid modification time (seconds)"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""modification"", ""time"", ""seconds""]]",[-22727584653760979128],510,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=090d1d36ae038a82d2b4bb54a8464bb7629188b7,23 Jun 2006,"Implement sparse format versioning. Implement new version (1.0) of
 PAX sparse format. (pax_sparse_member_p): Fix condition (pax_dump_header): A
 dispatcher function (pax_dump_header_0,pax_dump_header_1): New functions.
 (pax_optab): Update (oldgnu_dump_header): Minor fix: make sure
 sparse_header.isextended is set before calling set_next_block_after
",283,data/crawl/tar/hunk_115.cpp,,,data/crawl/tar/old_hunk_115.cpp,data/crawl/tar/new_hunk_115.cpp,-1,152,,"ERROR ((0, 0, _(""%s: malformed sparse archive member""), 
		  file->stat_info->orig_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""malformed"", ""sparse"", ""archive"", ""member"", ""file"", ""stat_info"", ""orig_file_name""]]",[38213462912858489860],509,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=090d1d36ae038a82d2b4bb54a8464bb7629188b7,23 Jun 2006,"Implement sparse format versioning. Implement new version (1.0) of
 PAX sparse format. (pax_sparse_member_p): Fix condition (pax_dump_header): A
 dispatcher function (pax_dump_header_0,pax_dump_header_1): New functions.
 (pax_optab): Update (oldgnu_dump_header): Minor fix: make sure
 sparse_header.isextended is set before calling set_next_block_after
",283,data/crawl/tar/hunk_115.cpp,,,data/crawl/tar/old_hunk_115.cpp,data/crawl/tar/new_hunk_115.cpp,-1,167,,"ERROR ((0, 0, _(""%s: malformed sparse archive member""), 
		      file->stat_info->orig_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""malformed"", ""sparse"", ""archive"", ""member"", ""file"", ""stat_info"", ""orig_file_name""]]",[38213462912858489860],509,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=090d1d36ae038a82d2b4bb54a8464bb7629188b7,23 Jun 2006,"Implement sparse format versioning. Implement new version (1.0) of
 PAX sparse format. (pax_sparse_member_p): Fix condition (pax_dump_header): A
 dispatcher function (pax_dump_header_0,pax_dump_header_1): New functions.
 (pax_optab): Update (oldgnu_dump_header): Minor fix: make sure
 sparse_header.isextended is set before calling set_next_block_after
",283,data/crawl/tar/hunk_115.cpp,,,data/crawl/tar/old_hunk_115.cpp,data/crawl/tar/new_hunk_115.cpp,-1,175,,"ERROR ((0, 0, _(""%s: malformed sparse archive member""), 
		      file->stat_info->orig_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""malformed"", ""sparse"", ""archive"", ""member"", ""file"", ""stat_info"", ""orig_file_name""]]",[38213462912858489860],509,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_103.cpp,,,data/crawl/tar/old_hunk_103.cpp,data/crawl/tar/new_hunk_103.cpp,57,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option), lineno,
		_(""Inode number out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Inode"", ""number"", ""out"", ""of"", ""range""], []]",[22812606432656395322],508,"91 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,114,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Inode number out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Inode"", ""number"", ""out"", ""of"", ""range""], []]",[22812606432656395322],508,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_103.cpp,,,data/crawl/tar/old_hunk_103.cpp,data/crawl/tar/new_hunk_103.cpp,45,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option), lineno,
		_(""Device number out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Device"", ""number"", ""out"", ""of"", ""range""], []]",[23478891362305537406],507,"91 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,102,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Device number out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Device"", ""number"", ""out"", ""of"", ""range""], []]",[23478891362305537406],507,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_103.cpp,,,data/crawl/tar/old_hunk_103.cpp,data/crawl/tar/new_hunk_103.cpp,30,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Modification time (nanoseconds) out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Modification"", ""time"", ""nanoseconds"", ""out"", ""of"", ""range""], []]",[10374727969655615658],506,"91 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,87,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
			quotearg_colon (listed_incremental_option), lineno,
			_(""Modification time (nanoseconds) out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Modification"", ""time"", ""nanoseconds"", ""out"", ""of"", ""range""], []]",[10374727969655615658],506,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_103.cpp,,,data/crawl/tar/old_hunk_103.cpp,data/crawl/tar/new_hunk_103.cpp,18,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Modification time (seconds) out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Modification"", ""time"", ""seconds"", ""out"", ""of"", ""range""], []]",[13329338601747945452],505,"91 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,75,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
			quotearg_colon (listed_incremental_option), lineno,
			_(""Modification time (seconds) out of range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Modification"", ""time"", ""seconds"", ""out"", ""of"", ""range""], []]",[13329338601747945452],505,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b9588c472262be876400e0804c529c57102d6f0d,23 Jan 2007,"(struct exclude_tag): rename to exclusion_tag (check_exclusion_tags):
 New function (cachedir_file_p): New function (from check_cache_directory)
 (dump_dir0,dump_file0): Use check_exclusion_tags
",215,data/crawl/tar/hunk_91.cpp,,,data/crawl/tar/old_hunk_91.cpp,data/crawl/tar/new_hunk_91.cpp,-1,42,,"exclusion_tag_warning (st->orig_file_name, tag_file_name,
				 _(""contents not dumped""));","[""addLog""]","[[], [""exclusion_tag_warning"", ""st"", ""orig_file_name"", ""tag_file_name"", ""_"", ""contents"", ""not"", ""dumped""]]",[6223220133174504031],504,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b9588c472262be876400e0804c529c57102d6f0d,23 Jan 2007,"(struct exclude_tag): rename to exclusion_tag (check_exclusion_tags):
 New function (cachedir_file_p): New function (from check_cache_directory)
 (dump_dir0,dump_file0): Use check_exclusion_tags
",215,data/crawl/tar/hunk_91.cpp,,,data/crawl/tar/old_hunk_91.cpp,data/crawl/tar/new_hunk_91.cpp,-1,53,,"exclusion_tag_warning (st->orig_file_name, tag_file_name,
				 _(""contents not dumped""));","[""addLog""]","[[], [""exclusion_tag_warning"", ""st"", ""orig_file_name"", ""tag_file_name"", ""_"", ""contents"", ""not"", ""dumped""]]",[6223220133174504031],504,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=efe6609cd997116b4f29181b57117ff6d91c7d98,26 Sep 2007,"(struct directory): New member tagfile (make_directory): Initialize
 tagfile to NULL (procdir): New argument: entry Hanlde exclusion tags.
 (makedumpdir): Take into account directory->tagfile. (scan_directory): Hanlde
 exclusion tags.
",65,data/crawl/tar/hunk_87.cpp,,,data/crawl/tar/old_hunk_87.cpp,data/crawl/tar/new_hunk_87.cpp,-1,21,,"exclusion_tag_warning (name_buffer, tag_file_name,
			       _(""contents not dumped""));","[""addLog""]","[[], [""exclusion_tag_warning"", ""name_buffer"", ""tag_file_name"", ""_"", ""contents"", ""not"", ""dumped""]]",[4982417520174430025],503,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=efe6609cd997116b4f29181b57117ff6d91c7d98,26 Sep 2007,"(struct directory): New member tagfile (make_directory): Initialize
 tagfile to NULL (procdir): New argument: entry Hanlde exclusion tags.
 (makedumpdir): Take into account directory->tagfile. (scan_directory): Hanlde
 exclusion tags.
",65,data/crawl/tar/hunk_87.cpp,,,data/crawl/tar/old_hunk_87.cpp,data/crawl/tar/new_hunk_87.cpp,-1,27,,"exclusion_tag_warning (name_buffer, tag_file_name,
			       _(""contents not dumped""));","[""addLog""]","[[], [""exclusion_tag_warning"", ""name_buffer"", ""tag_file_name"", ""_"", ""contents"", ""not"", ""dumped""]]",[4982417520174430025],503,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ac6caa71bc6077d75ff5073f76f97d53225e78ae,7 Mar 2009,"Migrate to Git
",29623,data/crawl/tar/hunk_67.cpp,,,data/crawl/tar/old_hunk_67.cpp,data/crawl/tar/new_hunk_67.cpp,-1,186,,/buffer.c (try_new_volume);,"[""addLog""]","[[], [""/buffer"", ""c"", ""try_new_volume""]]",[-12530930510547672729],502,"254 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=985637ab5a7448cf89e59ac433229a4fef2d265d,26 Jun 2008,"Bugfixes.

* src/buffer.c (try_new_volume): Print more information with error
diagnostics.
(_gnu_flush_write): Improve error checking.  Adjust
real_s_sizeleft before calling new_volume to avoid creating
malformed multivolume headers.
* tests/delete05.at, tests/gzip.at, tests/ignfail.at,
tests/longv7.at, tests/lustar01.at, tests/lustar02.at,
tests/shortfile.at: Update to match new diagnostic wording
(see 2008-05-06).

* NEWS: Update.",57,data/crawl/tar/hunk_80.cpp,,,data/crawl/tar/old_hunk_80.cpp,data/crawl/tar/new_hunk_80.cpp,-1,2,,/buffer.c (try_new_volume);,"[""addLog""]","[[], [""/buffer"", ""c"", ""try_new_volume""]]",[-12530930510547672729],502,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,710,-1,"fputs(breaks[0], out);",,"[""removeLog""]","[[""fputs"", ""breaks[0]"", ""out""], []]",[3244297555930287933],501,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,715,-1,"fputs(breaks[0], out);",,"[""removeLog""]","[[""fputs"", ""breaks[0]"", ""out""], []]",[3244297555930287933],501,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,691,-1,"fputs("");"", out);",,"[""removeLog""]","[[""fputs"", ""out""], []]",[-634424772777578192],500,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,702,-1,"fputs("", "", out);",,"[""removeLog""]","[[""fputs"", ""out""], []]",[-634424772777578192],500,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,704,-1,"fputs("")  "", out);",,"[""removeLog""]","[[""fputs"", ""out""], []]",[-634424772777578192],500,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4dfcd6c054a5e9e1a371c822a3be90564dd9b690,7 Oct 2009,"Fix bugs in handling the --remove-files option.

Make sure the files are deleted only if they were succesfully stored
to the archive.

* src/exit.c: New file.
* src/unlink.c: New file.
* src/Makefile.am (tar_SOURCES): Add exit.c and unlink.c.
* src/common.h: Include progname.h
(program_name): Remove global.
(records_written): New extern.
(queue_deferred_unlink, finish_deferred_unlinks): New prototypes.
(fatal_exit_hook): New extern.
* src/create.c (create_archive): Call finish_deferred_unlinks.
(dump_hard_link, dump_file0): Don't actually unlink the file,
queue it to deferred_unlinks instead.
* src/delete.c (records_written): Remove extern: declared in
common.h.
* src/extract.c (extract_archive): Set fatal_exit_hook.
(fatal_exit, xalloc_die): Move to exit.c
* src/system.c (sys_wait_for_child): Exit immediately
if the child dies or exits with a non-zero status.
(sys_child_open_for_compress)
(sys_child_open_for_uncompress): Use set_program_name,
instead of setting program_name directly.
* src/tar.c (main): Use set_program_name,
instead of setting program_name directly.

* tests/Makefile.am (TESTSUITE_AT): Add remfiles01.at
and remfiles02.at.
* tests/testsuite.at: Likewise.
* tests/gzip.at: Reflect the above changes.",401,data/crawl/tar/hunk_61.cpp,,,data/crawl/tar/old_hunk_61.cpp,data/crawl/tar/new_hunk_61.cpp,3,3,"ERROR ((0, 0, _(""Child died with signal %d""), sig));","FATAL_ERROR ((0, 0, _(""Child died with signal %d""), sig));","[""updateLog""]","[[""ERROR""], [""FATAL_ERROR""]]",[-2734982981564794265],499,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4dfcd6c054a5e9e1a371c822a3be90564dd9b690,7 Oct 2009,"Fix bugs in handling the --remove-files option.

Make sure the files are deleted only if they were succesfully stored
to the archive.

* src/exit.c: New file.
* src/unlink.c: New file.
* src/Makefile.am (tar_SOURCES): Add exit.c and unlink.c.
* src/common.h: Include progname.h
(program_name): Remove global.
(records_written): New extern.
(queue_deferred_unlink, finish_deferred_unlinks): New prototypes.
(fatal_exit_hook): New extern.
* src/create.c (create_archive): Call finish_deferred_unlinks.
(dump_hard_link, dump_file0): Don't actually unlink the file,
queue it to deferred_unlinks instead.
* src/delete.c (records_written): Remove extern: declared in
common.h.
* src/extract.c (extract_archive): Set fatal_exit_hook.
(fatal_exit, xalloc_die): Move to exit.c
* src/system.c (sys_wait_for_child): Exit immediately
if the child dies or exits with a non-zero status.
(sys_child_open_for_compress)
(sys_child_open_for_uncompress): Use set_program_name,
instead of setting program_name directly.
* src/tar.c (main): Use set_program_name,
instead of setting program_name directly.

* tests/Makefile.am (TESTSUITE_AT): Add remfiles01.at
and remfiles02.at.
* tests/testsuite.at: Likewise.
* tests/gzip.at: Reflect the above changes.",401,data/crawl/tar/hunk_61.cpp,,,data/crawl/tar/old_hunk_61.cpp,data/crawl/tar/new_hunk_61.cpp,6,6,"ERROR ((0, 0, _(""Child returned status %d""),
		WEXITSTATUS (wait_status)));","FATAL_ERROR ((0, 0, _(""Child returned status %d""),
		      WEXITSTATUS (wait_status)));","[""updateLog""]","[[""ERROR""], [""FATAL_ERROR""]]",[-2734982981564794265],499,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4dfcd6c054a5e9e1a371c822a3be90564dd9b690,7 Oct 2009,"Fix bugs in handling the --remove-files option.

Make sure the files are deleted only if they were succesfully stored
to the archive.

* src/exit.c: New file.
* src/unlink.c: New file.
* src/Makefile.am (tar_SOURCES): Add exit.c and unlink.c.
* src/common.h: Include progname.h
(program_name): Remove global.
(records_written): New extern.
(queue_deferred_unlink, finish_deferred_unlinks): New prototypes.
(fatal_exit_hook): New extern.
* src/create.c (create_archive): Call finish_deferred_unlinks.
(dump_hard_link, dump_file0): Don't actually unlink the file,
queue it to deferred_unlinks instead.
* src/delete.c (records_written): Remove extern: declared in
common.h.
* src/extract.c (extract_archive): Set fatal_exit_hook.
(fatal_exit, xalloc_die): Move to exit.c
* src/system.c (sys_wait_for_child): Exit immediately
if the child dies or exits with a non-zero status.
(sys_child_open_for_compress)
(sys_child_open_for_uncompress): Use set_program_name,
instead of setting program_name directly.
* src/tar.c (main): Use set_program_name,
instead of setting program_name directly.

* tests/Makefile.am (TESTSUITE_AT): Add remfiles01.at
and remfiles02.at.
* tests/testsuite.at: Likewise.
* tests/gzip.at: Reflect the above changes.",401,data/crawl/tar/hunk_59.cpp,,,data/crawl/tar/old_hunk_59.cpp,data/crawl/tar/new_hunk_59.cpp,-1,34,,"error (0, 0, ""%s"", _(""memory exhausted""));","[""addLog""]","[[], [""error"", ""0"", ""0"", ""%s"", ""_"", ""memory"", ""exhausted""]]",[18665186363113048020],498,"1882 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=303132dcdcb4c1f2cb9051826265640aaddf6f93,12 Aug 2004,"Adjust to changes to gnulib xalloc module. (extr_init): Remove
 assignment to xalloc_fail_func; no longer needed. (xalloc_die): New function.
",8,data/crawl/tar/hunk_189.cpp,,,data/crawl/tar/old_hunk_189.cpp,data/crawl/tar/new_hunk_189.cpp,-1,7,,"error (0, 0, ""%s"", _(""memory exhausted""));","[""addLog""]","[[], [""error"", ""0"", ""0"", ""%s"", ""_"", ""memory"", ""exhausted""]]",[18665186363113048020],498,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4dfcd6c054a5e9e1a371c822a3be90564dd9b690,7 Oct 2009,"Fix bugs in handling the --remove-files option.

Make sure the files are deleted only if they were succesfully stored
to the archive.

* src/exit.c: New file.
* src/unlink.c: New file.
* src/Makefile.am (tar_SOURCES): Add exit.c and unlink.c.
* src/common.h: Include progname.h
(program_name): Remove global.
(records_written): New extern.
(queue_deferred_unlink, finish_deferred_unlinks): New prototypes.
(fatal_exit_hook): New extern.
* src/create.c (create_archive): Call finish_deferred_unlinks.
(dump_hard_link, dump_file0): Don't actually unlink the file,
queue it to deferred_unlinks instead.
* src/delete.c (records_written): Remove extern: declared in
common.h.
* src/extract.c (extract_archive): Set fatal_exit_hook.
(fatal_exit, xalloc_die): Move to exit.c
* src/system.c (sys_wait_for_child): Exit immediately
if the child dies or exits with a non-zero status.
(sys_child_open_for_compress)
(sys_child_open_for_uncompress): Use set_program_name,
instead of setting program_name directly.
* src/tar.c (main): Use set_program_name,
instead of setting program_name directly.

* tests/Makefile.am (TESTSUITE_AT): Add remfiles01.at
and remfiles02.at.
* tests/testsuite.at: Likewise.
* tests/gzip.at: Reflect the above changes.",401,data/crawl/tar/hunk_59.cpp,,,data/crawl/tar/old_hunk_59.cpp,data/crawl/tar/new_hunk_59.cpp,-1,27,,"error (TAREXIT_FAILURE, 0, _(""Error is not recoverable: exiting now""));","[""addLog""]","[[], [""error"", ""TAREXIT_FAILURE"", ""0"", ""_"", ""Error"", ""is"", ""not"", ""recoverable"", ""exiting"", ""now""]]",[29424550464379772209],497,"3586 days, 0:00:00"
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_370.cpp,,,data/crawl/tar/old_hunk_370.cpp,data/crawl/tar/new_hunk_370.cpp,-1,34,,"error (TAREXIT_FAILURE, 0, _(""Error is not recoverable: exiting now""));","[""addLog""]","[[], [""error"", ""TAREXIT_FAILURE"", ""0"", ""_"", ""Error"", ""is"", ""not"", ""recoverable"", ""exiting"", ""now""]]",[29424550464379772209],497,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d36f5a3cc3280d6c4a58367bf51b527d5c14ac04,18 Nov 2012,"Support for POSIX ACLs

* configure.ac: Check whether ACLs are available on the
host system.
* gnulib.modules: Add acl
* src/create.c (start_header): Store ACLs when creating
a POSIX archive.
(dump_file0): Handle ACLs.
* src/extract.c (delayed_set_stat) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
(delayed_link): Likewise.
(set_stat,delay_set_stat)
(apply_nonancestor_delayed_set_stat): Set ACLs.
* src/tar.c: New options: ""--acls"", ""--no-acls""
(tar_stat_destroy): Free acls_a_ptr and acls_d_ptr fields.
* src/tar.h (tar_stat_info) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
* src/xattrs.c (xattrs_acls_get, xattrs_acls_set): New functions.
* src/xheader.c: Support new keywors: ""SCHILY.acl.access"" and
""SCHILY.acl.default"".
* tests/Makefile.am: Add new tests.
* tests/testsuite.at: Likewise.
* tests/acls01.at: New test.
* tests/acls02.at: New test.",627,data/crawl/tar/hunk_39.cpp,,,data/crawl/tar/old_hunk_39.cpp,data/crawl/tar/new_hunk_39.cpp,-1,188,,"call_arg_warn (""acl_to_text"", file_name);","[""addLog""]","[[], [""call_arg_warn"", ""acl_to_text"", ""file_name""]]",[-15072372191576064981],496,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d36f5a3cc3280d6c4a58367bf51b527d5c14ac04,18 Nov 2012,"Support for POSIX ACLs

* configure.ac: Check whether ACLs are available on the
host system.
* gnulib.modules: Add acl
* src/create.c (start_header): Store ACLs when creating
a POSIX archive.
(dump_file0): Handle ACLs.
* src/extract.c (delayed_set_stat) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
(delayed_link): Likewise.
(set_stat,delay_set_stat)
(apply_nonancestor_delayed_set_stat): Set ACLs.
* src/tar.c: New options: ""--acls"", ""--no-acls""
(tar_stat_destroy): Free acls_a_ptr and acls_d_ptr fields.
* src/tar.h (tar_stat_info) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
* src/xattrs.c (xattrs_acls_get, xattrs_acls_set): New functions.
* src/xheader.c: Support new keywors: ""SCHILY.acl.access"" and
""SCHILY.acl.default"".
* tests/Makefile.am: Add new tests.
* tests/testsuite.at: Likewise.
* tests/acls01.at: New test.
* tests/acls02.at: New test.",627,data/crawl/tar/hunk_39.cpp,,,data/crawl/tar/old_hunk_39.cpp,data/crawl/tar/new_hunk_39.cpp,-1,219,,"call_arg_warn (""acl_to_text"", file_name);","[""addLog""]","[[], [""call_arg_warn"", ""acl_to_text"", ""file_name""]]",[-15072372191576064981],496,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d36f5a3cc3280d6c4a58367bf51b527d5c14ac04,18 Nov 2012,"Support for POSIX ACLs

* configure.ac: Check whether ACLs are available on the
host system.
* gnulib.modules: Add acl
* src/create.c (start_header): Store ACLs when creating
a POSIX archive.
(dump_file0): Handle ACLs.
* src/extract.c (delayed_set_stat) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
(delayed_link): Likewise.
(set_stat,delay_set_stat)
(apply_nonancestor_delayed_set_stat): Set ACLs.
* src/tar.c: New options: ""--acls"", ""--no-acls""
(tar_stat_destroy): Free acls_a_ptr and acls_d_ptr fields.
* src/tar.h (tar_stat_info) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
* src/xattrs.c (xattrs_acls_get, xattrs_acls_set): New functions.
* src/xheader.c: Support new keywors: ""SCHILY.acl.access"" and
""SCHILY.acl.default"".
* tests/Makefile.am: Add new tests.
* tests/testsuite.at: Likewise.
* tests/acls01.at: New test.
* tests/acls02.at: New test.",627,data/crawl/tar/hunk_39.cpp,,,data/crawl/tar/old_hunk_39.cpp,data/crawl/tar/new_hunk_39.cpp,-1,179,,"call_arg_warn (""acl_get_file_at"", file_name);","[""addLog""]","[[], [""call_arg_warn"", ""acl_get_file_at"", ""file_name""]]",[-3821431335537624245],495,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d36f5a3cc3280d6c4a58367bf51b527d5c14ac04,18 Nov 2012,"Support for POSIX ACLs

* configure.ac: Check whether ACLs are available on the
host system.
* gnulib.modules: Add acl
* src/create.c (start_header): Store ACLs when creating
a POSIX archive.
(dump_file0): Handle ACLs.
* src/extract.c (delayed_set_stat) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
(delayed_link): Likewise.
(set_stat,delay_set_stat)
(apply_nonancestor_delayed_set_stat): Set ACLs.
* src/tar.c: New options: ""--acls"", ""--no-acls""
(tar_stat_destroy): Free acls_a_ptr and acls_d_ptr fields.
* src/tar.h (tar_stat_info) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
* src/xattrs.c (xattrs_acls_get, xattrs_acls_set): New functions.
* src/xheader.c: Support new keywors: ""SCHILY.acl.access"" and
""SCHILY.acl.default"".
* tests/Makefile.am: Add new tests.
* tests/testsuite.at: Likewise.
* tests/acls01.at: New test.
* tests/acls02.at: New test.",627,data/crawl/tar/hunk_39.cpp,,,data/crawl/tar/old_hunk_39.cpp,data/crawl/tar/new_hunk_39.cpp,-1,210,,"call_arg_warn (""acl_get_file_at"", file_name);","[""addLog""]","[[], [""call_arg_warn"", ""acl_get_file_at"", ""file_name""]]",[-3821431335537624245],495,0:00:00
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4356a8387b4dd80914f930786a3fc469f2ed0739,16 Nov 1994,"Initial revision
",545,data/crawl/tar/hunk_505.cpp,,,data/crawl/tar/old_hunk_505.cpp,data/crawl/tar/new_hunk_505.cpp,-1,259,,"fputs(""'\n"",fp);","[""addLog""]","[[], [""fputs"", ""\\n"", ""fp""]]",[-3475789706070838167],494,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4356a8387b4dd80914f930786a3fc469f2ed0739,16 Nov 1994,"Initial revision
",545,data/crawl/tar/hunk_505.cpp,,,data/crawl/tar/old_hunk_505.cpp,data/crawl/tar/new_hunk_505.cpp,-1,249,,"fputs(""\\b"",fp);","[""addLog""]","[[], [""fputs"", ""\\\\b"", ""fp""]]",[3595791515043443370],493,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4356a8387b4dd80914f930786a3fc469f2ed0739,16 Nov 1994,"Initial revision
",545,data/crawl/tar/hunk_505.cpp,,,data/crawl/tar/old_hunk_505.cpp,data/crawl/tar/new_hunk_505.cpp,-1,246,,"fputs(""\\r"",fp);","[""addLog""]","[[], [""fputs"", ""\\\\r"", ""fp""]]",[3595791515043443354],492,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4356a8387b4dd80914f930786a3fc469f2ed0739,16 Nov 1994,"Initial revision
",545,data/crawl/tar/hunk_505.cpp,,,data/crawl/tar/old_hunk_505.cpp,data/crawl/tar/new_hunk_505.cpp,-1,243,,"fputs(""\\n"",fp);","[""addLog""]","[[], [""fputs"", ""\\\\n"", ""fp""]]",[3595791515043443366],491,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4356a8387b4dd80914f930786a3fc469f2ed0739,16 Nov 1994,"Initial revision
",545,data/crawl/tar/hunk_505.cpp,,,data/crawl/tar/old_hunk_505.cpp,data/crawl/tar/new_hunk_505.cpp,-1,238,,"fputs(""\\\\"",fp);","[""addLog""]","[[], [""fputs"", ""\\\\\\\\"", ""fp""]]",[-8649239317822360379],490,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4356a8387b4dd80914f930786a3fc469f2ed0739,16 Nov 1994,"Initial revision
",545,data/crawl/tar/hunk_505.cpp,,,data/crawl/tar/old_hunk_505.cpp,data/crawl/tar/new_hunk_505.cpp,-1,235,,"fputs("" '"",fp);","[""addLog""]","[[], [""fputs"", ""fp""]]",[-3487565776818944527],489,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=42d9112d1e64a930a3a2bd184414cba4df80ef7a,16 Nov 1994,"Initial revision
",254,data/crawl/tar/hunk_503.cpp,,,data/crawl/tar/old_hunk_503.cpp,data/crawl/tar/new_hunk_503.cpp,-1,200,,error(errno);,"[""addLog""]","[[], [""error"", ""errno""]]",[16570277569999760544],488,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=32841f71caa7337a62ce231ed787609003bce86f,16 Nov 1994,"*** empty log message ***
",1369,data/crawl/tar/hunk_500.cpp,,,data/crawl/tar/old_hunk_500.cpp,data/crawl/tar/new_hunk_500.cpp,-1,1184,,"fputs("": "", stream);","[""addLog""]","[[], [""fputs"", ""stream""]]",[-12668536737657193033],487,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=32841f71caa7337a62ce231ed787609003bce86f,16 Nov 1994,"*** empty log message ***
",1369,data/crawl/tar/hunk_500.cpp,,,data/crawl/tar/old_hunk_500.cpp,data/crawl/tar/new_hunk_500.cpp,-1,1177,,"fputs(buffer, stream);","[""addLog""]","[[], [""fputs"", ""buffer"", ""stream""]]",[-10408887738296235649],486,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=26aaccb0e954970d22da4dc9ef5d5b5c4f27c260,16 Nov 1994,"Initial revision
",466,data/crawl/tar/hunk_492.cpp,,,data/crawl/tar/old_hunk_492.cpp,data/crawl/tar/new_hunk_492.cpp,-1,171,,"fputs (message, stderr);","[""addLog""]","[[], [""fputs"", ""message"", ""stderr""]]",[-19068772633607565375],485,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=26aaccb0e954970d22da4dc9ef5d5b5c4f27c260,16 Nov 1994,"Initial revision
",466,data/crawl/tar/hunk_492.cpp,,,data/crawl/tar/old_hunk_492.cpp,data/crawl/tar/new_hunk_492.cpp,-1,169,,"fputs ("": "", stderr);","[""addLog""]","[[], [""fputs"", ""stderr""]]",[-12222138665392642905],484,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=26aaccb0e954970d22da4dc9ef5d5b5c4f27c260,16 Nov 1994,"Initial revision
",466,data/crawl/tar/hunk_492.cpp,,,data/crawl/tar/old_hunk_492.cpp,data/crawl/tar/new_hunk_492.cpp,-1,168,,"fputs (program_name, stderr);","[""addLog""]","[[], [""fputs"", ""program_name"", ""stderr""]]",[-15430255656860506239],483,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=54694ee258a974a6c8a9710718500f58c74cd257,16 Nov 1994,"Initial revision
",1352,data/crawl/tar/hunk_491.cpp,,,data/crawl/tar/old_hunk_491.cpp,data/crawl/tar/new_hunk_491.cpp,-1,660,,"fputs(""\
-W, +verify		attempt to verify the archive after writing it\n\
-X, +exclude-from FILE	exclude files listed in FILE\n\
-z, -Z, +compress,\n\
    +uncompress      	filter the archive through compress\n\
-[0-7][lmh]		specify drive and density\n\
"", stdout);","[""addLog""]","[[], [""fputs"", ""\\"", ""W"", ""verify"", ""attempt"", ""to"", ""verify"", ""the"", ""archive"", ""after"", ""writing"", ""it\\n\\"", ""X"", ""exclude"", ""from"", ""FILE"", ""exclude"", ""files"", ""listed"", ""in"", ""FILE\\n\\"", ""z"", ""Z"", ""compress"", ""\\n\\"", ""uncompress"", ""filter"", ""the"", ""archive"", ""through"", ""compress\\n\\"", ""[0"", ""7][lmh]"", ""specify"", ""drive"", ""and"", ""density\\n\\"", ""stdout""]]",[-11189485091861528747],482,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=54694ee258a974a6c8a9710718500f58c74cd257,16 Nov 1994,"Initial revision
",1352,data/crawl/tar/hunk_491.cpp,,,data/crawl/tar/old_hunk_491.cpp,data/crawl/tar/new_hunk_491.cpp,-1,650,,"fputs(""\
-R, +record-number	show record number within archive with each message\n\
-s, +same-order,\n\
    +preserve-order	list of names to extract is sorted to match archive\n\
-S, +sparse		handle sparse files efficiently\n\
-T, +files-from F	get names to extract or create from file F\n\
-v, +verbose		verbosely list files processed\n\
-V, +label NAME		create archive with volume name NAME\n\
-w, +interactive,\n\
    +confirmation	ask for confirmation for every action\n\
"", stdout);","[""addLog""]","[[], [""fputs"", ""\\"", ""R"", ""record"", ""number"", ""show"", ""record"", ""number"", ""within"", ""archive"", ""with"", ""each"", ""message\\n\\"", ""s"", ""same"", ""order"", ""\\n\\"", ""preserve"", ""order"", ""list"", ""of"", ""names"", ""to"", ""extract"", ""is"", ""sorted"", ""to"", ""match"", ""archive\\n\\"", ""S"", ""sparse"", ""handle"", ""sparse"", ""files"", ""efficiently\\n\\"", ""T"", ""files"", ""from"", ""F"", ""get"", ""names"", ""to"", ""extract"", ""or"", ""create"", ""from"", ""file"", ""F\\n\\"", ""v"", ""verbose"", ""verbosely"", ""list"", ""files"", ""processed\\n\\"", ""V"", ""label"", ""NAME"", ""create"", ""archive"", ""with"", ""volume"", ""name"", ""NAME\\n\\"", ""w"", ""interactive"", ""\\n\\"", ""confirmation"", ""ask"", ""for"", ""confirmation"", ""for"", ""every"", ""action\\n\\"", ""stdout""]]",[-14683547174344045827],481,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=54694ee258a974a6c8a9710718500f58c74cd257,16 Nov 1994,"Initial revision
",1352,data/crawl/tar/hunk_491.cpp,,,data/crawl/tar/old_hunk_491.cpp,data/crawl/tar/new_hunk_491.cpp,-1,639,,"fputs(""\
-m, +modification-time	don't extract file modified time\n\
-M, +multi-volume	create/list/extract multi-volume archive\n\
-N, +after-date DATE,\n\
    +newer DATE		only store files newer than DATE\n\
-o, +old-archive,\n\
    +portability	write a V7 format archive, rather than ANSI format\n\
-O, +to-stdout		extract files to standard output\n\
-p, +same-permissions,\n\
    +preserve-permissions extract all protection information\n\
-P, +absolute-paths	don't strip leading `/'s from file names\n\
"", stdout);","[""addLog""]","[[], [""fputs"", ""\\"", ""m"", ""modification"", ""time"", ""don"", ""t"", ""extract"", ""file"", ""modified"", ""time\\n\\"", ""M"", ""multi"", ""volume"", ""create/list/extract"", ""multi"", ""volume"", ""archive\\n\\"", ""N"", ""after"", ""date"", ""DATE"", ""\\n\\"", ""newer"", ""DATE"", ""only"", ""store"", ""files"", ""newer"", ""than"", ""DATE\\n\\"", ""o"", ""old"", ""archive"", ""\\n\\"", ""portability"", ""write"", ""a"", ""V7"", ""format"", ""archive"", ""rather"", ""than"", ""ANSI"", ""format\\n\\"", ""O"", ""to"", ""stdout"", ""extract"", ""files"", ""to"", ""standard"", ""output\\n\\"", ""p"", ""same"", ""permissions"", ""\\n\\"", ""preserve"", ""permissions"", ""extract"", ""all"", ""protection"", ""information\\n\\"", ""P"", ""absolute"", ""paths"", ""don"", ""t"", ""strip"", ""leading"", ""/"", ""s"", ""from"", ""file"", ""names\\n\\"", ""stdout""]]",[-11764004651546348677],480,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=54694ee258a974a6c8a9710718500f58c74cd257,16 Nov 1994,"Initial revision
",1352,data/crawl/tar/hunk_491.cpp,,,data/crawl/tar/old_hunk_491.cpp,data/crawl/tar/new_hunk_491.cpp,-1,629,,"fputs(""\
-F, +info-script F	run script at end of each tape (implies -M)\n\
-G, +incremental	create/list/extract old GNU-format incremental backup\n\
-g, +listed-incremental F create/list/extract new GNU-format incremental backup\n\
-h, +dereference	don't dump symlinks; dump the files they point to\n\
-i, +ignore-zeros	ignore blocks of zeros in archive (normally mean EOF)\n\
-k, +keep-old-files	keep existing files; don't overwrite them from archive\n\
-K, +starting-file FILE	begin at FILE in the archive\n\
-l, +one-file-system	stay in local file system when creating an archive\n\
-L, +tape-length LENGTH change tapes after writing LENGTH\n\
"", stdout);","[""addLog""]","[[], [""fputs"", ""\\"", ""F"", ""info"", ""script"", ""F"", ""run"", ""script"", ""at"", ""end"", ""of"", ""each"", ""tape"", ""implies"", ""M"", ""\\n\\"", ""G"", ""incremental"", ""create/list/extract"", ""old"", ""GNU"", ""format"", ""incremental"", ""backup\\n\\"", ""g"", ""listed"", ""incremental"", ""F"", ""create/list/extract"", ""new"", ""GNU"", ""format"", ""incremental"", ""backup\\n\\"", ""h"", ""dereference"", ""don"", ""t"", ""dump"", ""symlinks"", ""dump"", ""the"", ""files"", ""they"", ""point"", ""to\\n\\"", ""i"", ""ignore"", ""zeros"", ""ignore"", ""blocks"", ""of"", ""zeros"", ""in"", ""archive"", ""normally"", ""mean"", ""EOF"", ""\\n\\"", ""k"", ""keep"", ""old"", ""files"", ""keep"", ""existing"", ""files"", ""don"", ""t"", ""overwrite"", ""them"", ""from"", ""archive\\n\\"", ""K"", ""starting"", ""file"", ""FILE"", ""begin"", ""at"", ""FILE"", ""in"", ""the"", ""archive\\n\\"", ""l"", ""one"", ""file"", ""system"", ""stay"", ""in"", ""local"", ""file"", ""system"", ""when"", ""creating"", ""an"", ""archive\\n\\"", ""L"", ""tape"", ""length"", ""LENGTH"", ""change"", ""tapes"", ""after"", ""writing"", ""LENGTH\\n\\"", ""stdout""]]",[61277339497866052050],479,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=54694ee258a974a6c8a9710718500f58c74cd257,16 Nov 1994,"Initial revision
",1352,data/crawl/tar/hunk_491.cpp,,,data/crawl/tar/old_hunk_491.cpp,data/crawl/tar/new_hunk_491.cpp,-1,624,,"fputs (""\
-B, +read-full-blocks	reblock as we read (for reading 4.2BSD pipes)\n\
-C, +directory DIR	change to directory DIR\n\
"", stdout);","[""addLog""]","[[], [""fputs"", ""\\"", ""B"", ""read"", ""full"", ""blocks"", ""reblock"", ""as"", ""we"", ""read"", ""for"", ""reading"", ""4"", ""2BSD"", ""pipes"", ""\\n\\"", ""C"", ""directory"", ""DIR"", ""change"", ""to"", ""directory"", ""DIR\\n\\"", ""stdout""]]",[-33194775804832990268],478,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=54694ee258a974a6c8a9710718500f58c74cd257,16 Nov 1994,"Initial revision
",1352,data/crawl/tar/hunk_491.cpp,,,data/crawl/tar/old_hunk_491.cpp,data/crawl/tar/new_hunk_491.cpp,-1,609,,"fputs(""\
-A, +catenate,\n\
    +concatenate	append tar files to an archive\n\
-c, +create		create a new archive\n\
-d, +diff,\n\
    +compare		find differences between archive and file system\n\
-r, +append		append files to the end of an archive\n\
-t, +list		list the contents of an archive\n\
-u, +update		only append files that are newer than copy in archive\n\
-x, +extract,\n\
    +get		extract files from an archive\n"",stdout);

	fprintf(st;","[""addLog""]","[[], [""fputs"", ""\\"", ""A"", ""catenate"", ""\\n\\"", ""concatenate"", ""append"", ""tar"", ""files"", ""to"", ""an"", ""archive\\n\\"", ""c"", ""create"", ""create"", ""a"", ""new"", ""archive\\n\\"", ""d"", ""diff"", ""\\n\\"", ""compare"", ""find"", ""differences"", ""between"", ""archive"", ""and"", ""file"", ""system\\n\\"", ""r"", ""append"", ""append"", ""files"", ""to"", ""the"", ""end"", ""of"", ""an"", ""archive\\n\\"", ""t"", ""list"", ""list"", ""the"", ""contents"", ""of"", ""an"", ""archive\\n\\"", ""u"", ""update"", ""only"", ""append"", ""files"", ""that"", ""are"", ""newer"", ""than"", ""copy"", ""in"", ""archive\\n\\"", ""x"", ""extract"", ""\\n\\"", ""get"", ""extract"", ""files"", ""from"", ""an"", ""archive\\n"", ""stdout"", ""fprintf"", ""st""]]",[26411928578768686756],477,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3c08ec43171c8538a2ef0f75b3455cf83f1f75f6,11 Nov 1996,"GNU tar 1.12
",775,data/crawl/tar/hunk_485.cpp,,,data/crawl/tar/old_hunk_485.cpp,data/crawl/tar/new_hunk_485.cpp,-1,287,,"error (EXIT_ON_EXEC_ERROR, errno, _(""Cannot execute remote shell""));","[""addLog""]","[[], [""error"", ""EXIT_ON_EXEC_ERROR"", ""errno"", ""_"", ""Cannot"", ""execute"", ""remote"", ""shell""]]",[12165312339372634679],476,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3c08ec43171c8538a2ef0f75b3455cf83f1f75f6,11 Nov 1996,"GNU tar 1.12
",775,data/crawl/tar/hunk_485.cpp,,,data/crawl/tar/old_hunk_485.cpp,data/crawl/tar/new_hunk_485.cpp,-1,127,,"error (0, errno, _(""stdout""));","[""addLog""]","[[], [""error"", ""0"", ""errno"", ""_"", ""stdout""]]",[7848754778167234870],475,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3c08ec43171c8538a2ef0f75b3455cf83f1f75f6,11 Nov 1996,"GNU tar 1.12
",775,data/crawl/tar/hunk_485.cpp,,,data/crawl/tar/old_hunk_485.cpp,data/crawl/tar/new_hunk_485.cpp,-1,124,,"error (0, errno, _(""stdin""));","[""addLog""]","[[], [""error"", ""0"", ""errno"", ""_"", ""stdin""]]",[18904346838957796762],474,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3c08ec43171c8538a2ef0f75b3455cf83f1f75f6,11 Nov 1996,"GNU tar 1.12
",775,data/crawl/tar/hunk_485.cpp,,,data/crawl/tar/old_hunk_485.cpp,data/crawl/tar/new_hunk_485.cpp,-1,119,,"error (EXIT_ON_EXEC_ERROR, 0, _(""exec/tcp: Service not available""));","[""addLog""]","[[], [""error"", ""EXIT_ON_EXEC_ERROR"", ""0"", ""_"", ""exec/tcp"", ""Service"", ""not"", ""available""]]",[14711424415818167180],473,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,862,,"ERROR ((0, 0,
		  _(""VERIFY FAILURE: %d invalid header(s) detected""), counter));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""VERIFY"", ""FAILURE"", ""%d"", ""invalid"", ""header"", ""s"", ""detected"", ""counter""]]",[-2638893575424131640],472,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,712,,"report_difference (_(""No longer a directory""));","[""addLog""]","[[], [""report_difference"", ""_"", ""No"", ""longer"", ""a"", ""directory""]]",[-2530277201371745581],471,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,667,,"report_difference (_(""Mode or device-type changed""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Mode"", ""or"", ""device"", ""type"", ""changed""]]",[-22149321199681754912],470,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,654,,"report_difference (_(""Device numbers changed""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Device"", ""numbers"", ""changed""]]",[-21750049265829507129],469,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,615,,"report_difference (_(""Symlink differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Symlink"", ""differs""]]",[12172088538523707989],468,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,604,,"report_difference (_(""No such file or directory""));","[""addLog""]","[[], [""report_difference"", ""_"", ""No"", ""such"", ""file"", ""or"", ""directory""]]",[-300645466863443590],467,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,570,,"report_difference (_(""Does not exist""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Does"", ""not"", ""exist""]]",[-593725159132294642],466,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,521,,"ERROR ((0, errno, _(""Cannot open %s""), current_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""open"", ""%s"", ""current_file_name""]]",[22043956343107053135],465,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,499,,"report_difference (_(""Mod time differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""Mod"", ""time"", ""differs""]]",[14683967400563237341],464,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,413,,"ERROR ((0, errno, _(""Cannot stat file %s""), current_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""file"", ""%s"", ""current_file_name""]]",[19705909407974812299],463,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=799e915cd3a889058eeefeaa25391cfe1eae7c3a,15 Apr 1997,"GNU tar 1.12
",1052,data/crawl/tar/hunk_484.cpp,,,data/crawl/tar/old_hunk_484.cpp,data/crawl/tar/new_hunk_484.cpp,-1,410,,"report_difference (_(""File does not exist""));","[""addLog""]","[[], [""report_difference"", ""_"", ""File"", ""does"", ""not"", ""exist""]]",[-1103256542484078172],462,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a4f7f5bcc6c027b22c409ffad0410a8d55d0a305,15 Apr 1997,"GNU tar 1.12
",299,data/crawl/tar/hunk_483.cpp,,,data/crawl/tar/old_hunk_483.cpp,data/crawl/tar/new_hunk_483.cpp,-1,122,,"ERROR ((0, 0, _(""Unknown demangling command %s""), cursor));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unknown"", ""demangling"", ""command"", ""%s"", ""cursor""]]",[5943457990443733470],461,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a4f7f5bcc6c027b22c409ffad0410a8d55d0a305,15 Apr 1997,"GNU tar 1.12
",299,data/crawl/tar/hunk_483.cpp,,,data/crawl/tar/old_hunk_483.cpp,data/crawl/tar/new_hunk_483.cpp,-1,115,,"ERROR ((0, errno, _(""Cannot symlink %s to %s""),
		    name, name_end + 4));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""symlink"", ""%s"", ""to"", ""%s"", ""name"", ""name_end"", ""4""]]",[21053233449837955602],460,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a4f7f5bcc6c027b22c409ffad0410a8d55d0a305,15 Apr 1997,"GNU tar 1.12
",299,data/crawl/tar/hunk_483.cpp,,,data/crawl/tar/old_hunk_483.cpp,data/crawl/tar/new_hunk_483.cpp,-1,96,,"ERROR ((0, errno, _(""Cannot rename %s to %s""), name, name_end + 4));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""rename"", ""%s"", ""to"", ""%s"", ""name"", ""name_end"", ""4""]]",[10757240040646666436],459,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a4f7f5bcc6c027b22c409ffad0410a8d55d0a305,15 Apr 1997,"GNU tar 1.12
",299,data/crawl/tar/hunk_483.cpp,,,data/crawl/tar/old_hunk_483.cpp,data/crawl/tar/new_hunk_483.cpp,-1,60,,"ERROR ((0, 0, _(""Unexpected EOF in mangled names"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""mangled"", ""names""]]",[-1297509030895174056],458,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=10797cd27b13ab09e09fa5b994dda79564b8e6b4,18 Apr 1997,"GNU tar 1.12
",573,data/crawl/tar/hunk_482.cpp,,,data/crawl/tar/old_hunk_482.cpp,data/crawl/tar/new_hunk_482.cpp,229,395,error (errno);,report_numbered_error (errno);,"[""updateLog""]","[[""error""], [""report_numbered_error""]]",[-14629469913152317744],457,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eed93f9a58ed79ec07028b85d54804f042bf7af9,19 Apr 1997,"GNU tar 1.12
",688,data/crawl/tar/hunk_481.cpp,,,data/crawl/tar/old_hunk_481.cpp,data/crawl/tar/new_hunk_481.cpp,-1,130,,"ERROR ((0, errno, _(""Cannot stat %s""), current_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""%s"", ""current_file_name""]]",[20215440791326595829],456,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eed93f9a58ed79ec07028b85d54804f042bf7af9,19 Apr 1997,"GNU tar 1.12
",688,data/crawl/tar/hunk_481.cpp,,,data/crawl/tar/old_hunk_481.cpp,data/crawl/tar/new_hunk_481.cpp,-1,54,,"ERROR ((0, errno, _(""Cannot open file %s""), path));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""open"", ""file"", ""%s"", ""path""]]",[19086018536906327531],455,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eed93f9a58ed79ec07028b85d54804f042bf7af9,19 Apr 1997,"GNU tar 1.12
",688,data/crawl/tar/hunk_481.cpp,,,data/crawl/tar/old_hunk_481.cpp,data/crawl/tar/new_hunk_481.cpp,278,-1,"fputs (""'\n"", fp);",,"[""removeLog""]","[[""fputs"", ""\\n"", ""fp""], []]",[3475789706070838167],454,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eed93f9a58ed79ec07028b85d54804f042bf7af9,19 Apr 1997,"GNU tar 1.12
",688,data/crawl/tar/hunk_481.cpp,,,data/crawl/tar/old_hunk_481.cpp,data/crawl/tar/new_hunk_481.cpp,268,-1,"fputs (""\\b"", fp);",,"[""removeLog""]","[[""fputs"", ""\\\\b"", ""fp""], []]",[-3595791515043443370],453,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eed93f9a58ed79ec07028b85d54804f042bf7af9,19 Apr 1997,"GNU tar 1.12
",688,data/crawl/tar/hunk_481.cpp,,,data/crawl/tar/old_hunk_481.cpp,data/crawl/tar/new_hunk_481.cpp,265,-1,"fputs (""\\r"", fp);",,"[""removeLog""]","[[""fputs"", ""\\\\r"", ""fp""], []]",[-3595791515043443354],452,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eed93f9a58ed79ec07028b85d54804f042bf7af9,19 Apr 1997,"GNU tar 1.12
",688,data/crawl/tar/hunk_481.cpp,,,data/crawl/tar/old_hunk_481.cpp,data/crawl/tar/new_hunk_481.cpp,262,-1,"fputs (""\\n"", fp);",,"[""removeLog""]","[[""fputs"", ""\\\\n"", ""fp""], []]",[-3595791515043443366],451,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eed93f9a58ed79ec07028b85d54804f042bf7af9,19 Apr 1997,"GNU tar 1.12
",688,data/crawl/tar/hunk_481.cpp,,,data/crawl/tar/old_hunk_481.cpp,data/crawl/tar/new_hunk_481.cpp,255,89,"fputs (""\\\\"", fp);",close (handle);,"[""updateVariable"", ""updateLog"", ""removeContent""]","[[""fputs"", ""\\\\\\\\"", ""fp""], [""close"", ""handle""]]",[22536997088425286680],450,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eed93f9a58ed79ec07028b85d54804f042bf7af9,19 Apr 1997,"GNU tar 1.12
",688,data/crawl/tar/hunk_481.cpp,,,data/crawl/tar/old_hunk_481.cpp,data/crawl/tar/new_hunk_481.cpp,250,85,"fputs ("" '"", fp);","_(""%s: File shrunk by %d bytes, (yark!)"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fputs"", ""fp""], [""_"", ""%s"", ""File"", ""shrunk"", ""by"", ""%d"", ""bytes"", ""yark""]]",[1070960001436881607],449,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=768c69b838a4e84b715363a7dcf4128b3cd9ce4b,22 Apr 1997,"GNU tar 1.12
",983,data/crawl/tar/hunk_480.cpp,,,data/crawl/tar/old_hunk_480.cpp,data/crawl/tar/new_hunk_480.cpp,-1,871,,"ERROR ((0, errno, ""%s"", name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""name""]]",[12408435117451123092],448,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=768c69b838a4e84b715363a7dcf4128b3cd9ce4b,22 Apr 1997,"GNU tar 1.12
",983,data/crawl/tar/hunk_480.cpp,,,data/crawl/tar/old_hunk_480.cpp,data/crawl/tar/new_hunk_480.cpp,-1,638,,"ERROR ((0, 0, _(""%s: Not found in archive""), name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Not"", ""found"", ""in"", ""archive"", ""name""]]",[22067739388406997887],447,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=768c69b838a4e84b715363a7dcf4128b3cd9ce4b,22 Apr 1997,"GNU tar 1.12
",983,data/crawl/tar/hunk_480.cpp,,,data/crawl/tar/old_hunk_480.cpp,data/crawl/tar/new_hunk_480.cpp,-1,619,,"ERROR ((0, 0, _(""%s: Not found in archive""), cursor->name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Not"", ""found"", ""in"", ""archive"", ""cursor"", ""name""]]",[13458721786412343535],446,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=768c69b838a4e84b715363a7dcf4128b3cd9ce4b,22 Apr 1997,"GNU tar 1.12
",983,data/crawl/tar/hunk_480.cpp,,,data/crawl/tar/old_hunk_480.cpp,data/crawl/tar/new_hunk_480.cpp,-1,364,,"ERROR ((0, errno, ""%s"", name_buffer));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""%s"", ""name_buffer""]]",[17854873410061940720],445,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5540d5aaff399b947f097772be9c5ebc39c8a7d5,22 Apr 1997,"tar 1.13
",194,data/crawl/tar/hunk_479.cpp,,,data/crawl/tar/old_hunk_479.cpp,data/crawl/tar/new_hunk_479.cpp,-1,164,,"fputs (_(""\
\n\
Written by Fran�ois Pinard <pinard@iro.umontreal.ca>.\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Written"", ""by"", ""Fran"", ""ois"", ""Pinard"", ""pinard"", ""iro"", ""umontreal"", ""ca"", ""\\n"", ""stdout""]]",[-7906123049273285585],444,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5540d5aaff399b947f097772be9c5ebc39c8a7d5,22 Apr 1997,"tar 1.13
",194,data/crawl/tar/hunk_479.cpp,,,data/crawl/tar/old_hunk_479.cpp,data/crawl/tar/new_hunk_479.cpp,-1,156,,"fputs (_(""\
\n\
Copyright (C) 1995, 1996, 1997 Free Software Foundation, Inc.\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Copyright"", ""C"", ""1995"", ""1996"", ""1997"", ""Free"", ""Software"", ""Foundation"", ""Inc"", ""\\n"", ""stdout""]]",[-9649139068434696062],443,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5540d5aaff399b947f097772be9c5ebc39c8a7d5,22 Apr 1997,"tar 1.13
",194,data/crawl/tar/hunk_479.cpp,,,data/crawl/tar/old_hunk_479.cpp,data/crawl/tar/new_hunk_479.cpp,-1,137,,"error (0, 0, _(""Unknown pattern `%s'""), optarg);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""Unknown"", ""pattern"", ""%s"", ""optarg""]]",[980739096366302374],442,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5540d5aaff399b947f097772be9c5ebc39c8a7d5,22 Apr 1997,"tar 1.13
",194,data/crawl/tar/hunk_479.cpp,,,data/crawl/tar/old_hunk_479.cpp,data/crawl/tar/new_hunk_479.cpp,-1,133,,"error (0, 0, _(""Ambiguous pattern `%s'""), optarg);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""Ambiguous"", ""pattern"", ""%s"", ""optarg""]]",[-2228563483410095266],441,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5540d5aaff399b947f097772be9c5ebc39c8a7d5,22 Apr 1997,"tar 1.13
",194,data/crawl/tar/hunk_479.cpp,,,data/crawl/tar/old_hunk_479.cpp,data/crawl/tar/new_hunk_479.cpp,-1,67,,"fputs (_(""\
If a long option shows an argument as mandatory, then it is mandatory\n\
for the equivalent short option also.\n\
\n\
  -l, --file-length=LENGTH   LENGTH of generated file\n\
  -p, --pattern=PATTERN      PATTERN is `default' or `zeros'\n\
      --help                 display this help and exit\n\
      --version              output version information and exit\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""If"", ""a"", ""long"", ""option"", ""shows"", ""an"", ""argument"", ""as"", ""mandatory"", ""then"", ""it"", ""is"", ""mandatory\\n\\"", ""for"", ""the"", ""equivalent"", ""short"", ""option"", ""also"", ""\\n\\"", ""\\n\\"", ""l"", ""file"", ""length"", ""LENGTH"", ""LENGTH"", ""of"", ""generated"", ""file\\n\\"", ""p"", ""pattern"", ""PATTERN"", ""PATTERN"", ""is"", ""default"", ""or"", ""zeros"", ""\\n\\"", ""help"", ""display"", ""this"", ""help"", ""and"", ""exit\\n\\"", ""version"", ""output"", ""version"", ""information"", ""and"", ""exit\\n"", ""stdout""]]",[39669424862579220703],440,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,982,,"ERROR ((0, 0, _(""Visible long name error"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Visible"", ""long"", ""name"", ""error""]]",[9182854379957185746],439,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,972,,"ERROR ((0, 0, _(""\
Cannot extract `%s' -- file is continued from another volume""),
	      current_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""\\"", ""Cannot"", ""extract"", ""%s"", ""file"", ""is"", ""continued"", ""from"", ""another"", ""volume"", ""current_file_name""]]",[-135729407377481158],438,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,923,,"ERROR ((0, errno, _(""%s: Could not create directory""),
		  CURRENT_FILE_NAME));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""create"", ""directory"", ""CURRENT_FILE_NAME""]]",[30974558987895748932],437,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,847,,"ERROR ((0, errno, _(""%s: Could not make fifo""), CURRENT_FILE_NAME));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""make"", ""fifo"", ""CURRENT_FILE_NAME""]]",[27540423212223593434],436,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,821,,"ERROR ((0, errno, _(""%s: Could not make node""), CURRENT_FILE_NAME));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""make"", ""node"", ""CURRENT_FILE_NAME""]]",[23883370108448678284],435,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,788,,"ERROR ((0, errno, _(""%s: Could not link to `%s'""),
		CURRENT_FILE_NAME, current_link_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""link"", ""to"", ""%s"", ""CURRENT_FILE_NAME"", ""current_link_name""]]",[45560799216193758566],434,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,738,,"ERROR ((0, errno, _(""%s: Could not create symlink to `%s'""),
		  CURRENT_FILE_NAME, current_link_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""create"", ""symlink"", ""to"", ""%s"", ""CURRENT_FILE_NAME"", ""current_link_name""]]",[39040429584754262538],433,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,667,,"ERROR ((0, 0, _(""%s: Could only write %d of %d bytes""),
		      CURRENT_FILE_NAME, status, written));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Could"", ""only"", ""write"", ""%d"", ""of"", ""%d"", ""bytes"", ""CURRENT_FILE_NAME"", ""status"", ""written""]]",[18216176264441377549],432,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,664,,"ERROR ((0, errno, _(""%s: Could not write to file""),
		      CURRENT_FILE_NAME));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""write"", ""to"", ""file"", ""CURRENT_FILE_NAME""]]",[44679097514416242073],431,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,579,,"ERROR ((0, errno, _(""%s: Could not create file""),
		  CURRENT_FILE_NAME));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""create"", ""file"", ""CURRENT_FILE_NAME""]]",[29122782510104156386],430,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,424,,"ERROR ((0, errno, _(""%s: Was unable to backup this file""),
		CURRENT_FILE_NAME));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Was"", ""unable"", ""to"", ""backup"", ""this"", ""file"", ""CURRENT_FILE_NAME""]]",[30145506849265525498],429,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,350,,"ERROR ((0, 0, _(""%s: Could only write %d of %d bytes""),
		     name, count, totalsize));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Could"", ""only"", ""write"", ""%d"", ""of"", ""%d"", ""bytes"", ""name"", ""count"", ""totalsize""]]",[25073316516803835861],428,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,243,,"ERROR ((0, errno,
		      _(""%s: Cannot change owner to uid %d, gid %d""),
		      file_name, current_stat.st_uid, current_stat.st_gid));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""change"", ""owner"", ""to"", ""uid"", ""%d"", ""gid"", ""%d"", ""file_name"", ""current_stat"", ""st_uid"", ""current_stat"", ""st_gid""]]",[4361808618554815840],427,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,175,,"ERROR ((0, errno, _(""%s: Cannot lchown to uid %d gid %d""),
		    file_name, stat_info->st_uid, stat_info->st_gid));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""lchown"", ""to"", ""uid"", ""%d"", ""gid"", ""%d"", ""file_name"", ""stat_info"", ""st_uid"", ""stat_info"", ""st_gid""]]",[8212014424673573775],426,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,147,,"ERROR ((0, errno,
		    _(""%s: Could not change access and modification times""),
		    file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""change"", ""access"", ""and"", ""modification"", ""times"", ""file_name""]]",[-5115111283487263603],425,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=818c240503f808e12705dafb1f69077cdd10053b,23 Apr 1997,"GNU tar 1.12
",1525,data/crawl/tar/hunk_477.cpp,,,data/crawl/tar/old_hunk_477.cpp,data/crawl/tar/new_hunk_477.cpp,-1,106,,"ERROR ((0, errno, _(""%s: Cannot change mode to %0.4o""),
	      file_name, ~current_umask & (int) stat_info->st_mode));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""change"", ""mode"", ""to"", ""%0"", ""4o"", ""file_name"", ""current_umask"", ""&"", ""int"", ""stat_info"", ""st_mode""]]",[-14011483507671147630],424,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,705,,"ERROR ((0, errno, _(""Error while deleting %s""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Error"", ""while"", ""deleting"", ""%s"", ""p""]]",[29178382628792060387],423,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,585,,"ERROR ((0, errno, _(""Cannot chdir to %s""), name->change_dir));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""chdir"", ""to"", ""%s"", ""name"", ""change_dir""]]",[13490575968797088511],422,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,512,,"ERROR ((0, errno, _(""Cannot write to %s""), listed_incremental_option));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""write"", ""to"", ""%s"", ""listed_incremental_option""]]",[20561943630304946044],421,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,455,,"ERROR ((0, errno, _(""Cannot open %s""), listed_incremental_option));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""open"", ""%s"", ""listed_incremental_option""]]",[11732414589222844599],420,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,445,,"ERROR ((TAREXIT_FAILURE, 0, _(""File name %s/%s too long""),
		path, listed_incremental_option));","[""addLog""]","[[], [""ERROR"", ""TAREXIT_FAILURE"", ""0"", ""_"", ""File"", ""name"", ""%s/%s"", ""too"", ""long"", ""path"", ""listed_incremental_option""]]",[20099654186350444939],419,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,230,,"ERROR ((0, errno, _(""Cannot stat %s""), name_buffer));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""%s"", ""name_buffer""]]",[14904344400096924387],418,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=70b61d565b35d3c97f071177995f55c33d0cfdd0,24 Apr 1997,"GNU tar 1.12
",715,data/crawl/tar/hunk_475.cpp,,,data/crawl/tar/old_hunk_475.cpp,data/crawl/tar/new_hunk_475.cpp,-1,185,,"ERROR ((0, errno, _(""Cannot open directory %s""), path));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""open"", ""directory"", ""%s"", ""path""]]",[20937795014697920077],417,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3728196fa69fb0908f5c175d750978d1423b8340,24 Apr 1997,"GNU tar 1.12
",481,data/crawl/tar/hunk_474.cpp,,,data/crawl/tar/old_hunk_474.cpp,data/crawl/tar/new_hunk_474.cpp,-1,473,,"ERROR ((0, errno, _(""%s: Cannot rename from backup""),
		before_backup_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""rename"", ""from"", ""backup"", ""before_backup_name""]]",[23836161345162241326],416,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3728196fa69fb0908f5c175d750978d1423b8340,24 Apr 1997,"GNU tar 1.12
",481,data/crawl/tar/hunk_474.cpp,,,data/crawl/tar/old_hunk_474.cpp,data/crawl/tar/new_hunk_474.cpp,-1,457,,"ERROR ((0, errno, _(""%s: Cannot rename for backup""), before_backup_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""rename"", ""for"", ""backup"", ""before_backup_name""]]",[20168521895477834416],415,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_473.cpp,,,data/crawl/tar/old_hunk_473.cpp,data/crawl/tar/new_hunk_473.cpp,-1,700,,"ERROR ((0, 0, _(""%s: Unknown file type; file ignored""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Unknown"", ""file"", ""type"", ""file"", ""ignored"", ""p""]]",[-447131353088884840],414,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_473.cpp,,,data/crawl/tar/old_hunk_473.cpp,data/crawl/tar/new_hunk_473.cpp,-1,601,,"ERROR ((0, errno, _(""Cannot open directory %s""), p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""open"", ""directory"", ""%s"", ""p""]]",[16795245255188114917],413,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_473.cpp,,,data/crawl/tar/old_hunk_473.cpp,data/crawl/tar/new_hunk_473.cpp,-1,364,,"ERROR ((0, 0, _(""File %s shrunk by %d bytes, padding with zeros""),
		    p, sizeleft));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""File"", ""%s"", ""shrunk"", ""by"", ""%d"", ""bytes"", ""padding"", ""with"", ""zeros"", ""p"", ""sizeleft""]]",[-12248228197703700029],412,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_473.cpp,,,data/crawl/tar/old_hunk_473.cpp,data/crawl/tar/new_hunk_473.cpp,-1,351,,"ERROR ((0, errno, _(""\
Read error at byte %ld, reading %d bytes, in file %s""),
			(long) (current_stat.st_size - sizeleft), bufsize, p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""\\"", ""Read"", ""error"", ""at"", ""byte"", ""%ld"", ""reading"", ""%d"", ""bytes"", ""in"", ""file"", ""%s"", ""long"", ""current_stat"", ""st_size"", ""sizeleft"", ""bufsize"", ""p""]]",[29600164355237736701],411,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_472.cpp,,,data/crawl/tar/old_hunk_472.cpp,data/crawl/tar/new_hunk_472.cpp,-1,530,,"ERROR ((0, errno,
		  _(""Read error at byte %ld, reading %d bytes, in file %s""),
		  fullsize - *sizeleft, bufsize, name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Read"", ""error"", ""at"", ""byte"", ""%ld"", ""reading"", ""%d"", ""bytes"", ""in"", ""file"", ""%s"", ""fullsize"", ""*sizeleft"", ""bufsize"", ""name""]]",[11675964492055555933],410,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_472.cpp,,,data/crawl/tar/old_hunk_472.cpp,data/crawl/tar/new_hunk_472.cpp,-1,507,,"ERROR ((0, errno, _(""\
Read error at byte %ld, reading %d bytes, in file %s""),
			 fullsize - *sizeleft, bufsize, name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""\\"", ""Read"", ""error"", ""at"", ""byte"", ""%ld"", ""reading"", ""%d"", ""bytes"", ""in"", ""file"", ""%s"", ""fullsize"", ""*sizeleft"", ""bufsize"", ""name""]]",[11675964503831591354],409,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_472.cpp,,,data/crawl/tar/old_hunk_472.cpp,data/crawl/tar/new_hunk_472.cpp,-1,479,,"ERROR ((0, 0, _(""Wrote %ld of %ld bytes to file %s""),
		  fullsize - *sizeleft, fullsize, name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Wrote"", ""%ld"", ""of"", ""%ld"", ""bytes"", ""to"", ""file"", ""%s"", ""fullsize"", ""*sizeleft"", ""fullsize"", ""name""]]",[4159812226076219827],408,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,-1,401,,"ERROR ((0, 0, _(""Child died with signal %d%s""),
		      WTERMSIG (wait_status),
		      WCOREDUMP (wait_status) ? _("" (core dumped)"") : """"));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Child"", ""died"", ""with"", ""signal"", ""%d%s"", ""WTERMSIG"", ""wait_status"", ""WCOREDUMP"", ""wait_status"", ""_"", ""core"", ""dumped""]]",[26981014578252564114],407,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,483,-1,"fputs ("": "", stream);",,"[""removeLog""]","[[""fputs"", ""stream""], []]",[12668536737657193033],406,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_471.cpp,,,data/crawl/tar/old_hunk_471.cpp,data/crawl/tar/new_hunk_471.cpp,473,-1,"fputs (buffer, stream);",,"[""removeLog""]","[[""fputs"", ""buffer"", ""stream""], []]",[10408887738296235649],405,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=27e87f4f2f4d49328c328fd55fa087d8a4507168,25 Apr 1997,"GNU tar 1.12
",4615,data/crawl/tar/hunk_470.cpp,,,data/crawl/tar/old_hunk_470.cpp,data/crawl/tar/new_hunk_470.cpp,-1,615,,"ERROR ((0, 0, _(""\
Write to compression program short %d bytes""),
		      count - status));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""\\"", ""Write"", ""to"", ""compression"", ""program"", ""short"", ""%d"", ""bytes"", ""count"", ""status""]]",[27489480085011627525],404,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3e3d9b7e3962df782fd733ea9dd2fe2be37f58d6,25 Apr 1997,"GNU tar 1.12
",336,data/crawl/tar/hunk_469.cpp,,,data/crawl/tar/old_hunk_469.cpp,data/crawl/tar/new_hunk_469.cpp,-1,259,,"ERROR ((0, 0, _(""Deleting non-header from archive"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Deleting"", ""non"", ""header"", ""from"", ""archive""]]",[20341535967352704327],403,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,1190,,"error (0, 0, _(""Error exit delayed from previous errors""));","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""Error"", ""exit"", ""delayed"", ""from"", ""previous"", ""errors""]]",[822854448646678549],402,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,1006,,"fputs (_(""\
\n\
Written by John Gilmore and Jay Fenlason.\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Written"", ""by"", ""John"", ""Gilmore"", ""and"", ""Jay"", ""Fenlason"", ""\\n"", ""stdout""]]",[-13740149097463209981],401,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,998,,"fputs (_(""\
\n\
Copyright (C) 1988, 92, 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Copyright"", ""C"", ""1988"", ""92"", ""93"", ""94"", ""95"", ""96"", ""97"", ""Free"", ""Software"", ""Foundation"", ""Inc"", ""\\n"", ""stdout""]]",[-10924323973705974870],400,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,865,,"ERROR ((TAREXIT_FAILURE, 0, _(""Invalid owner given on option"")));","[""addLog""]","[[], [""ERROR"", ""TAREXIT_FAILURE"", ""0"", ""_"", ""Invalid"", ""owner"", ""given"", ""on"", ""option""]]",[18146799555197857437],399,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,851,,"ERROR ((TAREXIT_FAILURE, 0, _(""Memory exhausted"")));","[""addLog""]","[[], [""ERROR"", ""TAREXIT_FAILURE"", ""0"", ""_"", ""Memory"", ""exhausted""]]",[25964835672686585678],398,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,849,,"ERROR ((TAREXIT_FAILURE, 0, _(""Invalid mode given on option"")));","[""addLog""]","[[], [""ERROR"", ""TAREXIT_FAILURE"", ""0"", ""_"", ""Invalid"", ""mode"", ""given"", ""on"", ""option""]]",[4514111961235918330],397,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,839,,"ERROR ((TAREXIT_FAILURE, 0, _(""Invalid group given on option"")));","[""addLog""]","[[], [""ERROR"", ""TAREXIT_FAILURE"", ""0"", ""_"", ""Invalid"", ""group"", ""given"", ""on"", ""option""]]",[13354490035282550185],396,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,432,,"fputs (_(""\
\n\
Report bugs to <tar-bugs@gnu.ai.mit.edu>.\n""),
	       stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Report"", ""bugs"", ""to"", ""tar"", ""bugs"", ""gnu"", ""ai"", ""mit"", ""edu"", ""\\n"", ""stdout""]]",[-5584216048645676600],395,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,415,,"fputs (_(""\
\n\
The backup suffix is `~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\n\
The version control may be set with --backup or VERSION_CONTROL, values are:\n\
\n\
  t, numbered     make numbered backups\n\
  nil, existing   numbered if numbered backups exist, simple otherwise\n\
  never, simple   always make simple backups\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""The"", ""backup"", ""suffix"", ""is"", ""unless"", ""set"", ""with"", ""suffix"", ""or"", ""SIMPLE_BACKUP_SUFFIX"", ""\\n\\"", ""The"", ""version"", ""control"", ""may"", ""be"", ""set"", ""with"", ""backup"", ""or"", ""VERSION_CONTROL"", ""values"", ""are"", ""\\n\\"", ""\\n\\"", ""t"", ""numbered"", ""make"", ""numbered"", ""backups\\n\\"", ""nil"", ""existing"", ""numbered"", ""if"", ""numbered"", ""backups"", ""exist"", ""simple"", ""otherwise\\n\\"", ""never"", ""simple"", ""always"", ""make"", ""simple"", ""backups\\n"", ""stdout""]]",[26967424226269618290],394,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,403,,"fputs (_(""\
\n\
Informative output:\n\
      --help            print this help, then exit\n\
      --version         print tar program version number, then exit\n\
  -v, --verbose         verbosely list files processed\n\
      --checkpoint      print directory names while reading the archive\n\
      --totals          print total bytes written while creating archive\n\
  -R, --block-number    show block number within archive with each message\n\
  -w, --interactive     ask for confirmation for every action\n\
      --confirmation    same as -w\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Informative"", ""output"", ""\\n\\"", ""help"", ""print"", ""this"", ""help"", ""then"", ""exit\\n\\"", ""version"", ""print"", ""tar"", ""program"", ""version"", ""number"", ""then"", ""exit\\n\\"", ""v"", ""verbose"", ""verbosely"", ""list"", ""files"", ""processed\\n\\"", ""checkpoint"", ""print"", ""directory"", ""names"", ""while"", ""reading"", ""the"", ""archive\\n\\"", ""totals"", ""print"", ""total"", ""bytes"", ""written"", ""while"", ""creating"", ""archive\\n\\"", ""R"", ""block"", ""number"", ""show"", ""block"", ""number"", ""within"", ""archive"", ""with"", ""each"", ""message\\n\\"", ""w"", ""interactive"", ""ask"", ""for"", ""confirmation"", ""for"", ""every"", ""action\\n\\"", ""confirmation"", ""same"", ""as"", ""w\\n"", ""stdout""]]",[2356699278272975760],393,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,399,,"fputs (_(""\
      --backup[=CONTROL]       backup before removal, choose version control\n\
      --suffix=SUFFIX          backup before removel, override usual suffix\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""backup["", ""CONTROL]"", ""backup"", ""before"", ""removal"", ""choose"", ""version"", ""control\\n\\"", ""suffix"", ""SUFFIX"", ""backup"", ""before"", ""removel"", ""override"", ""usual"", ""suffix\\n"", ""stdout""]]",[-4021859043814315992],392,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,393,,"fputs (_(""\
  -N, --newer=DATE             only store files newer than DATE\n\
      --newer-mtime            compare date and time when data changed only\n\
      --after-date=DATE        same as -N\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""N"", ""newer"", ""DATE"", ""only"", ""store"", ""files"", ""newer"", ""than"", ""DATE\\n\\"", ""newer"", ""mtime"", ""compare"", ""date"", ""and"", ""time"", ""when"", ""data"", ""changed"", ""only\\n\\"", ""after"", ""date"", ""DATE"", ""same"", ""as"", ""N\\n"", ""stdout""]]",[-74881854363727498898],391,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,378,,"fputs (_(""\
\n\
Local file selection:\n\
  -C, --directory=DIR          change to directory DIR\n\
  -T, --files-from=NAME        get names to extract or create from file NAME\n\
      --null                   -T reads null-terminated names, disable -C\n\
      --exclude=PATTERN        exclude files, given as a globbing PATTERN\n\
  -X, --exclude-from=FILE      exclude globbing patterns listed in FILE\n\
  -P, --absolute-names         don't strip leading `/'s from file names\n\
  -h, --dereference            dump instead the files symlinks point to\n\
      --no-recursion           avoid descending automatically in directories\n\
  -l, --one-file-system        stay in local file system when creating archive\n\
  -K, --starting-file=NAME     begin at file NAME in the archive\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Local"", ""file"", ""selection"", ""\\n\\"", ""C"", ""directory"", ""DIR"", ""change"", ""to"", ""directory"", ""DIR\\n\\"", ""T"", ""files"", ""from"", ""NAME"", ""get"", ""names"", ""to"", ""extract"", ""or"", ""create"", ""from"", ""file"", ""NAME\\n\\"", ""null"", ""T"", ""reads"", ""null"", ""terminated"", ""names"", ""disable"", ""C\\n\\"", ""exclude"", ""PATTERN"", ""exclude"", ""files"", ""given"", ""as"", ""a"", ""globbing"", ""PATTERN\\n\\"", ""X"", ""exclude"", ""from"", ""FILE"", ""exclude"", ""globbing"", ""patterns"", ""listed"", ""in"", ""FILE\\n\\"", ""P"", ""absolute"", ""names"", ""don"", ""t"", ""strip"", ""leading"", ""/"", ""s"", ""from"", ""file"", ""names\\n\\"", ""h"", ""dereference"", ""dump"", ""instead"", ""the"", ""files"", ""symlinks"", ""point"", ""to\\n\\"", ""no"", ""recursion"", ""avoid"", ""descending"", ""automatically"", ""in"", ""directories\\n\\"", ""l"", ""one"", ""file"", ""system"", ""stay"", ""in"", ""local"", ""file"", ""system"", ""when"", ""creating"", ""archive\\n\\"", ""K"", ""starting"", ""file"", ""NAME"", ""begin"", ""at"", ""file"", ""NAME"", ""in"", ""the"", ""archive\\n"", ""stdout""]]",[-48281367376381577537],390,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,367,,"fputs (_(""\
\n\
Archive format selection:\n\
  -V, --label=NAME                   create archive with volume name NAME\n\
              PATTERN                at list/extract time, a globbing PATTERN\n\
  -o, --old-archive, --portability   write a V7 format archive\n\
      --posix                        write a POSIX conformant archive\n\
  -z, --gzip, --ungzip               filter the archive through gzip\n\
  -Z, --compress, --uncompress       filter the archive through compress\n\
      --use-compress-program=PROG    filter through PROG (must accept -d)\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Archive"", ""format"", ""selection"", ""\\n\\"", ""V"", ""label"", ""NAME"", ""create"", ""archive"", ""with"", ""volume"", ""name"", ""NAME\\n\\"", ""PATTERN"", ""at"", ""list/extract"", ""time"", ""a"", ""globbing"", ""PATTERN\\n\\"", ""o"", ""old"", ""archive"", ""portability"", ""write"", ""a"", ""V7"", ""format"", ""archive\\n\\"", ""posix"", ""write"", ""a"", ""POSIX"", ""conformant"", ""archive\\n\\"", ""z"", ""gzip"", ""ungzip"", ""filter"", ""the"", ""archive"", ""through"", ""gzip\\n\\"", ""Z"", ""compress"", ""uncompress"", ""filter"", ""the"", ""archive"", ""through"", ""compress\\n\\"", ""use"", ""compress"", ""program"", ""PROG"", ""filter"", ""through"", ""PROG"", ""must"", ""accept"", ""d"", ""\\n"", ""stdout""]]",[50429606466198704491],389,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,359,,"fputs (_(""\
\n\
Device blocking:\n\
  -b, --blocking-factor=BLOCKS   BLOCKS x 512 bytes per record\n\
      --record-size=SIZE         SIZE bytes per record, multiple of 512\n\
  -i, --ignore-zeros             ignore zeroed blocks in archive (means EOF)\n\
  -B, --read-full-records        reblock as we read (for 4.2BSD pipes)\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Device"", ""blocking"", ""\\n\\"", ""b"", ""blocking"", ""factor"", ""BLOCKS"", ""BLOCKS"", ""x"", ""512"", ""bytes"", ""per"", ""record\\n\\"", ""record"", ""size"", ""SIZE"", ""SIZE"", ""bytes"", ""per"", ""record"", ""multiple"", ""of"", ""512\\n\\"", ""i"", ""ignore"", ""zeros"", ""ignore"", ""zeroed"", ""blocks"", ""in"", ""archive"", ""means"", ""EOF"", ""\\n\\"", ""B"", ""read"", ""full"", ""records"", ""reblock"", ""as"", ""we"", ""read"", ""for"", ""4"", ""2BSD"", ""pipes"", ""\\n"", ""stdout""]]",[-7070861217283942851],388,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,346,,"fputs (_(""\
\n\
Device selection and switching:\n\
  -f, --file=ARCHIVE             use archive file or device ARCHIVE\n\
      --force-local              archive file is local even if has a colon\n\
      --rsh-command=COMMAND      use remote COMMAND instead of rsh\n\
  -[0-7][lmh]                    specify drive and density\n\
  -M, --multi-volume             create/list/extract multi-volume archive\n\
  -L, --tape-length=NUM          change tape after writing NUM x 1024 bytes\n\
  -F, --info-script=FILE         run script at end of each tape (implies -M)\n\
      --new-volume-script=FILE   same as -F FILE\n\
      --volno-file=FILE          use/update the volume number in FILE\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Device"", ""selection"", ""and"", ""switching"", ""\\n\\"", ""f"", ""file"", ""ARCHIVE"", ""use"", ""archive"", ""file"", ""or"", ""device"", ""ARCHIVE\\n\\"", ""force"", ""local"", ""archive"", ""file"", ""is"", ""local"", ""even"", ""if"", ""has"", ""a"", ""colon\\n\\"", ""rsh"", ""command"", ""COMMAND"", ""use"", ""remote"", ""COMMAND"", ""instead"", ""of"", ""rsh\\n\\"", ""[0"", ""7][lmh]"", ""specify"", ""drive"", ""and"", ""density\\n\\"", ""M"", ""multi"", ""volume"", ""create/list/extract"", ""multi"", ""volume"", ""archive\\n\\"", ""L"", ""tape"", ""length"", ""NUM"", ""change"", ""tape"", ""after"", ""writing"", ""NUM"", ""x"", ""1024"", ""bytes\\n\\"", ""F"", ""info"", ""script"", ""FILE"", ""run"", ""script"", ""at"", ""end"", ""of"", ""each"", ""tape"", ""implies"", ""M"", ""\\n\\"", ""new"", ""volume"", ""script"", ""FILE"", ""same"", ""as"", ""F"", ""FILE\\n\\"", ""volno"", ""file"", ""FILE"", ""use/update"", ""the"", ""volume"", ""number"", ""in"", ""FILE\\n"", ""stdout""]]",[35995774995608561879],387,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,330,,"fputs (_(""\
\n\
Handling of file attributes:\n\
      --owner=NAME             force NAME as owner for added files\n\
      --group=NAME             force NAME as group for added files\n\
      --mode=CHANGES           force (symbolic) mode CHANGES for added files\n\
      --atime-preserve         don't change access times on dumped files\n\
  -m, --modification-time      don't extract file modified time\n\
      --same-owner             try extracting files with the same ownership\n\
      --numeric-owner          always use numbers for user/group names\n\
  -p, --same-permissions       extract all protection information\n\
      --preserve-permissions   same as -p\n\
  -s, --same-order             sort names to extract to match archive\n\
      --preserve-order         same as -s\n\
      --preserve               same as both -p and -s\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Handling"", ""of"", ""file"", ""attributes"", ""\\n\\"", ""owner"", ""NAME"", ""force"", ""NAME"", ""as"", ""owner"", ""for"", ""added"", ""files\\n\\"", ""group"", ""NAME"", ""force"", ""NAME"", ""as"", ""group"", ""for"", ""added"", ""files\\n\\"", ""mode"", ""CHANGES"", ""force"", ""symbolic"", ""mode"", ""CHANGES"", ""for"", ""added"", ""files\\n\\"", ""atime"", ""preserve"", ""don"", ""t"", ""change"", ""access"", ""times"", ""on"", ""dumped"", ""files\\n\\"", ""m"", ""modification"", ""time"", ""don"", ""t"", ""extract"", ""file"", ""modified"", ""time\\n\\"", ""same"", ""owner"", ""try"", ""extracting"", ""files"", ""with"", ""the"", ""same"", ""ownership\\n\\"", ""numeric"", ""owner"", ""always"", ""use"", ""numbers"", ""for"", ""user/group"", ""names\\n\\"", ""p"", ""same"", ""permissions"", ""extract"", ""all"", ""protection"", ""information\\n\\"", ""preserve"", ""permissions"", ""same"", ""as"", ""p\\n\\"", ""s"", ""same"", ""order"", ""sort"", ""names"", ""to"", ""extract"", ""to"", ""match"", ""archive\\n\\"", ""preserve"", ""order"", ""same"", ""as"", ""s\\n\\"", ""preserve"", ""same"", ""as"", ""both"", ""p"", ""and"", ""s\\n"", ""stdout""]]",[-175472455227548787708],386,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,316,,"fputs (_(""\
\n\
Operation modifiers:\n\
  -W, --verify               attempt to verify the archive after writing it\n\
      --remove-files         remove files after adding them to the archive\n\
  -k, --keep-old-files       don't overwrite existing files when extracting\n\
  -U, --unlink-first         remove each file prior to extracting over it\n\
      --recursive-unlink     empty hierarchies prior to extracting directory\n\
  -S, --sparse               handle sparse files efficiently\n\
  -O, --to-stdout            extract files to standard output\n\
  -G, --incremental          handle old GNU-format incremental backup\n\
  -g, --listed-incremental   handle new GNU-format incremental backup\n\
      --ignore-failed-read   do not exit with nonzero on unreadable files\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Operation"", ""modifiers"", ""\\n\\"", ""W"", ""verify"", ""attempt"", ""to"", ""verify"", ""the"", ""archive"", ""after"", ""writing"", ""it\\n\\"", ""remove"", ""files"", ""remove"", ""files"", ""after"", ""adding"", ""them"", ""to"", ""the"", ""archive\\n\\"", ""k"", ""keep"", ""old"", ""files"", ""don"", ""t"", ""overwrite"", ""existing"", ""files"", ""when"", ""extracting\\n\\"", ""U"", ""unlink"", ""first"", ""remove"", ""each"", ""file"", ""prior"", ""to"", ""extracting"", ""over"", ""it\\n\\"", ""recursive"", ""unlink"", ""empty"", ""hierarchies"", ""prior"", ""to"", ""extracting"", ""directory\\n\\"", ""S"", ""sparse"", ""handle"", ""sparse"", ""files"", ""efficiently\\n\\"", ""O"", ""to"", ""stdout"", ""extract"", ""files"", ""to"", ""standard"", ""output\\n\\"", ""G"", ""incremental"", ""handle"", ""old"", ""GNU"", ""format"", ""incremental"", ""backup\\n\\"", ""g"", ""listed"", ""incremental"", ""handle"", ""new"", ""GNU"", ""format"", ""incremental"", ""backup\\n\\"", ""ignore"", ""failed"", ""read"", ""do"", ""not"", ""exit"", ""with"", ""nonzero"", ""on"", ""unreadable"", ""files\\n"", ""stdout""]]",[52238415026318637868],385,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,303,,"fputs(_(""\
\n\
Main operation mode:\n\
  -t, --list              list the contents of an archive\n\
  -x, --extract, --get    extract files from an archive\n\
  -c, --create            create a new archive\n\
  -d, --diff, --compare   find differences between archive and file system\n\
  -r, --append            append files to the end of an archive\n\
  -u, --update            only append files newer than copy in archive\n\
  -A, --catenate          append tar files to an archive\n\
      --concatenate       same as -A\n\
      --delete            delete from the archive (not on mag tapes!)\n""),
	    stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Main"", ""operation"", ""mode"", ""\\n\\"", ""t"", ""list"", ""list"", ""the"", ""contents"", ""of"", ""an"", ""archive\\n\\"", ""x"", ""extract"", ""get"", ""extract"", ""files"", ""from"", ""an"", ""archive\\n\\"", ""c"", ""create"", ""create"", ""a"", ""new"", ""archive\\n\\"", ""d"", ""diff"", ""compare"", ""find"", ""differences"", ""between"", ""archive"", ""and"", ""file"", ""system\\n\\"", ""r"", ""append"", ""append"", ""files"", ""to"", ""the"", ""end"", ""of"", ""an"", ""archive\\n\\"", ""u"", ""update"", ""only"", ""append"", ""files"", ""newer"", ""than"", ""copy"", ""in"", ""archive\\n\\"", ""A"", ""catenate"", ""append"", ""tar"", ""files"", ""to"", ""an"", ""archive\\n\\"", ""concatenate"", ""same"", ""as"", ""A\\n\\"", ""delete"", ""delete"", ""from"", ""the"", ""archive"", ""not"", ""on"", ""mag"", ""tapes"", ""\\n"", ""stdout""]]",[29649226925329250128],384,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,298,,"fputs (_(""\
\n\
If a long option shows an argument as mandatory, then it is mandatory\n\
for the equivalent short option also.  Similarly for optional arguments.\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""If"", ""a"", ""long"", ""option"", ""shows"", ""an"", ""argument"", ""as"", ""mandatory"", ""then"", ""it"", ""is"", ""mandatory\\n\\"", ""for"", ""the"", ""equivalent"", ""short"", ""option"", ""also"", ""Similarly"", ""for"", ""optional"", ""arguments"", ""\\n"", ""stdout""]]",[-19005408191001547579],383,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,-1,293,,"fputs (_(""\
GNU `tar' saves many files together into a single tape or disk archive, and\n\
can restore individual files from the archive.\n""),
	     stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""GNU"", ""tar"", ""saves"", ""many"", ""files"", ""together"", ""into"", ""a"", ""single"", ""tape"", ""or"", ""disk"", ""archive"", ""and\\n\\"", ""can"", ""restore"", ""individual"", ""files"", ""from"", ""the"", ""archive"", ""\\n"", ""stdout""]]",[-27458376337825040884],382,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,702,-1,"fputs (""\
    --uncompress      	filter the archive through compress\n\
    --ungzip		filter the archive through gzip\n\
			filter the archive through PROG (which must accept -d)\n\
"", stdout);",,"[""removeLog""]","[[""fputs"", ""\\"", ""uncompress"", ""filter"", ""the"", ""archive"", ""through"", ""compress\\n\\"", ""ungzip"", ""filter"", ""the"", ""archive"", ""through"", ""gzip\\n\\"", ""filter"", ""the"", ""archive"", ""through"", ""PROG"", ""which"", ""must"", ""accept"", ""d"", ""\\n\\"", ""stdout""], []]",[-2213468627400632939],381,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,698,-1,"fputs (""\
    --preserve-order	list of names to extract is sorted to match archive\n\
    --confirmation	ask for confirmation for every action\n\
"", stdout);",,"[""removeLog""]","[[""fputs"", ""\\"", ""preserve"", ""order"", ""list"", ""of"", ""names"", ""to"", ""extract"", ""is"", ""sorted"", ""to"", ""match"", ""archive\\n\\"", ""confirmation"", ""ask"", ""for"", ""confirmation"", ""for"", ""every"", ""action\\n\\"", ""stdout""], []]",[-3584485044832191672],380,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,693,-1,"fputs (""\
    --newer DATE	only store files newer than DATE\n\
    --portability	write a V7 format archive, rather than ANSI format\n\
    --preserve-permissions extract all protection information\n\
"", stdout);",,"[""removeLog""]","[[""fputs"", ""\\"", ""newer"", ""DATE"", ""only"", ""store"", ""files"", ""newer"", ""than"", ""DATE\\n\\"", ""portability"", ""write"", ""a"", ""V7"", ""format"", ""archive"", ""rather"", ""than"", ""ANSI"", ""format\\n\\"", ""preserve"", ""permissions"", ""extract"", ""all"", ""protection"", ""information\\n\\"", ""stdout""], []]",[14398837473334071412],379,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,690,-1,"fputs (""\
    --new-volume-script F run script at end of each tape (implies -M)\n\
"", stdout);",,"[""removeLog""]","[[""fputs"", ""\\"", ""new"", ""volume"", ""script"", ""F"", ""run"", ""script"", ""at"", ""end"", ""of"", ""each"", ""tape"", ""implies"", ""M"", ""\\n\\"", ""stdout""], []]",[6134163006076101915],378,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e89eac1a00a2edb87ea7b69f1f38c2b1249e1,25 Apr 1997,"GNU tar 1.12
",2453,data/crawl/tar/hunk_468.cpp,,,data/crawl/tar/old_hunk_468.cpp,data/crawl/tar/new_hunk_468.cpp,679,-1,"fputs (""\
    --concatenate	append tar files to an archive\n\
    --compare		find differences between archive and file system\n\
    --get		extract files from an archive\n"", stdout);

  fprintf;",,"[""removeLog""]","[[""fputs"", ""\\"", ""concatenate"", ""append"", ""tar"", ""files"", ""to"", ""an"", ""archive\\n\\"", ""compare"", ""find"", ""differences"", ""between"", ""archive"", ""and"", ""file"", ""system\\n\\"", ""get"", ""extract"", ""files"", ""from"", ""an"", ""archive\\n"", ""stdout"", ""fprintf""], []]",[5422813704260231964],377,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b7890ac7573e6df20fa843fd85400072b5638c28,25 Apr 1997,"GNU tar 1.12
",1227,data/crawl/tar/hunk_467.cpp,,,data/crawl/tar/old_hunk_467.cpp,data/crawl/tar/new_hunk_467.cpp,-1,653,,"ERROR ((0, 0, _(""Visible longname error"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Visible"", ""longname"", ""error""]]",[14975755868178171830],376,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b7890ac7573e6df20fa843fd85400072b5638c28,25 Apr 1997,"GNU tar 1.12
",1227,data/crawl/tar/hunk_467.cpp,,,data/crawl/tar/old_hunk_467.cpp,data/crawl/tar/new_hunk_467.cpp,-1,215,,"ERROR ((0, errno, _(""Only wrote %ld of %ld bytes to file %s""),
		      check, written, current_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Only"", ""wrote"", ""%ld"", ""of"", ""%ld"", ""bytes"", ""to"", ""file"", ""%s"", ""check"", ""written"", ""current_file_name""]]",[17177243870172308183],375,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b7890ac7573e6df20fa843fd85400072b5638c28,25 Apr 1997,"GNU tar 1.12
",1227,data/crawl/tar/hunk_467.cpp,,,data/crawl/tar/old_hunk_467.cpp,data/crawl/tar/new_hunk_467.cpp,-1,203,,"ERROR ((0, 0, _(""EOF in archive file"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""EOF"", ""in"", ""archive"", ""file""]]",[12354962930999652710],374,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49086e2770abfa6ad6a7647e2d0707b607ee1bf8,31 Oct 1997,"(newdir_umask, current_umask): Now mode_t. (extract_sparse_file):
 Args now use off_t.

(set_mode, set_stat, make_directories, extract_sparse_file,
extract_archive): Use off_t, size_t, ssize_t when appropriate.  Remove
now-useless casts.  Use unsigned long to print *_t types, except use
STRINGIFY_BIGINT for off_t.",130,data/crawl/tar/hunk_460.cpp,,,data/crawl/tar/old_hunk_460.cpp,data/crawl/tar/new_hunk_460.cpp,17,17,"ERROR ((0, 0, _(""%s: Could only write %d of %d bytes""),
		      CURRENT_FILE_NAME, status, written));","ERROR ((0, 0, _(""%s: Could only write %lu of %lu bytes""),
		      CURRENT_FILE_NAME,
		      (unsigned long) sstatus,
		      (unsigned long) written));","[""updateVariable"", ""updateContent"", ""addVariable""]","[[""%d"", ""%d"", ""status""], [""%lu"", ""%lu"", ""unsigned"", ""long"", ""sstatus"", ""unsigned"", ""long""]]",[2758186866161336288],373,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49086e2770abfa6ad6a7647e2d0707b607ee1bf8,31 Oct 1997,"(newdir_umask, current_umask): Now mode_t. (extract_sparse_file):
 Args now use off_t.

(set_mode, set_stat, make_directories, extract_sparse_file,
extract_archive): Use off_t, size_t, ssize_t when appropriate.  Remove
now-useless casts.  Use unsigned long to print *_t types, except use
STRINGIFY_BIGINT for off_t.",130,data/crawl/tar/hunk_459.cpp,,,data/crawl/tar/old_hunk_459.cpp,data/crawl/tar/new_hunk_459.cpp,9,11,"ERROR ((0, 0, _(""%s: Could only write %d of %d bytes""),
		     name, count, totalsize));","ERROR ((0, 0, _(""%s: Could only write %s of %s bytes""),
		  name,
		  STRINGIFY_BIGINT (totalsize - *sizeleft, buf1),
		  STRINGIFY_BIGINT (totalsize, buf2)));","[""updateVariable"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""%d"", ""%d"", ""count""], [""%s"", ""%s"", ""STRINGIFY_BIGINT"", ""*sizeleft"", ""buf1"", ""STRINGIFY_BIGINT"", ""totalsize"", ""buf2""]]",[-12233720050709884322],372,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49086e2770abfa6ad6a7647e2d0707b607ee1bf8,31 Oct 1997,"(newdir_umask, current_umask): Now mode_t. (extract_sparse_file):
 Args now use off_t.

(set_mode, set_stat, make_directories, extract_sparse_file,
extract_archive): Use off_t, size_t, ssize_t when appropriate.  Remove
now-useless casts.  Use unsigned long to print *_t types, except use
STRINGIFY_BIGINT for off_t.",130,data/crawl/tar/hunk_455.cpp,,,data/crawl/tar/old_hunk_455.cpp,data/crawl/tar/new_hunk_455.cpp,4,4,"ERROR ((0, errno, _(""%s: Cannot change mode to %0.4o""),
	      file_name, ~current_umask & (int) stat_info->st_mode));","ERROR ((0, errno, _(""%s: Cannot change mode to %0.4lo""),
	      file_name,
	      (unsigned long) (~current_umask & stat_info->st_mode)));","[""moveVariable"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""4o"", ""int""], [""4lo"", ""unsigned"", ""long""]]",[3139596349649187230],371,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=241bbee81b2136a216dab74ab1322ae6dd07555f,31 Oct 1997,"(read_and, list_archive, read_header, decode_mode, print_header,
 print_for_mkdir): Use mode_t, off_t, size_t when appropriate.  Remove
 now-useless casts.  Use unsigned long to print *_t types, except use
 STRINGIFY_BIGINT for off_t.

(read_header): Check for overflow when converting header size.

(from_oct): Now static.  Now returns uintmax_t.  `where' arg is now
const char *.  Size arg is now size_t.  Now takes new type and maxval
args.  Compute result using uintmax_t, not long.  Report error if
field does not contain octal number in range.
(gid_from_oct, major_from_oct, minor_from_oct, mode_from_oct,
off_from_oct, size_from_oct, time_from_oct, uid_from_oct,
uintmax_from_oct): New functions.

(stringify_uintmax_t_backwards): New function.

(decode_mode, print_for_mkdir): Mode arg is now mode_t.
(skip_file): Offset arg is now off_t.",246,data/crawl/tar/hunk_454.cpp,,,data/crawl/tar/old_hunk_454.cpp,data/crawl/tar/new_hunk_454.cpp,-1,46,,"ERROR ((0, 0, _(""Octal value `%.*s' is out of range for %s""),
	  (int) digs0, where0, type));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Octal"", ""value"", ""%"", ""*s"", ""is"", ""out"", ""of"", ""range"", ""for"", ""%s"", ""int"", ""digs0"", ""where0"", ""type""]]",[-12194756363472368883],370,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=241bbee81b2136a216dab74ab1322ae6dd07555f,31 Oct 1997,"(read_and, list_archive, read_header, decode_mode, print_header,
 print_for_mkdir): Use mode_t, off_t, size_t when appropriate.  Remove
 now-useless casts.  Use unsigned long to print *_t types, except use
 STRINGIFY_BIGINT for off_t.

(read_header): Check for overflow when converting header size.

(from_oct): Now static.  Now returns uintmax_t.  `where' arg is now
const char *.  Size arg is now size_t.  Now takes new type and maxval
args.  Compute result using uintmax_t, not long.  Report error if
field does not contain octal number in range.
(gid_from_oct, major_from_oct, minor_from_oct, mode_from_oct,
off_from_oct, size_from_oct, time_from_oct, uid_from_oct,
uintmax_from_oct): New functions.

(stringify_uintmax_t_backwards): New function.

(decode_mode, print_for_mkdir): Mode arg is now mode_t.
(skip_file): Offset arg is now off_t.",246,data/crawl/tar/hunk_454.cpp,,,data/crawl/tar/old_hunk_454.cpp,data/crawl/tar/new_hunk_454.cpp,-1,37,,"ERROR ((0, 0, _(""Header contains `%.*s' where octal %s value expected""),
	      (int) digs0, where0, type));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Header"", ""contains"", ""%"", ""*s"", ""where"", ""octal"", ""%s"", ""value"", ""expected"", ""int"", ""digs0"", ""where0"", ""type""]]",[-7373597977030543789],369,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=241bbee81b2136a216dab74ab1322ae6dd07555f,31 Oct 1997,"(read_and, list_archive, read_header, decode_mode, print_header,
 print_for_mkdir): Use mode_t, off_t, size_t when appropriate.  Remove
 now-useless casts.  Use unsigned long to print *_t types, except use
 STRINGIFY_BIGINT for off_t.

(read_header): Check for overflow when converting header size.

(from_oct): Now static.  Now returns uintmax_t.  `where' arg is now
const char *.  Size arg is now size_t.  Now takes new type and maxval
args.  Compute result using uintmax_t, not long.  Report error if
field does not contain octal number in range.
(gid_from_oct, major_from_oct, minor_from_oct, mode_from_oct,
off_from_oct, size_from_oct, time_from_oct, uid_from_oct,
uintmax_from_oct): New functions.

(stringify_uintmax_t_backwards): New function.

(decode_mode, print_for_mkdir): Mode arg is now mode_t.
(skip_file): Offset arg is now off_t.",246,data/crawl/tar/hunk_454.cpp,,,data/crawl/tar/old_hunk_454.cpp,data/crawl/tar/new_hunk_454.cpp,-1,14,,"ERROR ((0, 0, _(""Blanks in header where octal %s value expected""),
		  type));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Blanks"", ""in"", ""header"", ""where"", ""octal"", ""%s"", ""value"", ""expected"", ""type""]]",[-10229353520950799978],368,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=241bbee81b2136a216dab74ab1322ae6dd07555f,31 Oct 1997,"(read_and, list_archive, read_header, decode_mode, print_header,
 print_for_mkdir): Use mode_t, off_t, size_t when appropriate.  Remove
 now-useless casts.  Use unsigned long to print *_t types, except use
 STRINGIFY_BIGINT for off_t.

(read_header): Check for overflow when converting header size.

(from_oct): Now static.  Now returns uintmax_t.  `where' arg is now
const char *.  Size arg is now size_t.  Now takes new type and maxval
args.  Compute result using uintmax_t, not long.  Report error if
field does not contain octal number in range.
(gid_from_oct, major_from_oct, minor_from_oct, mode_from_oct,
off_from_oct, size_from_oct, time_from_oct, uid_from_oct,
uintmax_from_oct): New functions.

(stringify_uintmax_t_backwards): New function.

(decode_mode, print_for_mkdir): Mode arg is now mode_t.
(skip_file): Offset arg is now off_t.",246,data/crawl/tar/hunk_453.cpp,,,data/crawl/tar/old_hunk_453.cpp,data/crawl/tar/new_hunk_453.cpp,3,3,"ERROR ((0, errno, _(""Only wrote %ld of %ld bytes to file %s""),
		      check, written, current_file_name));","ERROR ((0, errno, _(""Only wrote %lu of %lu bytes to file %s""),
		      (unsigned long) check,
		      (unsigned long) written, current_file_name));","[""updateContent"", ""addVariable""]","[[""%ld"", ""%ld""], [""%lu"", ""%lu"", ""unsigned"", ""long"", ""unsigned"", ""long""]]",[-2388915104355128616],367,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=48be206fbfd81aa56056d7327fa8295e27011e5f,31 Oct 1997,"(to_oct): Now static.  Value arg is now uintmax_t.  Accept new args
 giving name of type of octal field, for error messages.  Report an error if
 the value is too large to fit in the field. (gid_to_oct, major_to_oct,
 minor_to_oct, mode_to_oct, off_to_oct, size_to_oct, time_to_oct, uid_to_oct,
 uintmax_to_oct): New functions.

(write_eot, write_long, finish_header, deal_with_sparse,
finish_sparse_file, dump_file): Use dev_t, off_t, ssize_t, size_t when
appropriate.  Remove now-useless casts.  Use unsigned long to print
*_t types, except use STRINGIFY_BIGINT for off_t.

(find_new_file_size): 1st arg is now off_t*.
(finish_sparse_file): Args now use off_t, not long.
Check for lseek error.
(create_archive, dump_file): Cast -1 to dev_t when necessary.
(dump_file): Device arg is now dev_t.
Avoid overflow when testing whether file has holes
by using the new ST_NBLOCKSIZE macro.",281,data/crawl/tar/hunk_451.cpp,,,data/crawl/tar/old_hunk_451.cpp,data/crawl/tar/new_hunk_451.cpp,3,6,"ERROR ((0, 0, _(""File %s shrunk by %d bytes, padding with zeros""),
		    p, sizeleft));","ERROR ((0, 0,
			_(""File %s shrunk by %s bytes, padding with zeros""),
			p, STRINGIFY_BIGINT (sizeleft, buf)));","[""moveVariable"", ""updateContent"", ""addVariable""]","[[""%d""], [""%s"", ""STRINGIFY_BIGINT"", ""buf""]]",[573368619310494968],366,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=48be206fbfd81aa56056d7327fa8295e27011e5f,31 Oct 1997,"(to_oct): Now static.  Value arg is now uintmax_t.  Accept new args
 giving name of type of octal field, for error messages.  Report an error if
 the value is too large to fit in the field. (gid_to_oct, major_to_oct,
 minor_to_oct, mode_to_oct, off_to_oct, size_to_oct, time_to_oct, uid_to_oct,
 uintmax_to_oct): New functions.

(write_eot, write_long, finish_header, deal_with_sparse,
finish_sparse_file, dump_file): Use dev_t, off_t, ssize_t, size_t when
appropriate.  Remove now-useless casts.  Use unsigned long to print
*_t types, except use STRINGIFY_BIGINT for off_t.

(find_new_file_size): 1st arg is now off_t*.
(finish_sparse_file): Args now use off_t, not long.
Check for lseek error.
(create_archive, dump_file): Cast -1 to dev_t when necessary.
(dump_file): Device arg is now dev_t.
Avoid overflow when testing whether file has holes
by using the new ST_NBLOCKSIZE macro.",281,data/crawl/tar/hunk_450.cpp,,,data/crawl/tar/old_hunk_450.cpp,data/crawl/tar/new_hunk_450.cpp,6,7,"ERROR ((0, errno, _(""\
Read error at byte %ld, reading %d bytes, in file %s""),
			(long) (current_stat.st_size - sizeleft), bufsize, p));","ERROR ((0, errno, _(""\
Read error at byte %s, reading %lu bytes, in file %s""),
			STRINGIFY_BIGINT (current_stat.st_size - sizeleft,
					  buf),
			(unsigned long) bufsize, p));","[""updateVariable"", ""updateContent"", ""addVariable""]","[[""%ld"", ""%d""], [""%lu"", ""%s"", ""STRINGIFY_BIGINT"", ""buf"", ""unsigned""]]",[-6592132258455375050],365,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=48be206fbfd81aa56056d7327fa8295e27011e5f,31 Oct 1997,"(to_oct): Now static.  Value arg is now uintmax_t.  Accept new args
 giving name of type of octal field, for error messages.  Report an error if
 the value is too large to fit in the field. (gid_to_oct, major_to_oct,
 minor_to_oct, mode_to_oct, off_to_oct, size_to_oct, time_to_oct, uid_to_oct,
 uintmax_to_oct): New functions.

(write_eot, write_long, finish_header, deal_with_sparse,
finish_sparse_file, dump_file): Use dev_t, off_t, ssize_t, size_t when
appropriate.  Remove now-useless casts.  Use unsigned long to print
*_t types, except use STRINGIFY_BIGINT for off_t.

(find_new_file_size): 1st arg is now off_t*.
(finish_sparse_file): Args now use off_t, not long.
Check for lseek error.
(create_archive, dump_file): Cast -1 to dev_t when necessary.
(dump_file): Device arg is now dev_t.
Avoid overflow when testing whether file has holes
by using the new ST_NBLOCKSIZE macro.",281,data/crawl/tar/hunk_449.cpp,,,data/crawl/tar/old_hunk_449.cpp,data/crawl/tar/new_hunk_449.cpp,2,2,"ERROR ((0, 0,
		      _(""File %s shrunk by %d bytes, padding with zeros""),
		      name, sizeleft));","ERROR ((0, 0,
		      _(""File %s shrunk, padding with zeros""),
		      name));","[""removeVariable"", ""updateContent""]","[[""by"", ""%d"", ""bytes"", ""sizeleft""], []]",[733012962170098338],364,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=48be206fbfd81aa56056d7327fa8295e27011e5f,31 Oct 1997,"(to_oct): Now static.  Value arg is now uintmax_t.  Accept new args
 giving name of type of octal field, for error messages.  Report an error if
 the value is too large to fit in the field. (gid_to_oct, major_to_oct,
 minor_to_oct, mode_to_oct, off_to_oct, size_to_oct, time_to_oct, uid_to_oct,
 uintmax_to_oct): New functions.

(write_eot, write_long, finish_header, deal_with_sparse,
finish_sparse_file, dump_file): Use dev_t, off_t, ssize_t, size_t when
appropriate.  Remove now-useless casts.  Use unsigned long to print
*_t types, except use STRINGIFY_BIGINT for off_t.

(find_new_file_size): 1st arg is now off_t*.
(finish_sparse_file): Args now use off_t, not long.
Check for lseek error.
(create_archive, dump_file): Cast -1 to dev_t when necessary.
(dump_file): Device arg is now dev_t.
Avoid overflow when testing whether file has holes
by using the new ST_NBLOCKSIZE macro.",281,data/crawl/tar/hunk_446.cpp,,,data/crawl/tar/old_hunk_446.cpp,data/crawl/tar/new_hunk_446.cpp,-1,16,,"ERROR ((0, errno, _(""lseek error at byte %s in file %s""),
		  STRINGIFY_BIGINT (sparsearray[sparse_index - 1].offset, buf),
		  name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""lseek"", ""error"", ""at"", ""byte"", ""%s"", ""in"", ""file"", ""%s"", ""STRINGIFY_BIGINT"", ""sparsearray[sparse_index"", ""1]"", ""offset"", ""buf"", ""name""]]",[12667323892078624413],363,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=48be206fbfd81aa56056d7327fa8295e27011e5f,31 Oct 1997,"(to_oct): Now static.  Value arg is now uintmax_t.  Accept new args
 giving name of type of octal field, for error messages.  Report an error if
 the value is too large to fit in the field. (gid_to_oct, major_to_oct,
 minor_to_oct, mode_to_oct, off_to_oct, size_to_oct, time_to_oct, uid_to_oct,
 uintmax_to_oct): New functions.

(write_eot, write_long, finish_header, deal_with_sparse,
finish_sparse_file, dump_file): Use dev_t, off_t, ssize_t, size_t when
appropriate.  Remove now-useless casts.  Use unsigned long to print
*_t types, except use STRINGIFY_BIGINT for off_t.

(find_new_file_size): 1st arg is now off_t*.
(finish_sparse_file): Args now use off_t, not long.
Check for lseek error.
(create_archive, dump_file): Cast -1 to dev_t when necessary.
(dump_file): Device arg is now dev_t.
Avoid overflow when testing whether file has holes
by using the new ST_NBLOCKSIZE macro.",281,data/crawl/tar/hunk_446.cpp,,,data/crawl/tar/old_hunk_446.cpp,data/crawl/tar/new_hunk_446.cpp,4,6,"ERROR ((0, 0, _(""Wrote %ld of %ld bytes to file %s""),
		  fullsize - *sizeleft, fullsize, name));","ERROR ((0, 0, _(""Wrote %s of %s bytes to file %s""),
		  STRINGIFY_BIGINT (fullsize - *sizeleft, buf1),
		  STRINGIFY_BIGINT (fullsize, buf2),
		  name));","[""moveVariable"", ""updateContent"", ""addVariable""]","[[""%ld"", ""%ld""], [""%s"", ""%s"", ""STRINGIFY_BIGINT"", ""buf1"", ""STRINGIFY_BIGINT"", ""buf2""]]",[12681212829177215937],362,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=48be206fbfd81aa56056d7327fa8295e27011e5f,31 Oct 1997,"(to_oct): Now static.  Value arg is now uintmax_t.  Accept new args
 giving name of type of octal field, for error messages.  Report an error if
 the value is too large to fit in the field. (gid_to_oct, major_to_oct,
 minor_to_oct, mode_to_oct, off_to_oct, size_to_oct, time_to_oct, uid_to_oct,
 uintmax_to_oct): New functions.

(write_eot, write_long, finish_header, deal_with_sparse,
finish_sparse_file, dump_file): Use dev_t, off_t, ssize_t, size_t when
appropriate.  Remove now-useless casts.  Use unsigned long to print
*_t types, except use STRINGIFY_BIGINT for off_t.

(find_new_file_size): 1st arg is now off_t*.
(finish_sparse_file): Args now use off_t, not long.
Check for lseek error.
(create_archive, dump_file): Cast -1 to dev_t when necessary.
(dump_file): Device arg is now dev_t.
Avoid overflow when testing whether file has holes
by using the new ST_NBLOCKSIZE macro.",281,data/crawl/tar/hunk_445.cpp,,,data/crawl/tar/old_hunk_445.cpp,data/crawl/tar/new_hunk_445.cpp,-1,37,,"ERROR ((0, 0, _(""%s value %s is too large to fit in a %u-bit field""),
	      type, STRINGIFY_BIGINT (value, buf),
	      (unsigned) ((size - 1) * 3)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""value"", ""%s"", ""is"", ""too"", ""large"", ""to"", ""fit"", ""in"", ""a"", ""%u"", ""bit"", ""field"", ""type"", ""STRINGIFY_BIGINT"", ""value"", ""buf"", ""unsigned"", ""size"", ""1"", ""*"", ""3""]]",[-24244370540212724569],361,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d434121129037355261deae143cb05cabd370cb4,25 Jan 1999,"GNU fileutils 4.0i
",316,data/crawl/tar/hunk_444.cpp,,,data/crawl/tar/old_hunk_444.cpp,data/crawl/tar/new_hunk_444.cpp,-1,169,,"error (0, 0, format, quotearg (value), context);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""format"", ""quotearg"", ""value"", ""context""]]",[4785300983904161564],360,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=13617c42d896aa66178d914d744d2d42fb988248,2 Mar 1999,"(to_oct): New parameter substitute, giving a substitute value to use
 when the original value is out of range.  Do not append a space to the
 output; modern tars don't.  When a value is out of range, specify the maximum
 value, not the number of bits. (GID_NOBODY, UID_NOBODY): New macros.
 (gid_to_oct, uid_to_oct): Use them as substitutes. (finish_header): Do not
 assume that UINTMAX_TO_OCT appends a space. (dump_file): Check whether the
 file changed as we read it.
",79,data/crawl/tar/hunk_442.cpp,,,data/crawl/tar/old_hunk_442.cpp,data/crawl/tar/new_hunk_442.cpp,-1,21,,"ERROR ((0, 0, _(""%s value %s too large (max=%s)""),
		type, value_string, maxval_string));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""value"", ""%s"", ""too"", ""large"", ""max"", ""%s"", ""type"", ""value_string"", ""maxval_string""]]",[6848051421593650414],359,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=13617c42d896aa66178d914d744d2d42fb988248,2 Mar 1999,"(to_oct): New parameter substitute, giving a substitute value to use
 when the original value is out of range.  Do not append a space to the
 output; modern tars don't.  When a value is out of range, specify the maximum
 value, not the number of bits. (GID_NOBODY, UID_NOBODY): New macros.
 (gid_to_oct, uid_to_oct): Use them as substitutes. (finish_header): Do not
 assume that UINTMAX_TO_OCT appends a space. (dump_file): Check whether the
 file changed as we read it.
",79,data/crawl/tar/hunk_442.cpp,,,data/crawl/tar/old_hunk_442.cpp,data/crawl/tar/new_hunk_442.cpp,4,15,"ERROR ((0, 0, _(""%s value %s is too large to fit in a %u-bit field""),
	      type, STRINGIFY_BIGINT (value, buf),
	      (unsigned) ((size - 1) * 3)));","WARN ((0, 0, _(""%s value %s too large (max=%s); substituting %s""),
		 type, value_string, maxval_string,
		 STRINGIFY_BIGINT (substitute, buf3)));","[""updateVariable"", ""updateLog"", ""moveVariable"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""ERROR"", ""is"", ""to"", ""fit"", ""in"", ""a"", ""%u"", ""bit"", ""field"", ""value"", ""buf"", ""unsigned"", ""size"", ""1"", ""*"", ""3""], [""WARN"", ""max"", ""%s"", ""substituting"", ""%s"", ""value_string"", ""maxval_string"", ""substitute"", ""buf3""]]",[20611095009349969062],358,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f31b9d842bad51e1c088390b17bcac44d554b56a,22 Mar 1999,"Include <quotearg.h>. (from_oct): Add forward decl. (read_header):
 Return HEADER_FAILURE if we can't parse the checksum. (from_oct): Report an
 error only if TYPE is nonzero. Quote any funny characters in bad header.
",41,data/crawl/tar/hunk_440.cpp,,,data/crawl/tar/old_hunk_440.cpp,data/crawl/tar/new_hunk_440.cpp,3,15,"ERROR ((0, 0, _(""Header contains `%.*s' where octal %s value expected""),
	      (int) digs0, where0, type));","ERROR ((0, 0,
		  _(""Header contains \""%.*s\"" where octal %s value expected""),
		  (int) sizeof buf, buf, type));","[""updateVariable"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""*s"", ""digs0"", ""where0""], [""\\"", ""*s\\"", ""sizeof"", ""buf"", ""buf""]]",[1917077504806136743],357,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0f32adce258519bfa6af4cd8f972db453f91cf9b,2 Jul 1999,"(extr_init, make_directories, extract_archive): Do not assume mode
 bits have traditional Unix values. (set_mode): Use %04 not %0.4 format.
 (extract_sparse_file): Do not use data_block uninitialized. Check for lseek
 failures; use portable lseek whence values.
",68,data/crawl/tar/hunk_433.cpp,,,data/crawl/tar/old_hunk_433.cpp,data/crawl/tar/new_hunk_433.cpp,-1,20,,"ERROR ((0, errno, _(""%s: lseek error at byte %s""),
		  STRINGIFY_BIGINT (sparsearray[sparse_ind].offset, buf),
		  name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""lseek"", ""error"", ""at"", ""byte"", ""%s"", ""STRINGIFY_BIGINT"", ""sparsearray[sparse_ind]"", ""offset"", ""buf"", ""name""]]",[18253919474185052879],356,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0f32adce258519bfa6af4cd8f972db453f91cf9b,2 Jul 1999,"(extr_init, make_directories, extract_archive): Do not assume mode
 bits have traditional Unix values. (set_mode): Use %04 not %0.4 format.
 (extract_sparse_file): Do not use data_block uninitialized. Check for lseek
 failures; use portable lseek whence values.
",68,data/crawl/tar/hunk_432.cpp,,,data/crawl/tar/old_hunk_432.cpp,data/crawl/tar/new_hunk_432.cpp,3,3,"ERROR ((0, errno, _(""%s: Cannot change mode to %0.4lo""),
	      file_name,
	      (unsigned long) (~current_umask & stat_info->st_mode)));","ERROR ((0, errno, _(""%s: Cannot change mode to %04lo""),
	      file_name,
	      (unsigned long) (~current_umask & stat_info->st_mode)));","[""updateContent""]","[[""%0"", ""4lo""], [""%04lo""]]",[1838037921730369622],355,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8e8acfbc97574b9313dea279ce53e5c9fa93cb1f,8 Jul 1999,"(exclude_pool, exclude_pool_size, allocated_exclude_pool_size,
 simple_exclude_array, simple_excludes, allocated_simple_excludes,
 pattern_exclude_array, pattern_excludes, allocated_pattern_excludes,
 add_exclude, add_exclude_file, check_exclude): Remove; now done in
 ../lib/exclude.c.
",145,data/crawl/tar/hunk_431.cpp,,,data/crawl/tar/old_hunk_431.cpp,data/crawl/tar/new_hunk_431.cpp,107,-1,"ERROR ((0, errno, ""%s"", name));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""%s"", ""name""], []]",[-12408435117451123092],354,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9cb6f5c46626aa0a8b6ce89b949fe3d9aad3feee,20 Jul 1999,"this matches historical practice. (unlink_destination): New function,
 which checks for unlink failures. (maybe_recoverable): Stay quiet if -U.
 (extract_archive): Use O_EXCL if unlink_first_option. Report unlink failures.
 Use HAVE_SYMLINK, not S_ISLNK, to determine whether symlink exists. Use
 HAVE_MKFIFO || defined mkfifo, not S_ISFIFO, to determine whether mkfifo
 exists.
",71,data/crawl/tar/hunk_429.cpp,,,data/crawl/tar/old_hunk_429.cpp,data/crawl/tar/new_hunk_429.cpp,-1,14,,"ERROR ((0, errno, _(""Cannot remove %s""), file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""remove"", ""%s"", ""file_name""]]",[3360213530551882327],353,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=dc4a8aa0c6a5bd68735e2ae220260242487c3f1e,11 Aug 1999,"(<fnmatch.h>): Do not include. (from_chars): Renamed from from_oct. 
 New parameter specifing the negative of the minimum allowed value.  Support
 negative and base-64 values. (base64_map): New var. (base64_init): New
 function. (print_header): Output numeric uids and gids if
 numeric_owner_option.
",207,data/crawl/tar/hunk_424.cpp,,,data/crawl/tar/old_hunk_424.cpp,data/crawl/tar/new_hunk_424.cpp,19,19,"ERROR ((0, 0, _(""Octal value `%.*s' is out of range for %s""),
	    (int) digs0, where0, type));","ERROR ((0, 0, _(""Numeric value `%.*s' is out of range for %s""),
	    (int) digs, where0, type));","[""updateVariable"", ""updateContent""]","[[""Octal"", ""digs0""], [""Numeric"", ""digs""]]",[-8435424542235710063],352,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=36682e50ccd859bb82bff444c4c68ff587966dc8,11 Aug 1999,"(base_64_digits): New constant. (base_8_digits): New macro.
 (MAX_VAL_WITH_DIGITS): New macro. (to_base): Renamed from to_oct.  Support
 base 64 too. New parameters specifying bits per digit and digits. Remove
 `type' parameter.  The result is now undefined if it doesn't fit; it's the
 caller's responsibility to check this. (to_chars): Other half of old to_oct,
 for 64-bit support. Mostly a new function. (GID_NOBODY, UID_NOBODY): Don't
 define if the headers don't. (gid_substitute, uid_substitute): Look up names
 dynamically if GID_NOBODY and UID_NOBODY aren't defined; use -2 if all else
 fails. (mode_to_chars): Renamed from mode_to_oct. Support negative values in
 all the _to_chars functions. (start_header): Use FILESYSTEM_PREFIX_LEN
 instead of MSDOS ifdef. Abort if archive format is DEFAULT_FORMAT when it
 shouldn't be. (dump_file): Inspect entire pathname, not just new file name
 component, when deciding whether to exclude it.
",329,data/crawl/tar/hunk_422.cpp,,,data/crawl/tar/old_hunk_422.cpp,data/crawl/tar/new_hunk_422.cpp,64,111,"ERROR ((0, 0, _(""%s value %s too large (max=%s)""),
		type, value_string, maxval_string));","ERROR ((0, 0, _(""%s value %s out of range %s..%s""),
		type, value_string, minval_string, maxval_string));","[""updateContent"", ""addVariable""]","[[""too"", ""large"", ""max""], [""out"", ""of"", ""range"", ""%s"", ""minval_string""]]",[7057205987119910068],351,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=203dea13a40bae5c6d2dfa221036babd0e345ffe,14 Aug 1999,"(time): Don't declare if defined. (child_open_for_compress): Undo
 previous change. (close_archive): Use waitpid, POSIX-style, instead of old
 BSD style. (new_volume): Likewise.
",126,data/crawl/tar/hunk_420.cpp,,,data/crawl/tar/old_hunk_420.cpp,data/crawl/tar/new_hunk_420.cpp,23,17,"ERROR ((0, 0, _(""Child died with signal %d%s""),
			WTERMSIG (wait_status),
			WCOREDUMP (wait_status) ? _("" (core dumped)"") : """"));","ERROR ((0, 0, _(""Child died with signal %d""),
		    WTERMSIG (wait_status)));","[""removeVariable"", ""updateContent"", ""removeContent""]","[[""%d%s"", ""WCOREDUMP"", ""wait_status"", ""_"", ""core"", ""dumped""], [""%d""]]",[-16041140083088108176],350,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5e0e027651e89233d4f3c4ca089db72468e31173,16 Aug 1999,"(make_directories): Do not chown intermediate directories, even if we
 are root.
",18,data/crawl/tar/hunk_417.cpp,,,data/crawl/tar/old_hunk_417.cpp,data/crawl/tar/new_hunk_417.cpp,7,-1,"ERROR ((0, errno,
		      _(""%s: Cannot change owner to uid %lu, gid %lu""),
		      file_name,
		      (unsigned long) current_stat.st_uid,
		      (unsigned long) current_stat.st_gid));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""change"", ""owner"", ""to"", ""uid"", ""%lu"", ""gid"", ""%lu"", ""file_name"", ""unsigned"", ""long"", ""current_stat"", ""st_uid"", ""unsigned"", ""long"", ""current_stat"", ""st_gid""], []]",[7577710173187672190],349,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,712,,"fputs(bp[0], out);","[""addLog""]","[[], [""fputs"", ""bp[0]"", ""out""]]",[7111777645923505721],348,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,711,,"fputs(""va_dcl"", out);","[""addLog""]","[[], [""fputs"", ""va_dcl"", ""out""]]",[-6202439204735682583],347,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcde5487eb6a6bc6ff80bc85a54fa94746494350,17 Aug 1999,"Ghostscript 6.0
",720,data/crawl/tar/hunk_414.cpp,,,data/crawl/tar/old_hunk_414.cpp,data/crawl/tar/new_hunk_414.cpp,-1,309,,"fputs(more, out);","[""addLog""]","[[], [""fputs"", ""more"", ""out""]]",[-7686589844068392945],346,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=aa904fd8ec95f5d23db78b3dd81a1f7aeb18035d,23 Aug 1999,"Lint cleanup. (from_chars): Report out-of-range values more
 precisely. (off_from_chars): Do not allow negative offsets. (uid_from_chars):
 Allow negative uids.
",81,data/crawl/tar/hunk_410.cpp,,,data/crawl/tar/old_hunk_410.cpp,data/crawl/tar/new_hunk_410.cpp,5,14,"ERROR ((0, 0, _(""Numeric value `%.*s' is out of range for %s""),
	    (int) digs, where0, type));","ERROR ((0, 0, _(""Archive value %s is out of %s range %s..%s""),
	      value_string, type,
	      minval_string, STRINGIFY_BIGINT (maxval, maxval_buf)));","[""updateVariable"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""Numeric"", ""%"", ""*s"", ""for"", ""int"", ""digs"", ""where0""], [""Archive"", ""%s"", ""%s"", ""%s"", ""value_string"", ""minval_string"", ""STRINGIFY_BIGINT"", ""maxval"", ""maxval_buf""]]",[33362333146169718874],345,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=aa904fd8ec95f5d23db78b3dd81a1f7aeb18035d,23 Aug 1999,"Lint cleanup. (from_chars): Report out-of-range values more
 precisely. (off_from_chars): Do not allow negative offsets. (uid_from_chars):
 Allow negative uids.
",81,data/crawl/tar/hunk_409.cpp,,,data/crawl/tar/old_hunk_409.cpp,data/crawl/tar/new_hunk_409.cpp,2,2,"ERROR ((0, 0,
		  _(""Header contains `%.*s' where numeric %s value expected""),
		  (int) sizeof buf, buf, type));","ERROR ((0, 0,
		  _(""Archive contains `%.*s' where numeric %s value expected""),
		  (int) sizeof buf, buf, type));","[""updateContent""]","[[""Header""], [""Archive""]]",[13444708705634087564],344,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=aa904fd8ec95f5d23db78b3dd81a1f7aeb18035d,23 Aug 1999,"Lint cleanup. (from_chars): Report out-of-range values more
 precisely. (off_from_chars): Do not allow negative offsets. (uid_from_chars):
 Allow negative uids.
",81,data/crawl/tar/hunk_408.cpp,,,data/crawl/tar/old_hunk_408.cpp,data/crawl/tar/new_hunk_408.cpp,-1,4,,"ERROR ((0, 0,
		      _(""Archive signed base 64 string `%.*s' is out of %s range""),
		      (int) digs, where0, type));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Archive"", ""signed"", ""base"", ""64"", ""string"", ""%"", ""*s"", ""is"", ""out"", ""of"", ""%s"", ""range"", ""int"", ""digs"", ""where0"", ""type""]]",[2403197237454442803],343,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=aa904fd8ec95f5d23db78b3dd81a1f7aeb18035d,23 Aug 1999,"Lint cleanup. (from_chars): Report out-of-range values more
 precisely. (off_from_chars): Do not allow negative offsets. (uid_from_chars):
 Allow negative uids.
",81,data/crawl/tar/hunk_407.cpp,,,data/crawl/tar/old_hunk_407.cpp,data/crawl/tar/new_hunk_407.cpp,-1,4,,"ERROR ((0, 0,
		      _(""Archive octal string `%.*s' is out of %s range""),
		      (int) digs, where0, type));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Archive"", ""octal"", ""string"", ""%"", ""*s"", ""is"", ""out"", ""of"", ""%s"", ""range"", ""int"", ""digs"", ""where0"", ""type""]]",[-14133608166196189290],342,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=17e0cd7065a8eb84483788e5abbf06ccf2649fb5,20 Sep 1999,"(<human.h>): Include. (print_total_written): Also print
 human-readable byte count, and bytes/s. (open_archive, flush_write): Use
 start_time, not current time. (flush_read): Report about garbage bytes
 ignored at end of archive, but act on non-garbage bytes (instead of ignoring
 them). (new_volume): Use WARN for warnings.
",101,data/crawl/tar/hunk_403.cpp,,,data/crawl/tar/old_hunk_403.cpp,data/crawl/tar/new_hunk_403.cpp,-1,14,,"ERROR ((0, 0, _(""%d garbage bytes ignored at end of archive""),
		  (int) ((record_size - left) % BLOCKSIZE)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%d"", ""garbage"", ""bytes"", ""ignored"", ""at"", ""end"", ""of"", ""archive"", ""int"", ""record_size"", ""left"", ""%"", ""BLOCKSIZE""]]",[-13523481147192127660],341,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_402.cpp,,,data/crawl/tar/old_hunk_402.cpp,data/crawl/tar/new_hunk_402.cpp,-1,292,,"ERROR ((0, 0,
			    _(""File %s shrunk by %s bytes, padding with zeros""),
			    p, STRINGIFY_BIGINT (sizeleft, buf)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""File"", ""%s"", ""shrunk"", ""by"", ""%s"", ""bytes"", ""padding"", ""with"", ""zeros"", ""p"", ""STRINGIFY_BIGINT"", ""sizeleft"", ""buf""]]",[-11674859578393205061],340,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_402.cpp,,,data/crawl/tar/old_hunk_402.cpp,data/crawl/tar/new_hunk_402.cpp,-1,274,,"ERROR ((0, errno,
			    _(""Read error at byte %s, reading %lu bytes, in file %s""),
			    STRINGIFY_BIGINT (current_stat.st_size - sizeleft,
					      buf),
			    (unsigned long) bufsize, p));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Read"", ""error"", ""at"", ""byte"", ""%s"", ""reading"", ""%lu"", ""bytes"", ""in"", ""file"", ""%s"", ""STRINGIFY_BIGINT"", ""current_stat"", ""st_size"", ""sizeleft"", ""buf"", ""unsigned"", ""long"", ""bufsize"", ""p""]]",[23008032085006326230],339,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_400.cpp,,,data/crawl/tar/old_hunk_400.cpp,data/crawl/tar/new_hunk_400.cpp,346,-1,"ERROR ((0, errno, _(""%s: close""), p));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""close"", ""p""], []]",[-23518771888860101399],338,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_400.cpp,,,data/crawl/tar/old_hunk_400.cpp,data/crawl/tar/new_hunk_400.cpp,344,-1,"ERROR ((0, errno, _(""%s: file changed as we read it""), p));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""file"", ""changed"", ""as"", ""we"", ""read"", ""it"", ""p""], []]",[-2082046952357175080],337,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_400.cpp,,,data/crawl/tar/old_hunk_400.cpp,data/crawl/tar/new_hunk_400.cpp,341,-1,"ERROR ((0, errno, ""%s: fstat"", p));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""%s"", ""fstat"", ""p""], []]",[-12074517764533803997],336,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_400.cpp,,,data/crawl/tar/old_hunk_400.cpp,data/crawl/tar/new_hunk_400.cpp,327,-1,"ERROR ((0, 0,
			_(""File %s shrunk by %s bytes, padding with zeros""),
			p, STRINGIFY_BIGINT (sizeleft, buf)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""File"", ""%s"", ""shrunk"", ""by"", ""%s"", ""bytes"", ""padding"", ""with"", ""zeros"", ""p"", ""STRINGIFY_BIGINT"", ""sizeleft"", ""buf""], []]",[11674859578393205061],335,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0d70f547f3a9ff4a261b82e9b487c3f65b63fadf,21 Sep 1999,"(struct link): Remove unused linkcount member. (base_64_digits): Move
 to list.c. (base_8_digits): Remove. (to_octal): New function, with some of
 old contents of to_base. (to_base): Remove. (to_base256): New function.
 (to_chars): Use base 256, not base 64, for huge values. (mode_to_chars):
 Don't use two's complement in GNU format or POSIX format. (dump_file):
 Interchange last two arguments.  If TOP_LEVEL is negative, it means we have
 an incremental dump where we don't know whether this is a top-level call. Use
 deref_stat instead of statx / stat / lstat. Cast result of alloca. Check for
 dates if 0 < top_level, not if listed_incremental_option. Move multiple-link
 check after directory check. Do not dump avoided names. Dump hard links to
 symbolic names as links, not as separate symbolic links. start_header cannot
 return a null pointer, so don't test for it. Likewise for find_next_block.
",1015,data/crawl/tar/hunk_400.cpp,,,data/crawl/tar/old_hunk_400.cpp,data/crawl/tar/new_hunk_400.cpp,309,-1,"ERROR ((0, errno,
			_(""Read error at byte %s, reading %lu bytes, in file %s""),
			STRINGIFY_BIGINT (current_stat.st_size - sizeleft,
					  buf),
			(unsigned long) bufsize, p));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Read"", ""error"", ""at"", ""byte"", ""%s"", ""reading"", ""%lu"", ""bytes"", ""in"", ""file"", ""%s"", ""STRINGIFY_BIGINT"", ""current_stat"", ""st_size"", ""sizeleft"", ""buf"", ""unsigned"", ""long"", ""bufsize"", ""p""], []]",[-23008032085006326230],334,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e4e624848b53ac02f1212af2209a63d28e40afec,22 Sep 1999,"(time): Declare if not defined. (base_64_digits): Moved here from
 create.c. (base64_map): Use UCHAR_MAX for size, not less-clear (unsigned
 char) -1. (read_and): Don't get time from header unless we need it now; as
 getting time can cause duplicate diagnostics if bogus. Remove ""Hmm, "" from
 diagnostic. Use ""Skipping to next header"" uniformly. (from_header): Renamed
 from from_chars.  All uses changed. Allow different forms for unportable 2's
 complement numbers. Don't check for extended forms when parsing checksums.
 Parse base-256 output. (gid_from_header): Renamed from gid_from_chars.  All
 uses changed. (major_from_header): Renamed from major_from_chars.  All uses
 changed. (minor_from_header): Renamed from minor_from_chars.  All uses
 changed. (mode_from_header): Renamed from mode_from_chars.  All uses changed.
 (off_from_header): Renamed from off_from_chars.  All uses changed.
 (size_from_header): Renamed from size_from_chars.  All uses changed.
 (time_from_header): Renamed from time_from_chars.  All uses changed. Warn
 about future timestamps. (uid_from_header): Renamed from uid_from_chars.  All
 uses changed. (uintmax_from_header): Renamed from uintmax_from_chars.  All
 uses changed. (tartime): New function, incorporating isotime. (isotime):
 Delete. (print_header): Use tartime.
",364,data/crawl/tar/hunk_399.cpp,,,data/crawl/tar/old_hunk_399.cpp,data/crawl/tar/new_hunk_399.cpp,-1,103,,"ERROR ((0, 0,
			  _(""Archive base-256 value is out of %s range""),
			  type));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Archive"", ""base"", ""256"", ""value"", ""is"", ""out"", ""of"", ""%s"", ""range"", ""type""]]",[11894251560491365199],333,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e4e624848b53ac02f1212af2209a63d28e40afec,22 Sep 1999,"(time): Declare if not defined. (base_64_digits): Moved here from
 create.c. (base64_map): Use UCHAR_MAX for size, not less-clear (unsigned
 char) -1. (read_and): Don't get time from header unless we need it now; as
 getting time can cause duplicate diagnostics if bogus. Remove ""Hmm, "" from
 diagnostic. Use ""Skipping to next header"" uniformly. (from_header): Renamed
 from from_chars.  All uses changed. Allow different forms for unportable 2's
 complement numbers. Don't check for extended forms when parsing checksums.
 Parse base-256 output. (gid_from_header): Renamed from gid_from_chars.  All
 uses changed. (major_from_header): Renamed from major_from_chars.  All uses
 changed. (minor_from_header): Renamed from minor_from_chars.  All uses
 changed. (mode_from_header): Renamed from mode_from_chars.  All uses changed.
 (off_from_header): Renamed from off_from_chars.  All uses changed.
 (size_from_header): Renamed from size_from_chars.  All uses changed.
 (time_from_header): Renamed from time_from_chars.  All uses changed. Warn
 about future timestamps. (uid_from_header): Renamed from uid_from_chars.  All
 uses changed. (uintmax_from_header): Renamed from uintmax_from_chars.  All
 uses changed. (tartime): New function, incorporating isotime. (isotime):
 Delete. (print_header): Use tartime.
",364,data/crawl/tar/hunk_399.cpp,,,data/crawl/tar/old_hunk_399.cpp,data/crawl/tar/new_hunk_399.cpp,-1,43,,"ERROR ((0, 0,
		  _(""Archive octal value %.*s is out of %s range""),
		  (int) (where - where1), where1, type));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Archive"", ""octal"", ""value"", ""%"", ""*s"", ""is"", ""out"", ""of"", ""%s"", ""range"", ""int"", ""where"", ""where1"", ""where1"", ""type""]]",[-6721210506121036921],332,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e4e624848b53ac02f1212af2209a63d28e40afec,22 Sep 1999,"(time): Declare if not defined. (base_64_digits): Moved here from
 create.c. (base64_map): Use UCHAR_MAX for size, not less-clear (unsigned
 char) -1. (read_and): Don't get time from header unless we need it now; as
 getting time can cause duplicate diagnostics if bogus. Remove ""Hmm, "" from
 diagnostic. Use ""Skipping to next header"" uniformly. (from_header): Renamed
 from from_chars.  All uses changed. Allow different forms for unportable 2's
 complement numbers. Don't check for extended forms when parsing checksums.
 Parse base-256 output. (gid_from_header): Renamed from gid_from_chars.  All
 uses changed. (major_from_header): Renamed from major_from_chars.  All uses
 changed. (minor_from_header): Renamed from minor_from_chars.  All uses
 changed. (mode_from_header): Renamed from mode_from_chars.  All uses changed.
 (off_from_header): Renamed from off_from_chars.  All uses changed.
 (size_from_header): Renamed from size_from_chars.  All uses changed.
 (time_from_header): Renamed from time_from_chars.  All uses changed. Warn
 about future timestamps. (uid_from_header): Renamed from uid_from_chars.  All
 uses changed. (uintmax_from_header): Renamed from uintmax_from_chars.  All
 uses changed. (tartime): New function, incorporating isotime. (isotime):
 Delete. (print_header): Use tartime.
",364,data/crawl/tar/hunk_399.cpp,,,data/crawl/tar/old_hunk_399.cpp,data/crawl/tar/new_hunk_399.cpp,7,-1,"ERROR ((0, 0,
		      _(""Archive octal string `%.*s' is out of %s range""),
		      (int) digs, where0, type));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Archive"", ""octal"", ""string"", ""%"", ""*s"", ""is"", ""out"", ""of"", ""%s"", ""range"", ""int"", ""digs"", ""where0"", ""type""], []]",[14133608166196189290],331,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e6d8e9279f96aea82cf45faf24c6f3b792e7aae0,24 Sep 1999,"(update_archive): Remove call to name_expand; had no effect. Use
 chdir_do to change into directory. Use deref_stat instead of stat. Use
 add_avoided_name to mark names to be avoided; the old method of setting a bit
 with the name caused all descendants of that name to be avoided, in some
 circumstances.
",16,data/crawl/tar/hunk_397.cpp,,,data/crawl/tar/old_hunk_397.cpp,data/crawl/tar/new_hunk_397.cpp,8,7,"ERROR ((0, errno, _(""Cannot stat %s""), current_file_name));",chdir_do (name->change_dir);,"[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""%s"", ""current_file_name""], [""chdir_do"", ""name"", ""change_dir""]]",[-27114051945744225116],330,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=29929863e80e7c0a2b1485d5ed2c7d492f2a9702,25 Sep 1999,"(write_error): Read error is an error, not just a warning.
",2,data/crawl/tar/hunk_396.cpp,,,data/crawl/tar/old_hunk_396.cpp,data/crawl/tar/new_hunk_396.cpp,-1,3,,"ERROR ((0, errno, _(""Read error on %s""), *archive_name_cursor));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Read"", ""error"", ""on"", ""%s"", ""*archive_name_cursor""]]",[18292522394387899600],329,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f4f13c4705e3436e06ffadb00674a3586e0a4ed7,26 Sep 1999,"Initial revision
",117,data/crawl/tar/hunk_395.cpp,,,data/crawl/tar/old_hunk_395.cpp,data/crawl/tar/new_hunk_395.cpp,-1,72,,"error (xalloc_exit_failure, 0, ""%s"", _(xalloc_msg_memory_exhausted));","[""addLog""]","[[], [""error"", ""xalloc_exit_failure"", ""0"", ""%s"", ""_"", ""xalloc_msg_memory_exhausted""]]",[-1822739142890536808],328,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=cf4065dfe9a5fe2bf7238f58ae33d2f3365344bc,11 Oct 1999,"(decode_options): Invalid dates are now treated as (time_t) -1. Redo
 version message to conform to GNU standards.
",23,data/crawl/tar/hunk_394.cpp,,,data/crawl/tar/old_hunk_394.cpp,data/crawl/tar/new_hunk_394.cpp,12,-1,"fputs (_(""\
\n\
Written by John Gilmore and Jay Fenlason.\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Written"", ""by"", ""John"", ""Gilmore"", ""and"", ""Jay"", ""Fenlason"", ""\\n"", ""stdout""], []]",[13740149097463209981],327,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=cf4065dfe9a5fe2bf7238f58ae33d2f3365344bc,11 Oct 1999,"(decode_options): Invalid dates are now treated as (time_t) -1. Redo
 version message to conform to GNU standards.
",23,data/crawl/tar/hunk_394.cpp,,,data/crawl/tar/old_hunk_394.cpp,data/crawl/tar/new_hunk_394.cpp,8,-1,"fputs (_(""\
This is free software; see the source for copying conditions.  There is NO\n\
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""This"", ""is"", ""free"", ""software"", ""see"", ""the"", ""source"", ""for"", ""copying"", ""conditions"", ""There"", ""is"", ""NO\\n\\"", ""warranty"", ""not"", ""even"", ""for"", ""MERCHANTABILITY"", ""or"", ""FITNESS"", ""FOR"", ""A"", ""PARTICULAR"", ""PURPOSE"", ""\\n"", ""stdout""], []]",[-6248968462278530505],326,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=cf4065dfe9a5fe2bf7238f58ae33d2f3365344bc,11 Oct 1999,"(decode_options): Invalid dates are now treated as (time_t) -1. Redo
 version message to conform to GNU standards.
",23,data/crawl/tar/hunk_394.cpp,,,data/crawl/tar/old_hunk_394.cpp,data/crawl/tar/new_hunk_394.cpp,4,-1,"fputs (_(""\
\n\
Copyright 1988, 92,93,94,95,96,97,98, 1999 Free Software Foundation, Inc.\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Copyright"", ""1988"", ""92"", ""93"", ""94"", ""95"", ""96"", ""97"", ""98"", ""1999"", ""Free"", ""Software"", ""Foundation"", ""Inc"", ""\\n"", ""stdout""], []]",[10257547358410610303],325,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=7be178a4d4c884e0ddd27ce93e04a00411f4332a,7 Nov 1999,"(set_stat): Remove duplicate code.
",31,data/crawl/tar/hunk_392.cpp,,,data/crawl/tar/old_hunk_392.cpp,data/crawl/tar/new_hunk_392.cpp,10,-1,"ERROR ((0, errno, _(""%s: Cannot chown to uid %lu gid %lu""),
		  file_name,
		  (unsigned long) stat_info->st_uid,
		  (unsigned long) stat_info->st_gid));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""chown"", ""to"", ""uid"", ""%lu"", ""gid"", ""%lu"", ""file_name"", ""unsigned"", ""long"", ""stat_info"", ""st_uid"", ""unsigned"", ""long"", ""stat_info"", ""st_gid""], []]",[-1796331662997747566],324,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=02519e55752f86d85a03643332a0bdd0850c265c,7 Nov 1999,"Include getopt.h. (long_opts): New constant. (usage): New function.
 (main): Implement --help and --version. Output usage message if arguments are
 bad.
",59,data/crawl/tar/hunk_390.cpp,,,data/crawl/tar/old_hunk_390.cpp,data/crawl/tar/new_hunk_390.cpp,-1,25,,"fputs (_(""\nReport bugs to <bug-tar@gnu.org>.\n""), stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\nReport"", ""bugs"", ""to"", ""bug"", ""tar"", ""gnu"", ""org"", ""\\n"", ""stdout""]]",[-22035759482699732373],323,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3495d84e27c42c0619daf43c2b546d35e3ecbba6,3 Dec 1999,"(dump_file): Do not diagnose a file that the parent directory said
 should be there, but is absent.  It was probably removed between then and
 now. Do not pass meaningless errno to ERROR when reporting that the file
 changed as we read it.
",19,data/crawl/tar/hunk_387.cpp,,,data/crawl/tar/old_hunk_387.cpp,data/crawl/tar/new_hunk_387.cpp,3,3,"ERROR ((0, errno, _(""%s: file changed as we read it""), p));","ERROR ((0, 0, _(""%s: file changed as we read it""), p));","[""removeVariable"", ""addContent""]","[[""errno""], [""0""]]",[-8285138778856361720],322,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=196caec187f27a3c3e4a68eee6bb388d79dac960,13 Dec 1999,"(xclose, xdup2, child_open_for_compress, child_open_for_uncompress,
 archive_write_error, archive_read_error, flush_archive, close_archive,
 init_volume_number, new_volume): Don't assume that gettext preserves errno.

(xdup2): Don't report errno if dup returns an unexpected nonnegative value.
(open_archive): Reject multivolume verify attempts a bit earlier.
Rename local variable `access', in case it's defined by system header.

(open_archive, backspace_output): Use `Cannot' uniformly, instead of
`Could not' sometimes and `Cannot' others.

(open_archive, flush_read, flush_archive, close_archive, new_volume):
Quote arbitrary strings in diagnostics.

(read_error): Set archive to STDOUT_FILENO temporarily when writing
archive buffer.

(init_volume_number): Check for input and output errors in volno_file.

(new_volume): Use new fatal_exit function to exit, and new xfork
function to fork.",292,data/crawl/tar/hunk_386.cpp,,,data/crawl/tar/old_hunk_386.cpp,data/crawl/tar/new_hunk_386.cpp,27,-1,"ERROR ((0, errno,
				      _(""While waiting for child"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""While"", ""waiting"", ""for"", ""child""], []]",[-9697808245548899792],321,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=196caec187f27a3c3e4a68eee6bb388d79dac960,13 Dec 1999,"(xclose, xdup2, child_open_for_compress, child_open_for_uncompress,
 archive_write_error, archive_read_error, flush_archive, close_archive,
 init_volume_number, new_volume): Don't assume that gettext preserves errno.

(xdup2): Don't report errno if dup returns an unexpected nonnegative value.
(open_archive): Reject multivolume verify attempts a bit earlier.
Rename local variable `access', in case it's defined by system header.

(open_archive, backspace_output): Use `Cannot' uniformly, instead of
`Could not' sometimes and `Cannot' others.

(open_archive, flush_read, flush_archive, close_archive, new_volume):
Quote arbitrary strings in diagnostics.

(read_error): Set archive to STDOUT_FILENO temporarily when writing
archive buffer.

(init_volume_number): Check for input and output errors in volno_file.

(new_volume): Use new fatal_exit function to exit, and new xfork
function to fork.",292,data/crawl/tar/hunk_385.cpp,,,data/crawl/tar/old_hunk_385.cpp,data/crawl/tar/new_hunk_385.cpp,4,4,"ERROR ((0, errno, ""%s"", volno_file_option));",write_error (volno_file_option);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""%s""], [""write_error""]]",[-17333372517689503030],320,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=196caec187f27a3c3e4a68eee6bb388d79dac960,13 Dec 1999,"(xclose, xdup2, child_open_for_compress, child_open_for_uncompress,
 archive_write_error, archive_read_error, flush_archive, close_archive,
 init_volume_number, new_volume): Don't assume that gettext preserves errno.

(xdup2): Don't report errno if dup returns an unexpected nonnegative value.
(open_archive): Reject multivolume verify attempts a bit earlier.
Rename local variable `access', in case it's defined by system header.

(open_archive, backspace_output): Use `Cannot' uniformly, instead of
`Could not' sometimes and `Cannot' others.

(open_archive, flush_read, flush_archive, close_archive, new_volume):
Quote arbitrary strings in diagnostics.

(read_error): Set archive to STDOUT_FILENO temporarily when writing
archive buffer.

(init_volume_number): Check for input and output errors in volno_file.

(new_volume): Use new fatal_exit function to exit, and new xfork
function to fork.",292,data/crawl/tar/hunk_383.cpp,,,data/crawl/tar/old_hunk_383.cpp,data/crawl/tar/new_hunk_383.cpp,3,3,"ERROR ((0, errno, _(""While waiting for child"")));",waitpid_error (use_compress_program_option);,"[""updateVariable"", ""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""While"", ""waiting"", ""for"", ""child""], [""waitpid_error"", ""use_compress_program_option""]]",[-21369019089844239376],319,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=196caec187f27a3c3e4a68eee6bb388d79dac960,13 Dec 1999,"(xclose, xdup2, child_open_for_compress, child_open_for_uncompress,
 archive_write_error, archive_read_error, flush_archive, close_archive,
 init_volume_number, new_volume): Don't assume that gettext preserves errno.

(xdup2): Don't report errno if dup returns an unexpected nonnegative value.
(open_archive): Reject multivolume verify attempts a bit earlier.
Rename local variable `access', in case it's defined by system header.

(open_archive, backspace_output): Use `Cannot' uniformly, instead of
`Could not' sometimes and `Cannot' others.

(open_archive, flush_read, flush_archive, close_archive, new_volume):
Quote arbitrary strings in diagnostics.

(read_error): Set archive to STDOUT_FILENO temporarily when writing
archive buffer.

(init_volume_number): Check for input and output errors in volno_file.

(new_volume): Use new fatal_exit function to exit, and new xfork
function to fork.",292,data/crawl/tar/hunk_382.cpp,,,data/crawl/tar/old_hunk_382.cpp,data/crawl/tar/new_hunk_382.cpp,5,5,"ERROR ((0, errno, _(""Read error on %s""), *archive_name_cursor));",read_error (*archive_name_cursor);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Read"", ""error"", ""on"", ""%s""], [""read_error""]]",[-24962606717153307104],318,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_379.cpp,,,data/crawl/tar/old_hunk_379.cpp,data/crawl/tar/new_hunk_379.cpp,7,7,"ERROR ((0, errno, _(""%s: close""), p));",close_error (p);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""close""], [""close_error""]]",[-22480107256330489290],317,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_379.cpp,,,data/crawl/tar/old_hunk_379.cpp,data/crawl/tar/new_hunk_379.cpp,3,3,"ERROR ((0, errno, ""%s: fstat"", p));",stat_error (p);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""%s"", ""fstat""], [""stat_error""]]",[-16262959913343864149],316,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ed7e2ec8a334cc534db981fe2fd0e02b3d39bf62,13 Dec 1999,"(<quotearg.h>): New include. (start_header): Use `member names' to
 refer to archive member names, not `archive names'.  Warn about `..' in
 member names. (finish_sparse_file, dump_file): Quote arbitrary strings in
 diagnostics. (finish_sparse_file, dump_file): Don't assume that gettext
 preserves errno. (dump_file): Don't use `access' to determine whether a
 directory is readable; this isn't reliable if tar is setuid.  Use `opendir'
 instead. Check for readdir and closedir failures. Don't dump sockets as if
 they were fifos; just warn and skip.
",148,data/crawl/tar/hunk_375.cpp,,,data/crawl/tar/old_hunk_375.cpp,data/crawl/tar/new_hunk_375.cpp,14,-1,"ERROR ((0, errno, _(""Cannot open directory %s""), p));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""open"", ""directory"", ""%s"", ""p""], []]",[-16795245255188114917],315,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_368.cpp,,,data/crawl/tar/old_hunk_368.cpp,data/crawl/tar/new_hunk_368.cpp,-1,33,,"ERROR ((0, e, ""%s: mkdir"", quotearg_colon (CURRENT_FILE_NAME)));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""%s"", ""mkdir"", ""quotearg_colon"", ""CURRENT_FILE_NAME""]]",[8882723359151747515],314,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_368.cpp,,,data/crawl/tar/old_hunk_368.cpp,data/crawl/tar/new_hunk_368.cpp,54,-1,"ERROR ((0, errno, _(""%s: Could not create directory""),
		  CURRENT_FILE_NAME));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""create"", ""directory"", ""CURRENT_FILE_NAME""], []]",[-30974558987895748932],313,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_367.cpp,,,data/crawl/tar/old_hunk_367.cpp,data/crawl/tar/new_hunk_367.cpp,42,-1,"ERROR ((0, errno, _(""%s: Could not make fifo""), CURRENT_FILE_NAME));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""make"", ""fifo"", ""CURRENT_FILE_NAME""], []]",[-27540423212223593434],312,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_367.cpp,,,data/crawl/tar/old_hunk_367.cpp,data/crawl/tar/new_hunk_367.cpp,16,10,"ERROR ((0, errno, _(""%s: Could not make node""), CURRENT_FILE_NAME));","(maybe_recoverable (CURRENT_FILE_NAME, &interdir_made);","[""updateVariable"", ""moveVariable"", ""removeVariable"", ""removeContent"", ""addVariable"", ""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""make"", ""node""], [""maybe_recoverable"", ""&interdir_made""]]",[-10226676872019424136],311,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_364.cpp,,,data/crawl/tar/old_hunk_364.cpp,data/crawl/tar/new_hunk_364.cpp,3,3,"ERROR ((0, errno, _(""%s: Error while closing""), CURRENT_FILE_NAME));",close_error (CURRENT_FILE_NAME);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Error"", ""while"", ""closing""], [""close_error""]]",[-22481368143256976788],310,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_362.cpp,,,data/crawl/tar/old_hunk_362.cpp,data/crawl/tar/new_hunk_362.cpp,12,9,"ERROR ((0, errno, _(""%s: Could not create file""),
		  CURRENT_FILE_NAME));","(maybe_recoverable (CURRENT_FILE_NAME, &interdir_made);","[""updateVariable"", ""moveVariable"", ""removeVariable"", ""removeContent"", ""addVariable"", ""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Could"", ""not"", ""create"", ""file""], [""maybe_recoverable"", ""&interdir_made""]]",[-15466089273674902238],309,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_360.cpp,,,data/crawl/tar/old_hunk_360.cpp,data/crawl/tar/new_hunk_360.cpp,-1,19,,"ERROR ((0, 0, _(""%s: Member name contains `..'""),
		  quotearg_colon (CURRENT_FILE_NAME)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Member"", ""name"", ""contains"", ""quotearg_colon"", ""CURRENT_FILE_NAME""]]",[15938527101858270970],308,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_355.cpp,,,data/crawl/tar/old_hunk_355.cpp,data/crawl/tar/new_hunk_355.cpp,-1,110,,"ERROR ((0, 0, _(""Unexpected inconsistency when making directory %s""),
	  quote (dir_name)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""inconsistency"", ""when"", ""making"", ""directory"", ""%s"", ""quote"", ""dir_name""]]",[-17145441837569945027],307,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_355.cpp,,,data/crawl/tar/old_hunk_355.cpp,data/crawl/tar/new_hunk_355.cpp,3,5,"ERROR ((0, errno,
		    _(""%s: Could not change access and modification times""),
		    file_name));","ERROR ((0, e,
		      _(""%s: Cannot change access and modification times""),
		      quotearg_colon (file_name)));","[""updateVariable"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""errno"", ""Could"", ""not""], [""e"", ""Cannot"", ""quotearg_colon""]]",[-24122227333152973410],306,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=6e9d1539b665c8f3c173b36702ca1650cac977ad,13 Dec 1999,"(<quotearg.h>): New include. (enum permstatus): New enum. (struct
 delayed_set_stat): file_name is now at end of buffer, to avoid two mallocs. 
 New members file_name_len, invert_permissions, permstatus. (extr_init):
 Remove hack that silently adjusted newdir_umask. (set_mode, set_stat): New
 args invert_permissions, permstatus, typeflag. Use these args to decide
 whether and how to set modes. (set_mode, set_stat, prepare_to_extract,
 extract_sparse_file, extract_archive): Don't assume that gettext preserves
 errno. (set_stat): Remove arg symlink_flag; subsumed by typeflag.
 (delay_set_stat, repair_delayed_set_stat): New functions. (make_directories):
 Avoid mkdir where last part of path is "".."". Create a struct delayed_set_stat
 for each directory made. (prepare_to_extract): Renamed from
 unlink_destination, and return 0 immediately if to_stdout_option; all callers
 changed. (maybe_recoverable): New parameter interdir_made. Add support for
 --overwrite. (extract_sparse_file, extract_archive): Quote arbitrary strings
 in diagnostics. (extract_archive): By default, warn about "".."" in member
 names, and skip them. Don't open files with O_NONBLOCK or O_APPEND. Open with
 O_TRUNC only if --overwrite; otherwise, use O_EXCL to avoid overwriting them.
  Pass only rwxrwxrwx permissions to `open' and `mkdir', minus the current
 umask.  Keep track of intermediate directories made, to avoid looping when
 making x/../x when x doesn't exist; the earlier code solved this in a
 different way that didn't fit well into the new scheme.  Don't extract
 permissions onto existing directories unless --overwrite is given.  Do not
 add -wx------ permissions to new directories permanently; just do it
 temporarily. Remove no-longer-needed hack with MSDOS and directory time
 stamps. (apply_delayed_set_stat): New argument specifies which directories to
 fix statuses of.  Do not wait until the end of extraction to fix statuses;
 instead, fix a directory's status once we exit that directory. This requires
 less memory and does the right thing in some cases where the old method
 didn't. (fatal_exit): New function.
",600,data/crawl/tar/hunk_354.cpp,,,data/crawl/tar/old_hunk_354.cpp,data/crawl/tar/new_hunk_354.cpp,32,54,"ERROR ((0, errno, _(""%s: Cannot change mode to %04lo""),
	      file_name,
	      (unsigned long) (~current_umask & stat_info->st_mode)));","ERROR ((0, e, _(""%s: Cannot change mode to %04lo""),
	      quotearg_colon (file_name), (unsigned long) mode));","[""updateVariable"", ""moveVariable"", ""removeVariable"", ""addVariable""]","[[""errno"", ""current_umask"", ""&"", ""stat_info"", ""st_mode""], [""e"", ""quotearg_colon"", ""mode""]]",[-14277128503875305357],305,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f0429c4a22e5b19eefbdbc684e9e175a1cca9a3e,13 Dec 1999,"(<quotearg.h>): New include. (name_init, name_next, name_close,
 names_notfound, collect_and_sort_names): Don't assume that gettext preserves
 errno. Quote arbitrary strings in diagnostics. (excluded_name): Fix typo that
 caused empty patterns to be mishandled.
",20,data/crawl/tar/hunk_350.cpp,,,data/crawl/tar/old_hunk_350.cpp,data/crawl/tar/new_hunk_350.cpp,4,4,"ERROR ((0, errno, ""%s"", name_buffer));",close_error (name_buffer);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""%s""], [""close_error""]]",[-15536348986403252819],304,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a78ab36e1e4d7dccedaf7d1fcbaca6bb6ec0eed6,13 Dec 1999,"(<quotearg.h>): New include. (append_file): Don't assume that gettext
 preserves errno. Quote arbitrary strings in diagnostics. Check for close
 error.
",24,data/crawl/tar/hunk_347.cpp,,,data/crawl/tar/old_hunk_347.cpp,data/crawl/tar/new_hunk_347.cpp,3,3,"ERROR ((0, errno, _(""Cannot open file %s""), path));",open_error (path);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""open"", ""file"", ""%s""], [""open_error""]]",[-14706568635942813057],303,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_344.cpp,,,data/crawl/tar/old_hunk_344.cpp,data/crawl/tar/new_hunk_344.cpp,4,-1,"ERROR ((0, e, ""%s: mkdir"", quotearg_colon (CURRENT_FILE_NAME)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""%s"", ""mkdir"", ""quotearg_colon"", ""CURRENT_FILE_NAME""], []]",[-8882723359151747515],302,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_343.cpp,,,data/crawl/tar/old_hunk_343.cpp,data/crawl/tar/new_hunk_343.cpp,6,-1,"ERROR ((0, 0, _(""%s: Could only write %lu of %lu bytes""),
		      quotearg_colon (CURRENT_FILE_NAME),
		      (unsigned long) sstatus,
		      (unsigned long) written));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Could"", ""only"", ""write"", ""%lu"", ""of"", ""%lu"", ""bytes"", ""quotearg_colon"", ""CURRENT_FILE_NAME"", ""unsigned"", ""long"", ""sstatus"", ""unsigned"", ""long"", ""written""], []]",[-19452418083100952767],301,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_340.cpp,,,data/crawl/tar/old_hunk_340.cpp,data/crawl/tar/new_hunk_340.cpp,5,-1,"ERROR ((0, 0, _(""%s: Could only write %s of %s bytes""),
		  quotearg_colon (name),
		  STRINGIFY_BIGINT (totalsize - *sizeleft, buf1),
		  STRINGIFY_BIGINT (totalsize, buf2)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Could"", ""only"", ""write"", ""%s"", ""of"", ""%s"", ""bytes"", ""quotearg_colon"", ""name"", ""STRINGIFY_BIGINT"", ""totalsize"", ""*sizeleft"", ""buf1"", ""STRINGIFY_BIGINT"", ""totalsize"", ""buf2""], []]",[-11317651418592190469],300,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_338.cpp,,,data/crawl/tar/old_hunk_338.cpp,data/crawl/tar/new_hunk_338.cpp,10,-1,"ERROR ((0, e, _(""%s: lseek error at byte %s""),
		  quotearg_colon (name),
		  STRINGIFY_BIGINT (sparsearray[sparse_ind].offset, buf)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""lseek"", ""error"", ""at"", ""byte"", ""%s"", ""quotearg_colon"", ""name"", ""STRINGIFY_BIGINT"", ""sparsearray[sparse_ind]"", ""offset"", ""buf""], []]",[-8446835654610950492],299,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_336.cpp,,,data/crawl/tar/old_hunk_336.cpp,data/crawl/tar/new_hunk_336.cpp,17,10,"ERROR ((0, e, _(""%s: Cannot chown to uid %lu gid %lu""),
		      quotearg_colon (file_name),
		      (unsigned long) stat_info->st_uid,
		      (unsigned long) stat_info->st_gid));","chown_error_details (file_name,
				 stat_info->st_uid, stat_info->st_gid);","[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""chown"", ""to"", ""uid"", ""%lu"", ""gid"", ""%lu"", ""quotearg_colon"", ""unsigned"", ""long"", ""unsigned"", ""long""], [""chown_error_details""]]",[15371953009161684728],298,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_336.cpp,,,data/crawl/tar/old_hunk_336.cpp,data/crawl/tar/new_hunk_336.cpp,5,3,"ERROR ((0, e, _(""%s: Cannot lchown to uid %lu gid %lu""),
		      quotearg_colon (file_name),
		      (unsigned long) stat_info->st_uid,
		      (unsigned long) stat_info->st_gid));","chown_error_details (file_name,
				 stat_info->st_uid, stat_info->st_gid);","[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""lchown"", ""to"", ""uid"", ""%lu"", ""gid"", ""%lu"", ""quotearg_colon"", ""unsigned"", ""long"", ""unsigned"", ""long""], [""chown_error_details""]]",[20895789039228346549],297,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_335.cpp,,,data/crawl/tar/old_hunk_335.cpp,data/crawl/tar/new_hunk_335.cpp,5,-1,"ERROR ((0, e,
		      _(""%s: Cannot change access and modification times""),
		      quotearg_colon (file_name)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""change"", ""access"", ""and"", ""modification"", ""times"", ""quotearg_colon"", ""file_name""], []]",[29237338616640237013],296,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=53f16a59713b32843f27332dbe807c06c7fc34bf,7 Jan 2000,"(extr_init): If we run out of memory, invoke apply_delayed_set_stat.
 (set_mode): Use Use error message functions to report errors consistently.
 (set_stat): Likewise. (repair_delayed_set_stat): Quote file names with colons
 if possible. (prepare_to_extract): Don't complain if we can't remove ""."".
 (extract_sparse_file): Use consistent message for unexpected EOF. Use error
 message functions to report errors consistently. (extract_archive): Use
 consistent message for unexpected EOF. Use error message functions to report
 errors consistently. Quote file names with colons if possible.
 (apply_delayed_set_stat): New function. (apply_nonancestor_delayed_set_stat):
 Renamed from apply_delayed_set_stat. Don't remove head if it doesn't apply.
 (fatal_exit): Invoke apply_delayed_set_stat with no args.
",94,data/crawl/tar/hunk_334.cpp,,,data/crawl/tar/old_hunk_334.cpp,data/crawl/tar/new_hunk_334.cpp,5,-1,"ERROR ((0, e, _(""%s: Cannot change mode to %04lo""),
	      quotearg_colon (file_name), (unsigned long) mode));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""change"", ""mode"", ""to"", ""%04lo"", ""quotearg_colon"", ""file_name"", ""unsigned"", ""long"", ""mode""], []]",[23310977740166896135],295,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f2b8b4a42da21d48aff58aa2993fd64852844f8a,7 Jan 2000,"(extract_mangle): Use xalloc_die to report memory exhaustion. Quote
 file names with colons if possible.
",10,data/crawl/tar/hunk_333.cpp,,,data/crawl/tar/old_hunk_333.cpp,data/crawl/tar/new_hunk_333.cpp,3,3,"ERROR ((0, errno, _(""Cannot symlink %s to %s""),
		    name, name_end + 4));","ERROR ((0, errno, _(""%s: Cannot symlink %s %s""),
		    quotearg_colon (name), quote_n (1, name_end + 4)));","[""moveContent"", ""moveVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[""to""], [""%s"", ""quotearg_colon"", ""quote_n"", ""1""]]",[-3388286983028465465],294,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f2b8b4a42da21d48aff58aa2993fd64852844f8a,7 Jan 2000,"(extract_mangle): Use xalloc_die to report memory exhaustion. Quote
 file names with colons if possible.
",10,data/crawl/tar/hunk_332.cpp,,,data/crawl/tar/old_hunk_332.cpp,data/crawl/tar/new_hunk_332.cpp,3,3,"ERROR ((0, errno, _(""Cannot rename %s to %s""), name, name_end + 4));","ERROR ((0, errno, _(""%s: Cannot rename to %s""),
		    quotearg_colon (name), quote_n (1, name_end + 4)));","[""moveContent"", ""moveVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[], [""quotearg_colon"", ""quote_n"", ""1""]]",[-3378174922277374310],293,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f74454cb37c715674796f21a2fd75eb0a5a34002,7 Jan 2000,"(find_new_file_size): Return size instead of storing through pointer.
 All callers changed. (deal_with_sparse): Don't keep reading after read
 errors. (finish_sparse_file): Just abort if there is an internal error. Use
 error message functions to report errors consistently. (dump_file): Fix typo:
 stat_warn and stat_error were interchanged. Quote file names with colons if
 possible. Don't restore access times on directories during incremental dumps
 until after dealing with the directory. If ignoring failed reads, count
 closedir errors as warnings, not errors. Fix buffer overrun problem when
 dumping sparse files. If ignoring failed reads, count read errors as
 warnings, not errors. Use error message functions to report errors
 consistently. If ignoring failed reads, count unknown files as warnings, not
 errors.
",236,data/crawl/tar/hunk_330.cpp,,,data/crawl/tar/old_hunk_330.cpp,data/crawl/tar/new_hunk_330.cpp,5,12,"ERROR ((0, 0, _(""File %s changed as we read it""), quote (p)));","_(""%s: file changed as we read it"");","[""removeVariable"", ""updateContent"", ""removeContent"", ""removeLog""]","[[""ERROR"", ""0"", ""0"", ""File"", ""quote"", ""p""], [""file""]]",[-7831312462269710867],292,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f74454cb37c715674796f21a2fd75eb0a5a34002,7 Jan 2000,"(find_new_file_size): Return size instead of storing through pointer.
 All callers changed. (deal_with_sparse): Don't keep reading after read
 errors. (finish_sparse_file): Just abort if there is an internal error. Use
 error message functions to report errors consistently. (dump_file): Fix typo:
 stat_warn and stat_error were interchanged. Quote file names with colons if
 possible. Don't restore access times on directories during incremental dumps
 until after dealing with the directory. If ignoring failed reads, count
 closedir errors as warnings, not errors. Fix buffer overrun problem when
 dumping sparse files. If ignoring failed reads, count read errors as
 warnings, not errors. Use error message functions to report errors
 consistently. If ignoring failed reads, count unknown files as warnings, not
 errors.
",236,data/crawl/tar/hunk_329.cpp,,,data/crawl/tar/old_hunk_329.cpp,data/crawl/tar/new_hunk_329.cpp,3,3,"ERROR ((0, 0,
			    _(""File %s shrunk by %s bytes, padding with zeros""),
			    quote (p), STRINGIFY_BIGINT (sizeleft, buf)));","WARN ((0, 0,
			   _(""%s: File shrank by %s bytes; padding with zeros""),
			   quotearg_colon (p),
			   STRINGIFY_BIGINT (sizeleft, buf)));","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""ERROR"", ""shrunk"", ""quote""], [""WARN"", ""shrank"", ""quotearg_colon""]]",[-13022204942767731122],291,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f74454cb37c715674796f21a2fd75eb0a5a34002,7 Jan 2000,"(find_new_file_size): Return size instead of storing through pointer.
 All callers changed. (deal_with_sparse): Don't keep reading after read
 errors. (finish_sparse_file): Just abort if there is an internal error. Use
 error message functions to report errors consistently. (dump_file): Fix typo:
 stat_warn and stat_error were interchanged. Quote file names with colons if
 possible. Don't restore access times on directories during incremental dumps
 until after dealing with the directory. If ignoring failed reads, count
 closedir errors as warnings, not errors. Fix buffer overrun problem when
 dumping sparse files. If ignoring failed reads, count read errors as
 warnings, not errors. Use error message functions to report errors
 consistently. If ignoring failed reads, count unknown files as warnings, not
 errors.
",236,data/crawl/tar/hunk_328.cpp,,,data/crawl/tar/old_hunk_328.cpp,data/crawl/tar/new_hunk_328.cpp,5,-1,"ERROR ((0, e,
			    _(""Read error at byte %s, reading %lu bytes, in file %s""),
			    STRINGIFY_BIGINT (current_stat.st_size - sizeleft,
					      buf),
			    (unsigned long) bufsize, quote (p)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""Read"", ""error"", ""at"", ""byte"", ""%s"", ""reading"", ""%lu"", ""bytes"", ""in"", ""file"", ""%s"", ""STRINGIFY_BIGINT"", ""current_stat"", ""st_size"", ""sizeleft"", ""buf"", ""unsigned"", ""long"", ""bufsize"", ""quote"", ""p""], []]",[-14269066963580235354],290,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f74454cb37c715674796f21a2fd75eb0a5a34002,7 Jan 2000,"(find_new_file_size): Return size instead of storing through pointer.
 All callers changed. (deal_with_sparse): Don't keep reading after read
 errors. (finish_sparse_file): Just abort if there is an internal error. Use
 error message functions to report errors consistently. (dump_file): Fix typo:
 stat_warn and stat_error were interchanged. Quote file names with colons if
 possible. Don't restore access times on directories during incremental dumps
 until after dealing with the directory. If ignoring failed reads, count
 closedir errors as warnings, not errors. Fix buffer overrun problem when
 dumping sparse files. If ignoring failed reads, count read errors as
 warnings, not errors. Use error message functions to report errors
 consistently. If ignoring failed reads, count unknown files as warnings, not
 errors.
",236,data/crawl/tar/hunk_325.cpp,,,data/crawl/tar/old_hunk_325.cpp,data/crawl/tar/new_hunk_325.cpp,27,-1,"ERROR ((0, e, _(""lseek error at byte %s in file %s""),
		  STRINGIFY_BIGINT (sparsearray[sparse_index - 1].offset,
				    buf),
		  quote (name)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""lseek"", ""error"", ""at"", ""byte"", ""%s"", ""in"", ""file"", ""%s"", ""STRINGIFY_BIGINT"", ""sparsearray[sparse_index"", ""1]"", ""offset"", ""buf"", ""quote"", ""name""], []]",[-3928358770652533537],289,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f74454cb37c715674796f21a2fd75eb0a5a34002,7 Jan 2000,"(find_new_file_size): Return size instead of storing through pointer.
 All callers changed. (deal_with_sparse): Don't keep reading after read
 errors. (finish_sparse_file): Just abort if there is an internal error. Use
 error message functions to report errors consistently. (dump_file): Fix typo:
 stat_warn and stat_error were interchanged. Quote file names with colons if
 possible. Don't restore access times on directories during incremental dumps
 until after dealing with the directory. If ignoring failed reads, count
 closedir errors as warnings, not errors. Fix buffer overrun problem when
 dumping sparse files. If ignoring failed reads, count read errors as
 warnings, not errors. Use error message functions to report errors
 consistently. If ignoring failed reads, count unknown files as warnings, not
 errors.
",236,data/crawl/tar/hunk_325.cpp,,,data/crawl/tar/old_hunk_325.cpp,data/crawl/tar/new_hunk_325.cpp,17,12,"ERROR ((0, 0, _(""Wrote %s of %s bytes to file %s""),
		  STRINGIFY_BIGINT (fullsize - *sizeleft, buf1),
		  STRINGIFY_BIGINT (fullsize, buf2), quote (name)));",abort ();,"[""addLog"", ""removeVariable"", ""removeContent"", ""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Wrote"", ""%s"", ""of"", ""%s"", ""bytes"", ""to"", ""file"", ""%s"", ""STRINGIFY_BIGINT"", ""fullsize"", ""*sizeleft"", ""buf1"", ""STRINGIFY_BIGINT"", ""fullsize"", ""buf2"", ""quote"", ""name""], [""abort""]]",[-9231236047483215786],288,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c18999bad51b56995a293cb4d6936315b5a6bdff,7 Jan 2000,"(read_and): Invoke apply_nonancestor_delayed_set_stat on file names
 after handling them. (list_archive): Use consistent message for unexpected
 EOF. Use error message functions to report errors consistently.
 (read_header): Use xalloc_die to report memory exhaustion. Use consistent
 message for unexpected EOF. (decode_mode): Remove; moved to misc.c.
 (skip_file): Use consistent message for unexpected EOF.
 (skip_extended_headers): Likewise.
",95,data/crawl/tar/hunk_323.cpp,,,data/crawl/tar/old_hunk_323.cpp,data/crawl/tar/new_hunk_323.cpp,4,-1,"ERROR ((0, e, _(""Only wrote %lu of %lu bytes to file %s""),
		      (unsigned long) check,
		      (unsigned long) written, quote (current_file_name)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""Only"", ""wrote"", ""%lu"", ""of"", ""%lu"", ""bytes"", ""to"", ""file"", ""%s"", ""unsigned"", ""long"", ""check"", ""unsigned"", ""long"", ""written"", ""quote"", ""current_file_name""], []]",[-6049363644391088691],287,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c18999bad51b56995a293cb4d6936315b5a6bdff,7 Jan 2000,"(read_and): Invoke apply_nonancestor_delayed_set_stat on file names
 after handling them. (list_archive): Use consistent message for unexpected
 EOF. Use error message functions to report errors consistently.
 (read_header): Use xalloc_die to report memory exhaustion. Use consistent
 message for unexpected EOF. (decode_mode): Remove; moved to misc.c.
 (skip_file): Use consistent message for unexpected EOF.
 (skip_extended_headers): Likewise.
",95,data/crawl/tar/hunk_322.cpp,,,data/crawl/tar/old_hunk_322.cpp,data/crawl/tar/new_hunk_322.cpp,3,3,"ERROR ((0, 0, _(""EOF in archive file"")));","ERROR ((0, 0, _(""Unexpected EOF in archive"")));","[""updateContent""]","[[""file""], [""Unexpected""]]",[-7187025320642152211],286,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8a098729c0f4f39b2acb9a45de1a56fe383a2a86,24 Oct 2000,"(extract_mangle): Fix diagnostic with wrong number of %s'es.
",11,data/crawl/tar/hunk_320.cpp,,,data/crawl/tar/old_hunk_320.cpp,data/crawl/tar/new_hunk_320.cpp,3,3,"ERROR ((0, errno, _(""%s: Cannot symlink %s %s""),
		    quotearg_colon (name), quote_n (1, name_end + 4)));","ERROR ((0, errno, _(""%s: Cannot symlink to %s""),
		    quotearg_colon (name), quote_n (1, name_end + 4)));","[""updateContent""]","[[""%s""], [""to""]]",[10112060751091155],285,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e89bcb7fb33d6bae6db577bd8c6fe4599c5e2288,24 Oct 2000,"(we_are_root): Now global. (struct delayed_symlink): New type.
 (delayed_symlink_head): New var. (extr_init, fatal_exit): Invoke
 extract_finish on fatal errors, not apply_delayed_set_stat. (set_mode,
 set_stat): Pointer args are now const pointers. (check_time): New function.
 (set_stat): Warn if setting a file's timestamp to be the future.
 (make_directories): Do not save and restore errno. (maybe_recoverable): Set
 errno to ENOENT if we cannot make missing intermediate directories.
 (extract_archive): Invoke apply_nonancestor_delayed_set_stat here, not in
 caller. Extract potentially dangerous symbolic links more carefully,
 deferring their creation until the end, and using a regular file placeholder
 in the meantime. Do not remove trailing / and /. from file names. Do not
 bother checking for "".."" when checking whether a directory loops back on
 itself, as loopbacks can occur with symlinks too. Also, in that case, do not
 bother saving and restoring errno; just set it to EEXIST.
 (apply_nonancestor_delayed_set_stat): A prefix is a potential ancestor if it
 ends in slash too (as well as ending in a char just before slash).
 (apply_delayed_set_stat): Remove. (apply_delayed_symlinks, extract_finish):
 New functions.
",309,data/crawl/tar/hunk_316.cpp,,,data/crawl/tar/old_hunk_316.cpp,data/crawl/tar/new_hunk_316.cpp,21,-1,"ERROR ((0, e, _(""%s: Cannot create symlink to %s""),
		  quotearg_colon (CURRENT_FILE_NAME),
		  quote (current_link_name)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""create"", ""symlink"", ""to"", ""%s"", ""quotearg_colon"", ""CURRENT_FILE_NAME"", ""quote"", ""current_link_name""], []]",[-14464375902247539569],284,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3b6f724b9262d4dee75f634d03481086a37ee9b5,13 Jan 2001,"(<time.h>): Do not include; system.h now does this. (time): Remove
 decl; likewise. (child_open_for_uncompress): Use new full_write semantics.
 (flush_write): Use ISSLASH instead of testing for '/'. (flush_read):
 Likewise.
",23,data/crawl/tar/hunk_310.cpp,,,data/crawl/tar/old_hunk_310.cpp,data/crawl/tar/new_hunk_310.cpp,9,-1,"ERROR ((0, 0, _(""Write to compression program short %lu bytes""),
		      (unsigned long) (count - status)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Write"", ""to"", ""compression"", ""program"", ""short"", ""%lu"", ""bytes"", ""unsigned"", ""long"", ""count"", ""status""], []]",[-21519720677364348089],283,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e873bb4ed86124a0a425cc825b4ad15754f86069,3 Apr 2001,"Initial revision
",250,data/crawl/tar/hunk_309.cpp,,,data/crawl/tar/old_hunk_309.cpp,data/crawl/tar/new_hunk_309.cpp,-1,200,,"error (1, 0,
	     _(""cannot convert U+%04X to local character set: iconv function not available""),
	     code);","[""addLog""]","[[], [""error"", ""1"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""iconv"", ""function"", ""not"", ""available"", ""code""]]",[12657063423230702015],282,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e873bb4ed86124a0a425cc825b4ad15754f86069,3 Apr 2001,"Initial revision
",250,data/crawl/tar/hunk_309.cpp,,,data/crawl/tar/old_hunk_309.cpp,data/crawl/tar/new_hunk_309.cpp,-1,194,,"error (1, errno, _(""cannot convert U+%04X to local character set""),
	       code);","[""addLog""]","[[], [""error"", ""1"", ""errno"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""code""]]",[30116334119400763965],281,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e873bb4ed86124a0a425cc825b4ad15754f86069,3 Apr 2001,"Initial revision
",250,data/crawl/tar/hunk_309.cpp,,,data/crawl/tar/old_hunk_309.cpp,data/crawl/tar/new_hunk_309.cpp,-1,184,,"error (1, res == (size_t)(-1) ? errno : 0,
	       _(""cannot convert U+%04X to local character set""), code);","[""addLog""]","[[], [""error"", ""1"", ""res"", ""size_t"", ""1"", ""errno"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""code""]]",[26395696393016731871],280,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e873bb4ed86124a0a425cc825b4ad15754f86069,3 Apr 2001,"Initial revision
",250,data/crawl/tar/hunk_309.cpp,,,data/crawl/tar/old_hunk_309.cpp,data/crawl/tar/new_hunk_309.cpp,-1,153,,"error (1, 0, _(""U+%04X: character out of range""), code);","[""addLog""]","[[], [""error"", ""1"", ""0"", ""_"", ""U"", ""%04X"", ""character"", ""out"", ""of"", ""range"", ""code""]]",[28289527693201259930],279,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e873bb4ed86124a0a425cc825b4ad15754f86069,3 Apr 2001,"Initial revision
",250,data/crawl/tar/hunk_309.cpp,,,data/crawl/tar/old_hunk_309.cpp,data/crawl/tar/new_hunk_309.cpp,-1,141,,"error (1, 0,
		       _(""cannot convert U+%04X to local character set: iconv function not usable""),
		       code);","[""addLog""]","[[], [""error"", ""1"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""iconv"", ""function"", ""not"", ""usable"", ""code""]]",[16127585336694047553],278,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=13b9e5afc861b6d86ed9de772958f48b45b34508,27 Aug 2001,"Add copyright notice.

(_DECLARE_XSTRTOL): Improve quality of diagnostic for
LONGINT_INVALID_SUFFIX_CHAR.",19,data/crawl/tar/hunk_307.cpp,,,data/crawl/tar/old_hunk_307.cpp,data/crawl/tar/new_hunk_307.cpp,3,3,"error ((Exit_code), 0, ""invalid character following %s `%s'"",	\
		 (Argument_type_string), (Str));","error ((Exit_code), 0, ""invalid character following %s in `%s'"", \
		 (Argument_type_string), (Str));","[""updateContent""]","[[], [""in""]]",[13440080745121175],277,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a7cd57a91dba44bba5bcc8039c5f7aae25315d52,27 Aug 2001,"(struct delayed_symlinks, extract_archive, apply_delayed_symlinks):
 Support hard links to symbolic links.

(struct delayed_symlink): Remove 'names' member, replacing it with
'sources' and 'target' member.  All uses changed.

(struct string_list): New type.

(delayed_set_stat, extract_archive): Use offsetof when computing sizes
for struct hack; this avoids wasted space in some cases.

(extract_archive): Fix test for absolute pathnames and/or "".."".
Use link_error to report errors for links.
Remove redundant trailing '/' at ""really_dir"", for all uses, not
just before invoking mkdir.
If overwriting old files, do not worry so much about existing directories.
Fix mode computation in the case where the directory exists.

(apply_delayed_symlinks): If we can't make a hard link to a symbolic
link, make a copy of the symbolic link.",168,data/crawl/tar/hunk_306.cpp,,,data/crawl/tar/old_hunk_306.cpp,data/crawl/tar/new_hunk_306.cpp,3,-1,"ERROR ((0, e, _(""%s: Cannot link to %s""),
		quotearg_colon (CURRENT_FILE_NAME),
		quote (current_link_name)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""link"", ""to"", ""%s"", ""quotearg_colon"", ""CURRENT_FILE_NAME"", ""quote"", ""current_link_name""], []]",[-20984745533687035597],276,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=95dda72cc6231e3966fcaeaa16d6b55a45f602ed,12 Sep 2001,"(struct delayed_set_stat): New member 'after_symlinks'.
 (delay_set_stat): Initialize it to 0. (set_mode): New arg current_stat_info. 
 Use it (if nonnull) to avoid taking an extra stat ourselves.  All callers
 changed. (set_stat): Likewise. (apply_nonancestor_delayed_set_stat): New arg
 'after_symlinks'. If false, stop when encountering a struct whose
 'after_symlinks' member is true.  Otherwise, go through all structures but
 check them more carefully. All callers changed. (extract_archive): When
 extracting a deferred symlink, if its parent directory's status needs fixing,
 then mark the directory as needing to be fixed after symlinks.
 (extract_finish): Fix status of ordinary directories, then apply delayed
 symlinks, then fix the status of directories that are ancestors of delayed
 symlinks.
",129,data/crawl/tar/hunk_304.cpp,,,data/crawl/tar/old_hunk_304.cpp,data/crawl/tar/new_hunk_304.cpp,-1,40,,"ERROR ((0, 0,
		      _(""%s: Directory renamed before its status could be extracted""),
		      quotearg_colon (data->file_name)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Directory"", ""renamed"", ""before"", ""its"", ""status"", ""could"", ""be"", ""extracted"", ""quotearg_colon"", ""data"", ""file_name""]]",[1636505326162296845],275,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4b5d60ef385197e76a2dc6122401e2a13e177f52,21 Sep 2001,"Rewrite from scratch, as print-copyr.c.
",77,data/crawl/tar/hunk_302.cpp,,,data/crawl/tar/old_hunk_302.cpp,data/crawl/tar/new_hunk_302.cpp,-1,26,,"fputs (""Copyright "", stdout);","[""addLog""]","[[], [""fputs"", ""Copyright"", ""stdout""]]",[-4592243020658936354],274,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4b5d60ef385197e76a2dc6122401e2a13e177f52,21 Sep 2001,"Rewrite from scratch, as print-copyr.c.
",77,data/crawl/tar/hunk_302.cpp,,,data/crawl/tar/old_hunk_302.cpp,data/crawl/tar/new_hunk_302.cpp,-1,16,,"fputs (""(C)"", stream);","[""addLog""]","[[], [""fputs"", ""C"", ""stream""]]",[-12668536724985154919],273,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a942967415745514873bdaf7039f11438722fae8,21 Sep 2001,"(EILSEQ, ENOTSUP): New macros, if not defined by errno.h.
 (<error.h>): Do not include. (unicode_to_mb): Return int, not void.  New arg
 for failure callback. Invoke the failure callback instead of invoking
 'error'. (print_unicode_success): Renamed from fprintf_callback.  Now extern.
 Return -1 on failure, 0 on success. (print_unicode_failure): New function.
 (print_unicode_char): Return int.  Adjust to changes to unicode_to_mb. Do not
 report error: instead, print an approximation.
",96,data/crawl/tar/hunk_301.cpp,,,data/crawl/tar/old_hunk_301.cpp,data/crawl/tar/new_hunk_301.cpp,9,9,"error (1, 0,
	     _(""cannot convert U+%04X to local character set: iconv function not available""),
	     code);","failure (code, callback_arg);","[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""error"", ""1"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""iconv"", ""function"", ""not"", ""available""], [""failure"", ""callback_arg""]]",[-10100237636244648647],272,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a942967415745514873bdaf7039f11438722fae8,21 Sep 2001,"(EILSEQ, ENOTSUP): New macros, if not defined by errno.h.
 (<error.h>): Do not include. (unicode_to_mb): Return int, not void.  New arg
 for failure callback. Invoke the failure callback instead of invoking
 'error'. (print_unicode_success): Renamed from fprintf_callback.  Now extern.
 Return -1 on failure, 0 on success. (print_unicode_failure): New function.
 (print_unicode_char): Return int.  Adjust to changes to unicode_to_mb. Do not
 report error: instead, print an approximation.
",96,data/crawl/tar/hunk_301.cpp,,,data/crawl/tar/old_hunk_301.cpp,data/crawl/tar/new_hunk_301.cpp,3,3,"error (1, errno, _(""cannot convert U+%04X to local character set""),
	       code);","failure (code, callback_arg);","[""updateVariable"", ""updateLog"", ""removeVariable"", ""removeContent""]","[[""error"", ""1"", ""errno"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set""], [""failure"", ""callback_arg""]]",[-27559508332414710597],271,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a942967415745514873bdaf7039f11438722fae8,21 Sep 2001,"(EILSEQ, ENOTSUP): New macros, if not defined by errno.h.
 (<error.h>): Do not include. (unicode_to_mb): Return int, not void.  New arg
 for failure callback. Invoke the failure callback instead of invoking
 'error'. (print_unicode_success): Renamed from fprintf_callback.  Now extern.
 Return -1 on failure, 0 on success. (print_unicode_failure): New function.
 (print_unicode_char): Return int.  Adjust to changes to unicode_to_mb. Do not
 report error: instead, print an approximation.
",96,data/crawl/tar/hunk_300.cpp,,,data/crawl/tar/old_hunk_300.cpp,data/crawl/tar/new_hunk_300.cpp,3,-1,"error (1, res == (size_t)(-1) ? errno : 0,
	       _(""cannot convert U+%04X to local character set""), code);",,"[""removeLog""]","[[""error"", ""1"", ""res"", ""size_t"", ""1"", ""errno"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""code""], []]",[-26395696393016731871],270,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a942967415745514873bdaf7039f11438722fae8,21 Sep 2001,"(EILSEQ, ENOTSUP): New macros, if not defined by errno.h.
 (<error.h>): Do not include. (unicode_to_mb): Return int, not void.  New arg
 for failure callback. Invoke the failure callback instead of invoking
 'error'. (print_unicode_success): Renamed from fprintf_callback.  Now extern.
 Return -1 on failure, 0 on success. (print_unicode_failure): New function.
 (print_unicode_char): Return int.  Adjust to changes to unicode_to_mb. Do not
 report error: instead, print an approximation.
",96,data/crawl/tar/hunk_299.cpp,,,data/crawl/tar/old_hunk_299.cpp,data/crawl/tar/new_hunk_299.cpp,3,-1,"error (1, 0, _(""U+%04X: character out of range""), code);",,"[""removeLog""]","[[""error"", ""1"", ""0"", ""_"", ""U"", ""%04X"", ""character"", ""out"", ""of"", ""range"", ""code""], []]",[-28289527693201259930],269,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a942967415745514873bdaf7039f11438722fae8,21 Sep 2001,"(EILSEQ, ENOTSUP): New macros, if not defined by errno.h.
 (<error.h>): Do not include. (unicode_to_mb): Return int, not void.  New arg
 for failure callback. Invoke the failure callback instead of invoking
 'error'. (print_unicode_success): Renamed from fprintf_callback.  Now extern.
 Return -1 on failure, 0 on success. (print_unicode_failure): New function.
 (print_unicode_char): Return int.  Adjust to changes to unicode_to_mb. Do not
 report error: instead, print an approximation.
",96,data/crawl/tar/hunk_298.cpp,,,data/crawl/tar/old_hunk_298.cpp,data/crawl/tar/new_hunk_298.cpp,3,3,"error (1, 0,
		       _(""cannot convert U+%04X to local character set: iconv function not usable""),
		       code);","failure (code, callback_arg);","[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""error"", ""1"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""iconv"", ""function"", ""not"", ""usable""], [""failure"", ""callback_arg""]]",[-13570759549707994185],268,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=7f1bf2e09f8ec124c0fba9d2bf033505f827353e,26 Sep 2001,"just ignore them silently.
",7,data/crawl/tar/hunk_297.cpp,,,data/crawl/tar/old_hunk_297.cpp,data/crawl/tar/new_hunk_297.cpp,5,-1,"ERROR ((0, 0, _(""%d garbage bytes ignored at end of archive""),
		    (int) ((record_size - left) % BLOCKSIZE)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""%d"", ""garbage"", ""bytes"", ""ignored"", ""at"", ""end"", ""of"", ""archive"", ""int"", ""record_size"", ""left"", ""%"", ""BLOCKSIZE""], []]",[13523481147192127660],267,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9ded0a0567b58bfbdf10a8dc98e0158e486466ac,11 Feb 2002,"Sync with fileutils
",174,data/crawl/tar/hunk_295.cpp,,,data/crawl/tar/old_hunk_295.cpp,data/crawl/tar/new_hunk_295.cpp,-1,32,,"error (1, 0, _(""cannot convert U+%04X to local character set: %s""), code,
	   gettext (msg));","[""addLog""]","[[], [""error"", ""1"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""%s"", ""code"", ""gettext"", ""msg""]]",[33030173934653945481],266,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9ded0a0567b58bfbdf10a8dc98e0158e486466ac,11 Feb 2002,"Sync with fileutils
",174,data/crawl/tar/hunk_295.cpp,,,data/crawl/tar/old_hunk_295.cpp,data/crawl/tar/new_hunk_295.cpp,-1,30,,"error (1, 0, _(""cannot convert U+%04X to local character set""), code);","[""addLog""]","[[], [""error"", ""1"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""code""]]",[21831195340544402245],265,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fcb62b60d94ad17c766dcdd94e4300163c670282,10 Mar 2003,"import from gnulib
",96,data/crawl/tar/hunk_294.cpp,,,data/crawl/tar/old_hunk_294.cpp,data/crawl/tar/new_hunk_294.cpp,15,7,"error (0, 0, format, quotearg (value), context);","error (0, 0, format, quotearg_n_style (0, ARGMATCH_QUOTING_STYLE, value),
	 quote_n (1, context));","[""updateVariable"", ""addContent"", ""addVariable""]","[[""quotearg""], [""quotearg_n_style"", ""0"", ""ARGMATCH_QUOTING_STYLE"", ""quote_n"", ""1""]]",[-7902949310050539435],264,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=675c5a2f243bb5e72c982c0e3c30762ec32e9a1b,5 Jul 2003,"(we_are_root): Now bool, not int. (check_time): Warn about
 implausibly old time stamps. (set_stat): Use utimbuf, not stat_info.
 (preprare_to_extract): New arg DIRECTORY. (fill_in_sparse_array): Moved here
 from compare.c. (extract_sparse_file): Now returns off_t, giving size left.
 Truncate file at end. (extract_archive): Use safer_name_suffix rather than
 rolling our own. Use fill_in_sparse_array rather than rolling our own. Strip
 trailing slashes more effectively. Check for unsafe names.
",391,data/crawl/tar/hunk_291.cpp,,,data/crawl/tar/old_hunk_291.cpp,data/crawl/tar/new_hunk_291.cpp,43,15,"ERROR ((0, e, _(""%s: Was unable to backup this file""),
		quotearg_colon (CURRENT_FILE_NAME)));","ERROR ((0, e, _(""%s: Was unable to backup this file""),
		quotearg_colon (file_name)));","[""updateVariable""]","[[""CURRENT_FILE_NAME""], [""file_name""]]",[-11589110773231525194],263,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=675c5a2f243bb5e72c982c0e3c30762ec32e9a1b,5 Jul 2003,"(we_are_root): Now bool, not int. (check_time): Warn about
 implausibly old time stamps. (set_stat): Use utimbuf, not stat_info.
 (preprare_to_extract): New arg DIRECTORY. (fill_in_sparse_array): Moved here
 from compare.c. (extract_sparse_file): Now returns off_t, giving size left.
 Truncate file at end. (extract_archive): Use safer_name_suffix rather than
 rolling our own. Use fill_in_sparse_array rather than rolling our own. Strip
 trailing slashes more effectively. Check for unsafe names.
",391,data/crawl/tar/hunk_291.cpp,,,data/crawl/tar/old_hunk_291.cpp,data/crawl/tar/new_hunk_291.cpp,12,3,"ERROR ((0, 0, _(""%s: Member name contains `..'""),
		  quotearg_colon (CURRENT_FILE_NAME)));",print_header (-1);,"[""updateVariable"", ""updateLog"", ""removeVariable"", ""updateContent"", ""removeContent""]","[[""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Member"", ""name"", ""contains"", ""quotearg_colon"", ""CURRENT_FILE_NAME""], [""print_header"", ""1""]]",[-12247775668617979367],262,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=675c5a2f243bb5e72c982c0e3c30762ec32e9a1b,5 Jul 2003,"(we_are_root): Now bool, not int. (check_time): Warn about
 implausibly old time stamps. (set_stat): Use utimbuf, not stat_info.
 (preprare_to_extract): New arg DIRECTORY. (fill_in_sparse_array): Moved here
 from compare.c. (extract_sparse_file): Now returns off_t, giving size left.
 Truncate file at end. (extract_archive): Use safer_name_suffix rather than
 rolling our own. Use fill_in_sparse_array rather than rolling our own. Strip
 trailing slashes more effectively. Check for unsafe names.
",391,data/crawl/tar/hunk_289.cpp,,,data/crawl/tar/old_hunk_289.cpp,data/crawl/tar/new_hunk_289.cpp,-1,80,,"ERROR ((0, 0, ""%s: invalid sparse archive member"", current_file_name));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""invalid"", ""sparse"", ""archive"", ""member"", ""current_file_name""]]",[25819277245644936315],261,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8912f582ac95ba39f4435046642e643921f9dd9f,5 Jul 2003,"Convert to UTF-8. Don't include <print-copyr.h>. (DEFAULT_PATTERN):
 Renamed from DEFAULT. (ZEROS_PATTERN): Renamed from ZEROS. (main): Use
 gettext to translate (C), not print_copyright.
",82,data/crawl/tar/hunk_285.cpp,,,data/crawl/tar/old_hunk_285.cpp,data/crawl/tar/new_hunk_285.cpp,11,12,"fputs (_(""\
\n\
Written by Fran�ois Pinard <pinard@iro.umontreal.ca>.\n""),
	     stdout);","puts (_(""Written by F. Pinard.""));","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fputs"", ""\\"", ""\\n\\"", ""Fran"", ""ois"", ""pinard"", ""iro"", ""umontreal"", ""ca"", ""\\n"", ""stdout""], [""puts"", ""F""]]",[8059401547429894485],260,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8912f582ac95ba39f4435046642e643921f9dd9f,5 Jul 2003,"Convert to UTF-8. Don't include <print-copyr.h>. (DEFAULT_PATTERN):
 Renamed from DEFAULT. (ZEROS_PATTERN): Renamed from ZEROS. (main): Use
 gettext to translate (C), not print_copyright.
",82,data/crawl/tar/hunk_285.cpp,,,data/crawl/tar/old_hunk_285.cpp,data/crawl/tar/new_hunk_285.cpp,7,4,"fputs (_(""\
This is free software; see the source for copying conditions.  There is NO\n\
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n""),
	     stdout);","puts (_(""\
This program comes with NO WARRANTY, to the extent permitted by law.\n\
You may redistribute it under the terms of the GNU General Public License;\n\
see the file named COPYING for details.""));","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fputs"", ""is"", ""free"", ""software"", ""source"", ""copying"", ""conditions"", ""There"", ""is"", ""NO\\n\\"", ""warranty"", ""not"", ""even"", ""for"", ""MERCHANTABILITY"", ""or"", ""FITNESS"", ""FOR"", ""A"", ""PARTICULAR"", ""PURPOSE"", ""\\n"", ""stdout""], [""puts"", ""program"", ""comes"", ""with"", ""NO"", ""WARRANTY"", ""to"", ""extent"", ""permitted"", ""by"", ""law"", ""\\n\\"", ""You"", ""may"", ""redistribute"", ""it"", ""under"", ""the"", ""terms"", ""of"", ""the"", ""GNU"", ""General"", ""Public"", ""License"", ""\\n\\"", ""the"", ""file"", ""named"", ""COPYING"", ""details""]]",[17709536130429287491],259,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8912f582ac95ba39f4435046642e643921f9dd9f,5 Jul 2003,"Convert to UTF-8. Don't include <print-copyr.h>. (DEFAULT_PATTERN):
 Renamed from DEFAULT. (ZEROS_PATTERN): Renamed from ZEROS. (main): Use
 gettext to translate (C), not print_copyright.
",82,data/crawl/tar/hunk_285.cpp,,,data/crawl/tar/old_hunk_285.cpp,data/crawl/tar/new_hunk_285.cpp,3,3,"fputs (_(""\
\n\
Copyright (C) 1995, 1996, 1997 Free Software Foundation, Inc.\n""),
	     stdout);","printf (_(""Copyright (C) %d Free Software Foundation, Inc.\n""), 2003);","[""updateLog"", ""removeVariable"", ""addContent"", ""updateContent""]","[[""fputs"", ""\\"", ""\\n\\"", ""1995"", ""1996"", ""1997"", ""stdout""], [""printf"", ""%d"", ""2003""]]",[15216528907226424666],258,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8912f582ac95ba39f4435046642e643921f9dd9f,5 Jul 2003,"Convert to UTF-8. Don't include <print-copyr.h>. (DEFAULT_PATTERN):
 Renamed from DEFAULT. (ZEROS_PATTERN): Renamed from ZEROS. (main): Use
 gettext to translate (C), not print_copyright.
",82,data/crawl/tar/hunk_284.cpp,,,data/crawl/tar/old_hunk_284.cpp,data/crawl/tar/new_hunk_284.cpp,11,-1,"error (0, 0, _(""Unknown pattern `%s'""), optarg);",,"[""removeLog""]","[[""error"", ""0"", ""0"", ""_"", ""Unknown"", ""pattern"", ""%s"", ""optarg""], []]",[-980739096366302374],257,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8912f582ac95ba39f4435046642e643921f9dd9f,5 Jul 2003,"Convert to UTF-8. Don't include <print-copyr.h>. (DEFAULT_PATTERN):
 Renamed from DEFAULT. (ZEROS_PATTERN): Renamed from ZEROS. (main): Use
 gettext to translate (C), not print_copyright.
",82,data/crawl/tar/hunk_284.cpp,,,data/crawl/tar/old_hunk_284.cpp,data/crawl/tar/new_hunk_284.cpp,7,3,"error (0, 0, _(""Ambiguous pattern `%s'""), optarg);","XARGMATCH (""--pattern"", optarg,
			     pattern_args, pattern_types);","[""updateLog"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""error"", ""0"", ""0"", ""_"", ""Ambiguous"", ""%s""], [""XARGMATCH"", ""pattern_args"", ""pattern_types""]]",[8186137817227544123],256,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,449,,"ERROR ((0, 0, _(""%s: Wrote only %lu of %lu bytes""),
	    name, (unsigned long) status, (unsigned long) record_size));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Wrote"", ""only"", ""%lu"", ""of"", ""%lu"", ""bytes"", ""name"", ""unsigned"", ""long"", ""status"", ""unsigned"", ""long"", ""record_size""]]",[-15554077402386227743],255,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,440,,"call_arg_error (""write"", name);","[""addLog""]","[[], [""call_arg_error"", ""write"", ""name""]]",[-1239180953843582975],254,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,434,,"call_arg_error (""waitpid"", name);","[""addLog""]","[[], [""call_arg_error"", ""waitpid"", ""name""]]",[-14483812913489595378],253,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,428,,"call_arg_error (""utime"", name);","[""addLog""]","[[], [""call_arg_error"", ""utime"", ""name""]]",[-13920144699611414864],252,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,422,,"call_arg_error (""unlink"", name);","[""addLog""]","[[], [""call_arg_error"", ""unlink"", ""name""]]",[-9349767022548828116],251,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,416,,"call_arg_warn (""truncate"", name);","[""addLog""]","[[], [""call_arg_warn"", ""truncate"", ""name""]]",[-3675692444196772876],250,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,410,,"call_arg_error (""truncate"", name);","[""addLog""]","[[], [""call_arg_error"", ""truncate"", ""name""]]",[-2117281613223250409],249,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,404,,"call_arg_warn (""stat"", name);","[""addLog""]","[[], [""call_arg_warn"", ""stat"", ""name""]]",[-13440788288475530256],248,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,398,,"call_arg_error (""stat"", name);","[""addLog""]","[[], [""call_arg_error"", ""stat"", ""name""]]",[-11882377457502007789],247,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,391,,"ERROR ((0, e, _(""%s: Cannot create symlink to %s""),
	  quotearg_colon (name), quote_n (1, contents)));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""create"", ""symlink"", ""to"", ""%s"", ""quotearg_colon"", ""name"", ""quote_n"", ""1"", ""contents""]]",[2916493202140917311],246,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,374,,"call_arg_warn (""seek"", name);","[""addLog""]","[[], [""call_arg_warn"", ""seek"", ""name""]]",[-13440773288579530806],245,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,358,,"call_arg_error (""seek"", name);","[""addLog""]","[[], [""call_arg_error"", ""seek"", ""name""]]",[-11882362457606008339],244,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,352,,"call_arg_warn (""savedir"", name);","[""addLog""]","[[], [""call_arg_warn"", ""savedir"", ""name""]]",[-4483225517168082047],243,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,346,,"call_arg_error (""savedir"", name);","[""addLog""]","[[], [""call_arg_error"", ""savedir"", ""name""]]",[-2924814686194559580],242,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,340,,"call_arg_warn (""readlink"", name);","[""addLog""]","[[], [""call_arg_warn"", ""readlink"", ""name""]]",[-18892478127957828606],241,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,334,,"call_arg_error (""readlink"", name);","[""addLog""]","[[], [""call_arg_error"", ""readlink"", ""name""]]",[-17334067296984306139],240,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,297,,"ERROR ((0, e,
	  _(""%s: Read error at byte %s, reading %lu bytes""),
	  quotearg_colon (name), STRINGIFY_BIGINT (offset, buf),
	  (unsigned long) size));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Read"", ""error"", ""at"", ""byte"", ""%s"", ""reading"", ""%lu"", ""bytes"", ""quotearg_colon"", ""name"", ""STRINGIFY_BIGINT"", ""offset"", ""buf"", ""unsigned"", ""long"", ""size""]]",[-1512409348903136539],239,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,289,,"call_arg_error (""read"", name);","[""addLog""]","[[], [""call_arg_error"", ""read"", ""name""]]",[-16037060588851282791],238,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,283,,"call_arg_warn (""open"", name);","[""addLog""]","[[], [""call_arg_warn"", ""open"", ""name""]]",[-11612272736695072950],237,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,271,,"call_arg_error (""open"", name);","[""addLog""]","[[], [""call_arg_error"", ""open"", ""name""]]",[-10053861905721550483],236,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,265,,"call_arg_error (""mknod"", name);","[""addLog""]","[[], [""call_arg_error"", ""mknod"", ""name""]]",[-14518143172516888861],235,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,259,,"call_arg_error (""mkfifo"", name);","[""addLog""]","[[], [""call_arg_error"", ""mkfifo"", ""name""]]",[-7856564262405584679],234,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,253,,"call_arg_error (""mkdir"", name);","[""addLog""]","[[], [""call_arg_error"", ""mkdir"", ""name""]]",[-14518153172554888835],233,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,246,,"ERROR ((0, e, _(""%s: Cannot hard link to %s""),
	  quotearg_colon (source), quote_n (1, target)));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""hard"", ""link"", ""to"", ""%s"", ""quotearg_colon"", ""source"", ""quote_n"", ""1"", ""target""]]",[16572626554625544121],232,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,233,,"call_arg_warn (""close"", name);","[""addLog""]","[[], [""call_arg_warn"", ""close"", ""name""]]",[-4656643123195449145],231,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,221,,"call_arg_error (""close"", name);","[""addLog""]","[[], [""call_arg_error"", ""close"", ""name""]]",[-3098232292221926678],230,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,214,,"ERROR ((0, e, _(""%s: Cannot change ownership to uid %lu, gid %lu""),
	  quotearg_colon (name), (unsigned long) uid, (unsigned long) gid));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""change"", ""ownership"", ""to"", ""uid"", ""%lu"", ""gid"", ""%lu"", ""quotearg_colon"", ""name"", ""unsigned"", ""long"", ""uid"", ""unsigned"", ""long"", ""gid""]]",[-34718370246957576613],229,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,-1,206,,"ERROR ((0, e, _(""%s: Cannot change mode to %s""),
	  quotearg_colon (name), buf));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""change"", ""mode"", ""to"", ""%s"", ""quotearg_colon"", ""name"", ""buf""]]",[-11260288757634500464],228,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,34,366,"ERROR ((0, errno, _(""%s: Cannot rename from backup""),
		before_backup_name));","ERROR ((0, e, _(""%s: Cannot seek to %s""),
	  quotearg_colon (name),
	  STRINGIFY_BIGINT (offset, buf)));","[""updateVariable"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""errno"", ""rename"", ""from"", ""backup"", ""before_backup_name""], [""e"", ""seek"", ""to"", ""%s"", ""quotearg_colon"", ""name"", ""STRINGIFY_BIGINT"", ""offset"", ""buf""]]",[-17351587940175280119],227,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=31d9c7e2a4344d8f884c93dd4fb467894de69e99,24 Jul 2003,"(chdir_do): Fixed call to restore_cwd
",899,data/crawl/tar/hunk_282.cpp,,,data/crawl/tar/old_hunk_282.cpp,data/crawl/tar/new_hunk_282.cpp,18,173,"ERROR ((0, errno, _(""%s: Cannot rename for backup""), before_backup_name));","ERROR ((0, e, _(""%s: Cannot %s""), quotearg_colon (name), call));","[""updateVariable"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""errno"", ""rename"", ""for"", ""backup"", ""before_backup_name""], [""e"", ""%s"", ""quotearg_colon"", ""name"", ""call""]]",[-13199194373479959500],226,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d52a1bb3663f9eb595e5f311037fc5cbd13d621e,27 Jul 2003,"New option --check-links. Changed semantics of -o to comply to UNIX98
 when extracting and to its previous semantics otherwise. (main): Call
 check_links if --check-links. was given.
",50,data/crawl/tar/hunk_279.cpp,,,data/crawl/tar/old_hunk_279.cpp,data/crawl/tar/new_hunk_279.cpp,-1,1,,"fputs (_(""\
\n\
Compatibility options:\n\
  -o                                 when creating, same as --old-archive\n\
                                     when extracting, same as --no-same-owner\n""),
             stdout);","[""addLog""]","[[], [""fputs"", ""_"", ""\\"", ""\\n\\"", ""Compatibility"", ""options"", ""\\n\\"", ""o"", ""when"", ""creating"", ""same"", ""as"", ""old"", ""archive\\n\\"", ""when"", ""extracting"", ""same"", ""as"", ""no"", ""same"", ""owner\\n"", ""stdout""]]",[-5038140337926352584],225,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_275.cpp,,,data/crawl/tar/old_hunk_275.cpp,data/crawl/tar/new_hunk_275.cpp,-1,12,,"ERROR ((0, e, _(""%s: Cannot remove""), quotearg_colon (p)));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""remove"", ""quotearg_colon"", ""p""]]",[-1448715698149442100],224,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_275.cpp,,,data/crawl/tar/old_hunk_275.cpp,data/crawl/tar/new_hunk_275.cpp,12,-1,"ERROR ((0, errno, _(""Error while deleting %s""), p));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Error"", ""while"", ""deleting"", ""%s"", ""p""], []]",[-29178382628792060387],223,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,-1,45,,"ERROR ((0, 0, ""%s:1: %s"", quotearg_colon (listed_incremental_option),
		_(""Time stamp out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""1"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""_"", ""Time"", ""stamp"", ""out"", ""of"", ""range""]]",[8968859343124941257],222,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,-1,42,,"ERROR ((0, 0, ""%s:1: %s"", quotearg_colon (listed_incremental_option),
		_(""Invalid time stamp"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""1"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""_"", ""Invalid"", ""time"", ""stamp""]]",[-429386708888092419],221,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,246,134,"ERROR ((0, errno, _(""Cannot stat %s""), name->name));",truncate_error (listed_incremental_option);,"[""updateVariable"", ""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""%s"", ""name"", ""name""], [""truncate_error"", ""listed_incremental_option""]]",[-7763201975839201798],220,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,234,132,"ERROR ((0, errno, _(""Cannot chdir to %s""), name->change_dir));",seek_error (listed_incremental_option);,"[""updateVariable"", ""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""chdir"", ""to"", ""%s"", ""name"", ""change_dir""], [""seek_error"", ""listed_incremental_option""]]",[-8377848685728672691],219,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,161,-1,"ERROR ((0, errno, _(""Cannot write to %s""), listed_incremental_option));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""write"", ""to"", ""%s"", ""listed_incremental_option""], []]",[-20561943630304946044],218,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,144,-1,"ERROR ((0, errno, ""%s"", listed_incremental_option));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""%s"", ""listed_incremental_option""], []]",[-12854428047407403626],217,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,104,77,"ERROR ((0, errno, _(""Cannot open %s""), listed_incremental_option));","ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Invalid inode number"")));","[""updateVariable"", ""removeVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""errno"", ""Cannot"", ""open""], [""0"", ""%ld"", ""%s"", ""quotearg_colon"", ""lineno"", ""Invalid"", ""inode"", ""number""]]",[-43943267073892273597],216,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_274.cpp,,,data/crawl/tar/old_hunk_274.cpp,data/crawl/tar/new_hunk_274.cpp,94,69,"ERROR ((TAREXIT_FAILURE, 0, _(""File name %s/%s too long""),
		path, listed_incremental_option));","ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Device number out of range"")));","[""updateVariable"", ""removeVariable"", ""addContent"", ""removeContent"", ""addVariable""]","[[""TAREXIT_FAILURE"", ""File"", ""name"", ""%s/%s"", ""too"", ""long"", ""path""], [""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""lineno"", ""Device"", ""number"", ""out"", ""of"", ""range""]]",[-43578545548655982345],215,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_273.cpp,,,data/crawl/tar/old_hunk_273.cpp,data/crawl/tar/new_hunk_273.cpp,112,129,"ERROR ((0, errno, _(""Cannot open directory %s""), path));",savedir_warn (path);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""open"", ""directory"", ""%s""], [""savedir_warn""]]",[-21574218023574471561],214,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_272.cpp,,,data/crawl/tar/old_hunk_272.cpp,data/crawl/tar/new_hunk_272.cpp,1,1,"ERROR ((0, 0,
	      _(""%s: Cannot extract -- file is continued from another volume""),
	      quotearg_colon (current_file_name)));","ERROR ((0, 0,
	      _(""%s: Cannot extract -- file is continued from another volume""),
	      quotearg_colon (current_stat_info.file_name)));","[""removeVariable"", ""addVariable""]","[[""current_file_name""], [""current_stat_info"", ""file_name""]]",[-9172138168298619624],213,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_271.cpp,,,data/crawl/tar/old_hunk_271.cpp,data/crawl/tar/new_hunk_271.cpp,3,3,"ERROR ((0, 0, ""%s: invalid sparse archive member"", current_file_name));","ERROR ((0, 0, _(""%s: invalid sparse archive member""),
	  current_stat_info.file_name));","[""moveContent"", ""removeVariable"", ""addVariable""]","[[""current_file_name""], [""_"", ""current_stat_info"", ""file_name""]]",[-9172138156138583050],212,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_268.cpp,,,data/crawl/tar/old_hunk_268.cpp,data/crawl/tar/new_hunk_268.cpp,59,55,"ERROR ((0, errno, _(""Error while closing %s""), current_file_name));",close_error (current_stat_info.file_name);,"[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Error"", ""while"", ""closing"", ""%s"", ""current_file_name""], [""close_error"", ""current_stat_info"", ""file_name""]]",[-31653506311555596412],211,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_267.cpp,,,data/crawl/tar/old_hunk_267.cpp,data/crawl/tar/new_hunk_267.cpp,40,33,"report_difference (_(""No longer a directory""));","report_difference (_(""File type differs""));","[""updateContent""]","[[""No"", ""longer"", ""a"", ""directory""], [""File"", ""type"", ""differs""]]",[10317539565545843078],210,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_266.cpp,,,data/crawl/tar/old_hunk_266.cpp,data/crawl/tar/new_hunk_266.cpp,-1,43,,"report_difference (_(""File type differs""));","[""addLog""]","[[], [""report_difference"", ""_"", ""File"", ""type"", ""differs""]]",[7787262364174097497],209,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_266.cpp,,,data/crawl/tar/old_hunk_266.cpp,data/crawl/tar/new_hunk_266.cpp,76,57,"report_difference (_(""Mode or device-type changed""));","report_difference (_(""Mode differs""));","[""updateContent""]","[[""or"", ""device"", ""type"", ""changed""], [""differs""]]",[19811062108266274076],208,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_266.cpp,,,data/crawl/tar/old_hunk_266.cpp,data/crawl/tar/new_hunk_266.cpp,63,51,"report_difference (_(""Device numbers changed""));","report_difference (_(""Device number differs""));","[""updateContent""]","[[""numbers"", ""changed""], [""number"", ""differs""]]",[11708234995617180325],207,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_266.cpp,,,data/crawl/tar/old_hunk_266.cpp,data/crawl/tar/new_hunk_266.cpp,13,14,"report_difference (_(""No such file or directory""));",readlink_warn (current_stat_info.file_name);,"[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""report_difference"", ""_"", ""No"", ""such"", ""file"", ""or"", ""directory""], [""readlink_warn"", ""current_stat_info"", ""file_name""]]",[5642229246861989347],206,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_265.cpp,,,data/crawl/tar/old_hunk_265.cpp,data/crawl/tar/new_hunk_265.cpp,15,-1,"report_difference (_(""Does not exist""));",,"[""removeLog""]","[[""report_difference"", ""_"", ""Does"", ""not"", ""exist""], []]",[593725159132294642],205,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_264.cpp,,,data/crawl/tar/old_hunk_264.cpp,data/crawl/tar/new_hunk_264.cpp,-1,48,,report_difference (0);,"[""addLog""]","[[], [""report_difference"", ""0""]]",[678740553726139074],204,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_264.cpp,,,data/crawl/tar/old_hunk_264.cpp,data/crawl/tar/new_hunk_264.cpp,88,79,"ERROR ((0, errno, _(""Error while closing %s""), current_file_name));","utime (current_stat_info.file_name, &restore_times);","[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Error"", ""while"", ""closing"", ""%s"", ""current_file_name""], [""utime"", ""current_stat_info"", ""file_name"", ""&restore_times""]]",[-30732428458940836576],203,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_264.cpp,,,data/crawl/tar/old_hunk_264.cpp,data/crawl/tar/new_hunk_264.cpp,59,-1,"ERROR ((0, errno, _(""Cannot open %s""), current_file_name));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""open"", ""%s"", ""current_file_name""], []]",[-22043956343107053135],202,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_263.cpp,,,data/crawl/tar/old_hunk_263.cpp,data/crawl/tar/new_hunk_263.cpp,25,19,"ERROR ((0, errno, _(""Cannot stat file %s""), current_file_name));",stat_error (file_name);,"[""updateVariable"", ""updateLog"", ""removeVariable"", ""removeContent""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""stat"", ""file"", ""%s"", ""current_file_name""], [""stat_error"", ""file_name""]]",[-28892506147657650411],201,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d858a433c82626309e0d974ca923a79ac7f7f18f,31 Aug 2003,"Use current_stat_info
",2077,data/crawl/tar/hunk_263.cpp,,,data/crawl/tar/old_hunk_263.cpp,data/crawl/tar/new_hunk_263.cpp,22,17,"report_difference (_(""File does not exist""));",stat_warn (file_name);,"[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""report_difference"", ""_"", ""File"", ""does"", ""not"", ""exist""], [""stat_warn"", ""file_name""]]",[3492599160522080713],200,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3f998f69b9d3899e144323c322f8567237201cb1,4 Sep 2003,"(decode_record): Reversed the return condition.
",17,data/crawl/tar/hunk_256.cpp,,,data/crawl/tar/old_hunk_256.cpp,data/crawl/tar/new_hunk_256.cpp,3,3,"ERROR ((0, 0, _(""Malformed extended header"")));","ERROR ((0, 0, _(""Malformed extended header: missing equal sign"")));","[""updateContent""]","[[], [""missing"", ""equal"", ""sign""]]",[-6551870111882700221],199,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3f998f69b9d3899e144323c322f8567237201cb1,4 Sep 2003,"(decode_record): Reversed the return condition.
",17,data/crawl/tar/hunk_255.cpp,,,data/crawl/tar/old_hunk_255.cpp,data/crawl/tar/new_hunk_255.cpp,8,8,"ERROR ((0, 0, _(""Malformed extended header"")));","ERROR ((0, 0, _(""Malformed extended header: missing whitespace after the length"")));","[""updateContent""]","[[], [""missing"", ""whitespace"", ""after"", ""the"", ""length""]]",[6264860560521976355],198,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=91b2d65e9dccae981f308a659d6c7bdd32285598,5 Sep 2003,"Use ngettext where appropriate.
",70,data/crawl/tar/hunk_253.cpp,,,data/crawl/tar/old_hunk_253.cpp,data/crawl/tar/new_hunk_253.cpp,3,3,"ERROR ((0, 0, _(""%s: Wrote only %lu of %lu bytes""),
	    name, (unsigned long) status, (unsigned long) record_size));","ERROR ((0, 0,
	    ngettext (""%s: Wrote only %lu of %lu byte"",
		      ""%s: Wrote only %lu of %lu bytes"",
		      record_size),
	    name, (unsigned long) status, (unsigned long) record_size));","[""updateVariable"", ""addContent"", ""addVariable""]","[[""_""], [""ngettext"", ""byte"", ""%s"", ""Wrote"", ""only"", ""%lu"", ""of"", ""%lu"", ""record_size""]]",[-2923302849777844946],197,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=91b2d65e9dccae981f308a659d6c7bdd32285598,5 Sep 2003,"Use ngettext where appropriate.
",70,data/crawl/tar/hunk_252.cpp,,,data/crawl/tar/old_hunk_252.cpp,data/crawl/tar/new_hunk_252.cpp,2,2,"ERROR ((0, e,
	  _(""%s: Read error at byte %s, reading %lu bytes""),
	  quotearg_colon (name), STRINGIFY_BIGINT (offset, buf),
	  (unsigned long) size));","ERROR ((0, e,
	  ngettext (""%s: Read error at byte %s, reading %lu byte"",
		    ""%s: Read error at byte %s, reading %lu bytes"",
		    size),
	  quotearg_colon (name), STRINGIFY_BIGINT (offset, buf),
	  (unsigned long) size));","[""updateVariable"", ""addContent"", ""addVariable""]","[[""_""], [""ngettext"", ""byte"", ""%s"", ""Read"", ""error"", ""at"", ""byte"", ""%s"", ""reading"", ""%lu"", ""size""]]",[-1089676116745937906],196,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=91b2d65e9dccae981f308a659d6c7bdd32285598,5 Sep 2003,"Use ngettext where appropriate.
",70,data/crawl/tar/hunk_251.cpp,,,data/crawl/tar/old_hunk_251.cpp,data/crawl/tar/new_hunk_251.cpp,2,2,"ERROR ((0, 0,
		  _(""VERIFY FAILURE: %d invalid header(s) detected""), counter));","ERROR ((0, 0,
		  ngettext (""VERIFY FAILURE: %d invalid header detected"",
			    ""VERIFY FAILURE: %d invalid headers detected"",
			    counter), counter));","[""updateVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[""_"", ""s""], [""ngettext"", ""VERIFY"", ""FAILURE"", ""%d"", ""invalid"", ""headers"", ""detected"", ""counter""]]",[7751678610499644926],195,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=91493ea9b62a24ab139eedd4c919e4fcda9750c3,4 Oct 2003,"Count number of occurrences of each name in the archive.
 (name_match): Honor --occurence option. (names_done): Removed
 (all_names_found,names_notfound): Rewritten.
",79,data/crawl/tar/hunk_246.cpp,,,data/crawl/tar/old_hunk_246.cpp,data/crawl/tar/new_hunk_246.cpp,-1,9,,"ERROR ((0, 0, _(""%s: Required occurence not found in archive""),
		  quotearg_colon (cursor->name)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Required"", ""occurence"", ""not"", ""found"", ""in"", ""archive"", ""quotearg_colon"", ""cursor"", ""name""]]",[7828420624667873424],194,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b085ca30976ec26256344bd3532205d440e69309,4 Oct 2003,"System-dependent functions
",633,data/crawl/tar/hunk_245.cpp,,,data/crawl/tar/old_hunk_245.cpp,data/crawl/tar/new_hunk_245.cpp,-1,246,,"report_difference (_(""Not linked to %s""),
			 quote (current_stat_info.link_name));","[""addLog""]","[[], [""report_difference"", ""_"", ""Not"", ""linked"", ""to"", ""%s"", ""quote"", ""current_stat_info"", ""link_name""]]",[-7250871198660991535],193,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b085ca30976ec26256344bd3532205d440e69309,4 Oct 2003,"System-dependent functions
",633,data/crawl/tar/hunk_245.cpp,,,data/crawl/tar/old_hunk_245.cpp,data/crawl/tar/new_hunk_245.cpp,-1,198,,"ERROR ((0, 0, _(""Child died with signal %d""),
		WTERMSIG (wait_status)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Child"", ""died"", ""with"", ""signal"", ""%d"", ""WTERMSIG"", ""wait_status""]]",[10939874495164455938],192,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_233.cpp,,,data/crawl/tar/old_hunk_233.cpp,data/crawl/tar/new_hunk_233.cpp,-1,13,,"report_difference (ngettext (""Could only read %lu of %lu byte"",
				       ""Could only read %lu of %lu bytes"",
				       bytes),
			     (unsigned long) status, (unsigned long) bytes);","[""addLog""]","[[], [""report_difference"", ""ngettext"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""byte"", ""Could"", ""only"", ""read"", ""%lu"", ""of"", ""%lu"", ""bytes"", ""bytes"", ""unsigned"", ""long"", ""status"", ""unsigned"", ""long"", ""bytes""]]",[-25850288560524672246],191,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_232.cpp,,,data/crawl/tar/old_hunk_232.cpp,data/crawl/tar/new_hunk_232.cpp,40,-1,"ERROR ((0, 0, _(""Child returned status %d""),
		WEXITSTATUS (wait_status)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Child"", ""returned"", ""status"", ""%d"", ""WEXITSTATUS"", ""wait_status""], []]",[-5089383475775470177],190,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c1b9212b16a53da408548efa3f9c8b1a62335b42,4 Oct 2003,"Moved system dependencies to system.c
",664,data/crawl/tar/hunk_232.cpp,,,data/crawl/tar/old_hunk_232.cpp,data/crawl/tar/new_hunk_232.cpp,37,-1,"ERROR ((0, 0, _(""Child died with signal %d""),
		WTERMSIG (wait_status)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Child"", ""died"", ""with"", ""signal"", ""%d"", ""WTERMSIG"", ""wait_status""], []]",[-10939874495164455938],189,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e7d274cd8125901600d2f302b9a108933b0c57a,4 Oct 2003,"Fix some misspellings.
",26,data/crawl/tar/hunk_230.cpp,,,data/crawl/tar/old_hunk_230.cpp,data/crawl/tar/new_hunk_230.cpp,3,3,"ERROR ((0, 0, _(""%s: Required occurence not found in archive""),
		  quotearg_colon (cursor->name)));","ERROR ((0, 0, _(""%s: Required occurrence not found in archive""),
		  quotearg_colon (cursor->name)));","[""updateContent""]","[[""occurence""], [""occurrence""]]",[-1986526115439876447],188,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=87fa28ed2abd92693a08e58523d7ab7f7c4563f0,17 Nov 2003,"Use new sparse file interface.
",163,data/crawl/tar/hunk_228.cpp,,,data/crawl/tar/old_hunk_228.cpp,data/crawl/tar/new_hunk_228.cpp,80,-1,"ERROR ((0, 0, _(""%s: invalid sparse archive member""),
	  current_stat_info.file_name));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""invalid"", ""sparse"", ""archive"", ""member"", ""current_stat_info"", ""file_name""], []]",[-16647139089506353265],187,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3999bf6360930179f08a1265ce8713705aafd405,17 Nov 2003,"(diff_sparse_files): Temporary placeholder.
",144,data/crawl/tar/hunk_227.cpp,,,data/crawl/tar/old_hunk_227.cpp,data/crawl/tar/new_hunk_227.cpp,146,-1,"report_difference (_(""Contents differ""));",,"[""removeLog""]","[[""report_difference"", ""_"", ""Contents"", ""differ""], []]",[-3008989081757579311],186,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a8b2b68c33e6166c8035f094574fc0d1d3459cd8,17 Nov 2003,"(sparse_diff_file): New function
",115,data/crawl/tar/hunk_226.cpp,,,data/crawl/tar/old_hunk_226.cpp,data/crawl/tar/new_hunk_226.cpp,-1,75,,"report_difference (file->stat_info, _(""Contents differ""));","[""addLog""]","[[], [""report_difference"", ""file"", ""stat_info"", ""_"", ""Contents"", ""differ""]]",[7886929892836532701],185,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a8b2b68c33e6166c8035f094574fc0d1d3459cd8,17 Nov 2003,"(sparse_diff_file): New function
",115,data/crawl/tar/hunk_226.cpp,,,data/crawl/tar/old_hunk_226.cpp,data/crawl/tar/new_hunk_226.cpp,-1,30,,"report_difference (file->stat_info,
			     _(""File fragment at %lu is not a hole""), beg);","[""addLog""]","[[], [""report_difference"", ""file"", ""stat_info"", ""_"", ""File"", ""fragment"", ""at"", ""%lu"", ""is"", ""not"", ""a"", ""hole"", ""beg""]]",[5998868597583368472],184,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d4e70d365615e56cadd4093aaa5c0046cf2c9c95,17 Nov 2003,"(sys_compare_uid,sys_compare_gid): New functions
 (sys_compare_uid_gid): Removed. (sys_compare_links): Changed declaration
",44,data/crawl/tar/hunk_224.cpp,,,data/crawl/tar/old_hunk_224.cpp,data/crawl/tar/new_hunk_224.cpp,18,-1,"report_difference (_(""Not linked to %s""),
			 quote (current_stat_info.link_name));",,"[""removeLog""]","[[""report_difference"", ""_"", ""Not"", ""linked"", ""to"", ""%s"", ""quote"", ""current_stat_info"", ""link_name""], []]",[7250871198660991535],183,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_215.cpp,,,data/crawl/tar/old_hunk_215.cpp,data/crawl/tar/new_hunk_215.cpp,-1,4,,"report_difference (&current_stat_info,
			     _(""Not linked to %s""),
			     quote (current_stat_info.link_name));","[""addLog""]","[[], [""report_difference"", ""&current_stat_info"", ""_"", ""Not"", ""linked"", ""to"", ""%s"", ""quote"", ""current_stat_info"", ""link_name""]]",[-1059888724539214920],182,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_213.cpp,,,data/crawl/tar/old_hunk_213.cpp,data/crawl/tar/new_hunk_213.cpp,-1,15,,"report_difference (&current_stat_info, _(""Gid differs""));","[""addLog""]","[[], [""report_difference"", ""&current_stat_info"", ""_"", ""Gid"", ""differs""]]",[6870484653702217889],181,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bb798080beec25634f7552934324b5f5c995707f,17 Nov 2003,"(diff_archive): Use sparse_diff_file.
",67,data/crawl/tar/hunk_213.cpp,,,data/crawl/tar/old_hunk_213.cpp,data/crawl/tar/new_hunk_213.cpp,-1,13,,"report_difference (&current_stat_info, _(""Uid differs""));","[""addLog""]","[[], [""report_difference"", ""&current_stat_info"", ""_"", ""Uid"", ""differs""]]",[9552451552519760115],180,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=2bda83b48d8a6807632312403561b11b79048443,5 Apr 2004,"Merge recent gnulib changes, and remove some lint.
",1583,data/crawl/tar/hunk_204.cpp,,,data/crawl/tar/old_hunk_204.cpp,data/crawl/tar/new_hunk_204.cpp,8,8,"ERROR ((0, 0,
	    ngettext (""%s: Wrote only %lu of %lu byte"",
		      ""%s: Wrote only %lu of %lu bytes"",
		      record_size),
	    name, (unsigned long) status, (unsigned long) record_size));","ERROR ((0, 0,
	    ngettext (""%s: Wrote only %lu of %lu byte"",
		      ""%s: Wrote only %lu of %lu bytes"",
		      size),
	    name, (unsigned long int) status, (unsigned long int) size));","[""updateVariable"", ""addVariable""]","[[""record_size"", ""record_size""], [""size"", ""int"", ""int"", ""size""]]",[-3068257891123962510],179,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=af244aeef3f45e0b431fd6fe8a7d2673ceefb254,26 Apr 2004,"Produce an error, not warning, if the filename is too long.
",26,data/crawl/tar/hunk_197.cpp,,,data/crawl/tar/old_hunk_197.cpp,data/crawl/tar/new_hunk_197.cpp,-1,3,,"ERROR ((0, 0, _(""%s: file name is too long (max %d); not dumped""),
		  quotearg_colon (st->file_name),
		  NAME_FIELD_SIZE - 1));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""file"", ""name"", ""is"", ""too"", ""long"", ""max"", ""%d"", ""not"", ""dumped"", ""quotearg_colon"", ""st"", ""file_name"", ""NAME_FIELD_SIZE"", ""1""]]",[18775317648244966455],178,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=af244aeef3f45e0b431fd6fe8a7d2673ceefb254,26 Apr 2004,"Produce an error, not warning, if the filename is too long.
",26,data/crawl/tar/hunk_196.cpp,,,data/crawl/tar/old_hunk_196.cpp,data/crawl/tar/new_hunk_196.cpp,-1,3,,"ERROR ((0, 0,
	      _(""%s: link name is too long; not dumped""),
	      quotearg_colon (st->link_name)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""link"", ""name"", ""is"", ""too"", ""long"", ""not"", ""dumped"", ""quotearg_colon"", ""st"", ""link_name""]]",[14188774638368687634],177,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=af244aeef3f45e0b431fd6fe8a7d2673ceefb254,26 Apr 2004,"Produce an error, not warning, if the filename is too long.
",26,data/crawl/tar/hunk_195.cpp,,,data/crawl/tar/old_hunk_195.cpp,data/crawl/tar/new_hunk_195.cpp,-1,12,,"ERROR ((0, 0,
	      _(""%s: file name is too long (cannot be split); not dumped""),
	      quotearg_colon (name)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""file"", ""name"", ""is"", ""too"", ""long"", ""cannot"", ""be"", ""split"", ""not"", ""dumped"", ""quotearg_colon"", ""name""]]",[8932084220615033312],176,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=af244aeef3f45e0b431fd6fe8a7d2673ceefb254,26 Apr 2004,"Produce an error, not warning, if the filename is too long.
",26,data/crawl/tar/hunk_195.cpp,,,data/crawl/tar/old_hunk_195.cpp,data/crawl/tar/new_hunk_195.cpp,-1,3,,"ERROR ((0, 0, _(""%s: file name is too long (max %d); not dumped""),
	      quotearg_colon (name),
	      PREFIX_FIELD_SIZE + NAME_FIELD_SIZE + 1));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""file"", ""name"", ""is"", ""too"", ""long"", ""max"", ""%d"", ""not"", ""dumped"", ""quotearg_colon"", ""name"", ""PREFIX_FIELD_SIZE"", ""NAME_FIELD_SIZE"", ""1""]]",[12257015381852335106],175,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_192.cpp,,,data/crawl/tar/old_hunk_192.cpp,data/crawl/tar/new_hunk_192.cpp,-1,635,,"argp_error (state, 
		  _(""Options `-[0-7][lmh]' not supported by *this* tar""));","[""addLog""]","[[], [""argp_error"", ""state"", ""_"", ""Options"", ""[0"", ""7][lmh]"", ""not"", ""supported"", ""by"", ""*this*"", ""tar""]]",[14461786638516887549],174,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_192.cpp,,,data/crawl/tar/old_hunk_192.cpp,data/crawl/tar/new_hunk_192.cpp,-1,616,,"argp_error (state, _(""Unknown density: '%c'""), arg[0]);","[""addLog""]","[[], [""argp_error"", ""state"", ""_"", ""Unknown"", ""density"", ""%c"", ""arg[0]""]]",[-6309327384205212977],173,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_192.cpp,,,data/crawl/tar/old_hunk_192.cpp,data/crawl/tar/new_hunk_192.cpp,-1,580,,"argp_error (state, _(""Malformed density argument: '%s'""), arg);","[""addLog""]","[[], [""argp_error"", ""state"", ""_"", ""Malformed"", ""density"", ""argument"", ""%s"", ""arg""]]",[-4330908513093132004],172,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,335,-1,"fputs (_(""\
\n\
The backup suffix is `~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\n\
The version control may be set with --backup or VERSION_CONTROL, values are:\n\
\n\
  t, numbered     make numbered backups\n\
  nil, existing   numbered if numbered backups exist, simple otherwise\n\
  never, simple   always make simple backups\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""The"", ""backup"", ""suffix"", ""is"", ""unless"", ""set"", ""with"", ""suffix"", ""or"", ""SIMPLE_BACKUP_SUFFIX"", ""\\n\\"", ""The"", ""version"", ""control"", ""may"", ""be"", ""set"", ""with"", ""backup"", ""or"", ""VERSION_CONTROL"", ""values"", ""are"", ""\\n\\"", ""\\n\\"", ""t"", ""numbered"", ""make"", ""numbered"", ""backups\\n\\"", ""nil"", ""existing"", ""numbered"", ""if"", ""numbered"", ""backups"", ""exist"", ""simple"", ""otherwise\\n\\"", ""never"", ""simple"", ""always"", ""make"", ""simple"", ""backups\\n"", ""stdout""], []]",[-26967424226269618290],171,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,328,-1,"fputs (_(""\
\n\
Compatibility options:\n\
  -o                                 when creating, same as --old-archive\n\
                                     when extracting, same as --no-same-owner\n""),
             stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Compatibility"", ""options"", ""\\n\\"", ""o"", ""when"", ""creating"", ""same"", ""as"", ""old"", ""archive\\n\\"", ""when"", ""extracting"", ""same"", ""as"", ""no"", ""same"", ""owner\\n"", ""stdout""], []]",[5038140337926352584],170,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,313,-1,"fputs (_(""\
\n\
Informative output:\n\
      --help            print this help, then exit\n\
      --version         print tar program version number, then exit\n\
  -v, --verbose         verbosely list files processed\n\
      --checkpoint      print directory names while reading the archive\n\
      --check-links     print a message if not all links are dumped\n\
      --totals          print total bytes written while creating archive\n\
      --index-file=FILE send verbose output to FILE\n\
      --utc             print file modification dates in UTC\n\
  -R, --block-number    show block number within archive with each message\n\
  -w, --interactive     ask for confirmation for every action\n\
      --confirmation    same as -w\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Informative"", ""output"", ""\\n\\"", ""help"", ""print"", ""this"", ""help"", ""then"", ""exit\\n\\"", ""version"", ""print"", ""tar"", ""program"", ""version"", ""number"", ""then"", ""exit\\n\\"", ""v"", ""verbose"", ""verbosely"", ""list"", ""files"", ""processed\\n\\"", ""checkpoint"", ""print"", ""directory"", ""names"", ""while"", ""reading"", ""the"", ""archive\\n\\"", ""check"", ""links"", ""print"", ""a"", ""message"", ""if"", ""not"", ""all"", ""links"", ""are"", ""dumped\\n\\"", ""totals"", ""print"", ""total"", ""bytes"", ""written"", ""while"", ""creating"", ""archive\\n\\"", ""index"", ""file"", ""FILE"", ""send"", ""verbose"", ""output"", ""to"", ""FILE\\n\\"", ""utc"", ""print"", ""file"", ""modification"", ""dates"", ""in"", ""UTC\\n\\"", ""R"", ""block"", ""number"", ""show"", ""block"", ""number"", ""within"", ""archive"", ""with"", ""each"", ""message\\n\\"", ""w"", ""interactive"", ""ask"", ""for"", ""confirmation"", ""for"", ""every"", ""action\\n\\"", ""confirmation"", ""same"", ""as"", ""w\\n"", ""stdout""], []]",[32604253414664690096],169,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,309,-1,"fputs (_(""\
      --backup[=CONTROL]       backup before removal, choose version control\n\
      --suffix=SUFFIX          backup before removal, override usual suffix\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""backup["", ""CONTROL]"", ""backup"", ""before"", ""removal"", ""choose"", ""version"", ""control\\n\\"", ""suffix"", ""SUFFIX"", ""backup"", ""before"", ""removal"", ""override"", ""usual"", ""suffix\\n"", ""stdout""], []]",[4021859043810316028],168,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,303,-1,"fputs (_(""\
  -N, --newer=DATE-OR-FILE     only store files newer than DATE-OR-FILE\n\
      --newer-mtime=DATE       compare date and time when data changed only\n\
      --after-date=DATE        same as -N\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""N"", ""newer"", ""DATE"", ""OR"", ""FILE"", ""only"", ""store"", ""files"", ""newer"", ""than"", ""DATE"", ""OR"", ""FILE\\n\\"", ""newer"", ""mtime"", ""DATE"", ""compare"", ""date"", ""and"", ""time"", ""when"", ""data"", ""changed"", ""only\\n\\"", ""after"", ""date"", ""DATE"", ""same"", ""as"", ""N\\n"", ""stdout""], []]",[77147533932236025248],167,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,278,-1,"fputs (_(""\
\n\
Local file selection:\n\
  -C, --directory=DIR          change to directory DIR\n\
  -T, --files-from=NAME        get names to extract or create from file NAME\n\
      --null                   -T reads null-terminated names, disable -C\n\
      --exclude=PATTERN        exclude files, given as a PATTERN\n\
  -X, --exclude-from=FILE      exclude patterns listed in FILE\n\
      --anchored               exclude patterns match file name start (default)\n\
      --no-anchored            exclude patterns match after any /\n\
      --ignore-case            exclusion ignores case\n\
      --no-ignore-case         exclusion is case sensitive (default)\n\
      --wildcards              exclude patterns use wildcards (default)\n\
      --no-wildcards           exclude patterns are plain strings\n\
      --wildcards-match-slash  exclude pattern wildcards match '/' (default)\n\
      --no-wildcards-match-slash exclude pattern wildcards do not match '/'\n\
  -P, --absolute-names         don't strip leading `/'s from file names\n\
  -h, --dereference            dump instead the files symlinks point to\n\
      --no-recursion           avoid descending automatically in directories\n\
  -l, --one-file-system        stay in local file system when creating archive\n\
  -K, --starting-file=NAME     begin at file NAME in the archive\n\
      --strip-components=NUM   strip NUM leading components from file names\n\
                               before extraction\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Local"", ""file"", ""selection"", ""\\n\\"", ""C"", ""directory"", ""DIR"", ""change"", ""to"", ""directory"", ""DIR\\n\\"", ""T"", ""files"", ""from"", ""NAME"", ""get"", ""names"", ""to"", ""extract"", ""or"", ""create"", ""from"", ""file"", ""NAME\\n\\"", ""null"", ""T"", ""reads"", ""null"", ""terminated"", ""names"", ""disable"", ""C\\n\\"", ""exclude"", ""PATTERN"", ""exclude"", ""files"", ""given"", ""as"", ""a"", ""PATTERN\\n\\"", ""X"", ""exclude"", ""from"", ""FILE"", ""exclude"", ""patterns"", ""listed"", ""in"", ""FILE\\n\\"", ""anchored"", ""exclude"", ""patterns"", ""match"", ""file"", ""name"", ""start"", ""default"", ""\\n\\"", ""no"", ""anchored"", ""exclude"", ""patterns"", ""match"", ""after"", ""any"", ""/\\n\\"", ""ignore"", ""case"", ""exclusion"", ""ignores"", ""case\\n\\"", ""no"", ""ignore"", ""case"", ""exclusion"", ""is"", ""case"", ""sensitive"", ""default"", ""\\n\\"", ""wildcards"", ""exclude"", ""patterns"", ""use"", ""wildcards"", ""default"", ""\\n\\"", ""no"", ""wildcards"", ""exclude"", ""patterns"", ""are"", ""plain"", ""strings\\n\\"", ""wildcards"", ""match"", ""slash"", ""exclude"", ""pattern"", ""wildcards"", ""match"", ""/"", ""default"", ""\\n\\"", ""no"", ""wildcards"", ""match"", ""slash"", ""exclude"", ""pattern"", ""wildcards"", ""do"", ""not"", ""match"", ""/"", ""\\n\\"", ""P"", ""absolute"", ""names"", ""don"", ""t"", ""strip"", ""leading"", ""/"", ""s"", ""from"", ""file"", ""names\\n\\"", ""h"", ""dereference"", ""dump"", ""instead"", ""the"", ""files"", ""symlinks"", ""point"", ""to\\n\\"", ""no"", ""recursion"", ""avoid"", ""descending"", ""automatically"", ""in"", ""directories\\n\\"", ""l"", ""one"", ""file"", ""system"", ""stay"", ""in"", ""local"", ""file"", ""system"", ""when"", ""creating"", ""archive\\n\\"", ""K"", ""starting"", ""file"", ""NAME"", ""begin"", ""at"", ""file"", ""NAME"", ""in"", ""the"", ""archive\\n\\"", ""strip"", ""components"", ""NUM"", ""strip"", ""NUM"", ""leading"", ""components"", ""from"", ""file"", ""names\\n\\"", ""before"", ""extraction\\n"", ""stdout""], []]",[22099561633541892100],166,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,257,-1,"fputs (_(""\
\n\
Archive format selection:\n\
      --format=FMTNAME               create archive of the given format.\n\
                                     FMTNAME is one of the following:\n\
                                     v7        old V7 tar format\n\
                                     oldgnu    GNU format as per tar <= 1.12\n\
                                     gnu       GNU tar 1.13 format\n\
                                     ustar     POSIX 1003.1-1988 (ustar) format\n\
                                     posix     POSIX 1003.1-2001 (pax) format\n\
      --old-archive, --portability   same as --format=v7\n\
      --posix                        same as --format=posix\n\
  --pax-option keyword[[:]=value][,keyword[[:]=value], ...]\n\
                                     control pax keywords\n\
  -V, --label=NAME                   create archive with volume name NAME\n\
              PATTERN                at list/extract time, a globbing PATTERN\n\
  -j, --bzip2                        filter the archive through bzip2\n\
  -z, --gzip, --ungzip               filter the archive through gzip\n\
  -Z, --compress, --uncompress       filter the archive through compress\n\
      --use-compress-program=PROG    filter through PROG (must accept -d)\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Archive"", ""format"", ""selection"", ""\\n\\"", ""format"", ""FMTNAME"", ""create"", ""archive"", ""of"", ""the"", ""given"", ""format"", ""\\n\\"", ""FMTNAME"", ""is"", ""one"", ""of"", ""the"", ""following"", ""\\n\\"", ""v7"", ""old"", ""V7"", ""tar"", ""format\\n\\"", ""oldgnu"", ""GNU"", ""format"", ""as"", ""per"", ""tar"", ""1"", ""12\\n\\"", ""gnu"", ""GNU"", ""tar"", ""1"", ""13"", ""format\\n\\"", ""ustar"", ""POSIX"", ""1003"", ""1"", ""1988"", ""ustar"", ""format\\n\\"", ""posix"", ""POSIX"", ""1003"", ""1"", ""2001"", ""pax"", ""format\\n\\"", ""old"", ""archive"", ""portability"", ""same"", ""as"", ""format"", ""v7\\n\\"", ""posix"", ""same"", ""as"", ""format"", ""posix\\n\\"", ""pax"", ""option"", ""keyword[["", ""]"", ""value]["", ""keyword[["", ""]"", ""value]"", ""]\\n\\"", ""control"", ""pax"", ""keywords\\n\\"", ""V"", ""label"", ""NAME"", ""create"", ""archive"", ""with"", ""volume"", ""name"", ""NAME\\n\\"", ""PATTERN"", ""at"", ""list/extract"", ""time"", ""a"", ""globbing"", ""PATTERN\\n\\"", ""j"", ""bzip2"", ""filter"", ""the"", ""archive"", ""through"", ""bzip2\\n\\"", ""z"", ""gzip"", ""ungzip"", ""filter"", ""the"", ""archive"", ""through"", ""gzip\\n\\"", ""Z"", ""compress"", ""uncompress"", ""filter"", ""the"", ""archive"", ""through"", ""compress\\n\\"", ""use"", ""compress"", ""program"", ""PROG"", ""filter"", ""through"", ""PROG"", ""must"", ""accept"", ""d"", ""\\n"", ""stdout""], []]",[-61988621076173324783],165,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,249,-1,"fputs (_(""\
\n\
Device blocking:\n\
  -b, --blocking-factor=BLOCKS   BLOCKS x 512 bytes per record\n\
      --record-size=SIZE         SIZE bytes per record, multiple of 512\n\
  -i, --ignore-zeros             ignore zeroed blocks in archive (means EOF)\n\
  -B, --read-full-records        reblock as we read (for 4.2BSD pipes)\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Device"", ""blocking"", ""\\n\\"", ""b"", ""blocking"", ""factor"", ""BLOCKS"", ""BLOCKS"", ""x"", ""512"", ""bytes"", ""per"", ""record\\n\\"", ""record"", ""size"", ""SIZE"", ""SIZE"", ""bytes"", ""per"", ""record"", ""multiple"", ""of"", ""512\\n\\"", ""i"", ""ignore"", ""zeros"", ""ignore"", ""zeroed"", ""blocks"", ""in"", ""archive"", ""means"", ""EOF"", ""\\n\\"", ""B"", ""read"", ""full"", ""records"", ""reblock"", ""as"", ""we"", ""read"", ""for"", ""4"", ""2BSD"", ""pipes"", ""\\n"", ""stdout""], []]",[7070861217283942851],164,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,235,-1,"fputs (_(""\
\n\
Device selection and switching:\n\
  -f, --file=ARCHIVE             use archive file or device ARCHIVE\n\
      --force-local              archive file is local even if has a colon\n\
      --rmt-command=COMMAND      use given rmt COMMAND instead of /etc/rmt\n\
      --rsh-command=COMMAND      use remote COMMAND instead of rsh\n\
  -[0-7][lmh]                    specify drive and density\n\
  -M, --multi-volume             create/list/extract multi-volume archive\n\
  -L, --tape-length=NUM          change tape after writing NUM x 1024 bytes\n\
  -F, --info-script=FILE         run script at end of each tape (implies -M)\n\
      --new-volume-script=FILE   same as -F FILE\n\
      --volno-file=FILE          use/update the volume number in FILE\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Device"", ""selection"", ""and"", ""switching"", ""\\n\\"", ""f"", ""file"", ""ARCHIVE"", ""use"", ""archive"", ""file"", ""or"", ""device"", ""ARCHIVE\\n\\"", ""force"", ""local"", ""archive"", ""file"", ""is"", ""local"", ""even"", ""if"", ""has"", ""a"", ""colon\\n\\"", ""rmt"", ""command"", ""COMMAND"", ""use"", ""given"", ""rmt"", ""COMMAND"", ""instead"", ""of"", ""/etc/rmt\\n\\"", ""rsh"", ""command"", ""COMMAND"", ""use"", ""remote"", ""COMMAND"", ""instead"", ""of"", ""rsh\\n\\"", ""[0"", ""7][lmh]"", ""specify"", ""drive"", ""and"", ""density\\n\\"", ""M"", ""multi"", ""volume"", ""create/list/extract"", ""multi"", ""volume"", ""archive\\n\\"", ""L"", ""tape"", ""length"", ""NUM"", ""change"", ""tape"", ""after"", ""writing"", ""NUM"", ""x"", ""1024"", ""bytes\\n\\"", ""F"", ""info"", ""script"", ""FILE"", ""run"", ""script"", ""at"", ""end"", ""of"", ""each"", ""tape"", ""implies"", ""M"", ""\\n\\"", ""new"", ""volume"", ""script"", ""FILE"", ""same"", ""as"", ""F"", ""FILE\\n\\"", ""volno"", ""file"", ""FILE"", ""use/update"", ""the"", ""volume"", ""number"", ""in"", ""FILE\\n"", ""stdout""], []]",[-67655929579274041397],163,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,217,-1,"fputs (_(""\
\n\
Handling of file attributes:\n\
      --owner=NAME             force NAME as owner for added files\n\
      --group=NAME             force NAME as group for added files\n\
      --mode=CHANGES           force (symbolic) mode CHANGES for added files\n\
      --atime-preserve         don't change access times on dumped files\n\
  -m, --modification-time      don't extract file modified time\n\
      --same-owner             try extracting files with the same ownership\n\
      --no-same-owner          extract files as yourself\n\
      --numeric-owner          always use numbers for user/group names\n\
  -p, --same-permissions       extract permissions information\n\
      --no-same-permissions    do not extract permissions information\n\
      --preserve-permissions   same as -p\n\
  -s, --same-order             sort names to extract to match archive\n\
      --preserve-order         same as -s\n\
      --preserve               same as both -p and -s\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Handling"", ""of"", ""file"", ""attributes"", ""\\n\\"", ""owner"", ""NAME"", ""force"", ""NAME"", ""as"", ""owner"", ""for"", ""added"", ""files\\n\\"", ""group"", ""NAME"", ""force"", ""NAME"", ""as"", ""group"", ""for"", ""added"", ""files\\n\\"", ""mode"", ""CHANGES"", ""force"", ""symbolic"", ""mode"", ""CHANGES"", ""for"", ""added"", ""files\\n\\"", ""atime"", ""preserve"", ""don"", ""t"", ""change"", ""access"", ""times"", ""on"", ""dumped"", ""files\\n\\"", ""m"", ""modification"", ""time"", ""don"", ""t"", ""extract"", ""file"", ""modified"", ""time\\n\\"", ""same"", ""owner"", ""try"", ""extracting"", ""files"", ""with"", ""the"", ""same"", ""ownership\\n\\"", ""no"", ""same"", ""owner"", ""extract"", ""files"", ""as"", ""yourself\\n\\"", ""numeric"", ""owner"", ""always"", ""use"", ""numbers"", ""for"", ""user/group"", ""names\\n\\"", ""p"", ""same"", ""permissions"", ""extract"", ""permissions"", ""information\\n\\"", ""no"", ""same"", ""permissions"", ""do"", ""not"", ""extract"", ""permissions"", ""information\\n\\"", ""preserve"", ""permissions"", ""same"", ""as"", ""p\\n\\"", ""s"", ""same"", ""order"", ""sort"", ""names"", ""to"", ""extract"", ""to"", ""match"", ""archive\\n\\"", ""preserve"", ""order"", ""same"", ""as"", ""s\\n\\"", ""preserve"", ""same"", ""as"", ""both"", ""p"", ""and"", ""s\\n"", ""stdout""], []]",[182398391449054095997],162,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,191,-1,"fputs (_(""\
\n\
Operation modifiers:\n\
  -W, --verify               attempt to verify the archive after writing it\n\
      --remove-files         remove files after adding them to the archive\n\
  -k, --keep-old-files       don't replace existing files when extracting\n\
      --keep-newer-files     don't replace existing files that are newer\n\
                             than their archive copies\n\
      --overwrite            overwrite existing files when extracting\n\
      --no-overwrite-dir     preserve metadata of existing directories\n\
  -U, --unlink-first         remove each file prior to extracting over it\n\
      --recursive-unlink     empty hierarchies prior to extracting directory\n\
  -S, --sparse               handle sparse files efficiently\n\
  -O, --to-stdout            extract files to standard output\n\
  -G, --incremental          handle old GNU-format incremental backup\n\
  -g, --listed-incremental=FILE\n\
                             handle new GNU-format incremental backup\n\
      --ignore-failed-read   do not exit with nonzero on unreadable files\n\
      --occurrence[=NUM]     process only the NUMth occurrence of each file in\n\
                             the archive. This option is valid only in\n\
                             conjunction with one of the subcommands --delete,\n\
                             --diff, --extract or --list and when a list of\n\
                             files is given either on the command line or\n\
                             via -T option.\n\
                             NUM defaults to 1.\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Operation"", ""modifiers"", ""\\n\\"", ""W"", ""verify"", ""attempt"", ""to"", ""verify"", ""the"", ""archive"", ""after"", ""writing"", ""it\\n\\"", ""remove"", ""files"", ""remove"", ""files"", ""after"", ""adding"", ""them"", ""to"", ""the"", ""archive\\n\\"", ""k"", ""keep"", ""old"", ""files"", ""don"", ""t"", ""replace"", ""existing"", ""files"", ""when"", ""extracting\\n\\"", ""keep"", ""newer"", ""files"", ""don"", ""t"", ""replace"", ""existing"", ""files"", ""that"", ""are"", ""newer\\n\\"", ""than"", ""their"", ""archive"", ""copies\\n\\"", ""overwrite"", ""overwrite"", ""existing"", ""files"", ""when"", ""extracting\\n\\"", ""no"", ""overwrite"", ""dir"", ""preserve"", ""metadata"", ""of"", ""existing"", ""directories\\n\\"", ""U"", ""unlink"", ""first"", ""remove"", ""each"", ""file"", ""prior"", ""to"", ""extracting"", ""over"", ""it\\n\\"", ""recursive"", ""unlink"", ""empty"", ""hierarchies"", ""prior"", ""to"", ""extracting"", ""directory\\n\\"", ""S"", ""sparse"", ""handle"", ""sparse"", ""files"", ""efficiently\\n\\"", ""O"", ""to"", ""stdout"", ""extract"", ""files"", ""to"", ""standard"", ""output\\n\\"", ""G"", ""incremental"", ""handle"", ""old"", ""GNU"", ""format"", ""incremental"", ""backup\\n\\"", ""g"", ""listed"", ""incremental"", ""FILE\\n\\"", ""handle"", ""new"", ""GNU"", ""format"", ""incremental"", ""backup\\n\\"", ""ignore"", ""failed"", ""read"", ""do"", ""not"", ""exit"", ""with"", ""nonzero"", ""on"", ""unreadable"", ""files\\n\\"", ""occurrence["", ""NUM]"", ""process"", ""only"", ""the"", ""NUMth"", ""occurrence"", ""of"", ""each"", ""file"", ""in\\n\\"", ""the"", ""archive"", ""This"", ""option"", ""is"", ""valid"", ""only"", ""in\\n\\"", ""conjunction"", ""with"", ""one"", ""of"", ""the"", ""subcommands"", ""delete"", ""\\n\\"", ""diff"", ""extract"", ""or"", ""list"", ""and"", ""when"", ""a"", ""list"", ""of\\n\\"", ""files"", ""is"", ""given"", ""either"", ""on"", ""the"", ""command"", ""line"", ""or\\n\\"", ""via"", ""T"", ""option"", ""\\n\\"", ""NUM"", ""defaults"", ""to"", ""1"", ""\\n"", ""stdout""], []]",[-91544661179817744662],161,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,178,-1,"fputs(_(""\
\n\
Main operation mode:\n\
  -t, --list              list the contents of an archive\n\
  -x, --extract, --get    extract files from an archive\n\
  -c, --create            create a new archive\n\
  -d, --diff, --compare   find differences between archive and file system\n\
  -r, --append            append files to the end of an archive\n\
  -u, --update            only append files newer than copy in archive\n\
  -A, --catenate          append tar files to an archive\n\
      --concatenate       same as -A\n\
      --delete            delete from the archive (not on mag tapes!)\n""),
	    stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""Main"", ""operation"", ""mode"", ""\\n\\"", ""t"", ""list"", ""list"", ""the"", ""contents"", ""of"", ""an"", ""archive\\n\\"", ""x"", ""extract"", ""get"", ""extract"", ""files"", ""from"", ""an"", ""archive\\n\\"", ""c"", ""create"", ""create"", ""a"", ""new"", ""archive\\n\\"", ""d"", ""diff"", ""compare"", ""find"", ""differences"", ""between"", ""archive"", ""and"", ""file"", ""system\\n\\"", ""r"", ""append"", ""append"", ""files"", ""to"", ""the"", ""end"", ""of"", ""an"", ""archive\\n\\"", ""u"", ""update"", ""only"", ""append"", ""files"", ""newer"", ""than"", ""copy"", ""in"", ""archive\\n\\"", ""A"", ""catenate"", ""append"", ""tar"", ""files"", ""to"", ""an"", ""archive\\n\\"", ""concatenate"", ""same"", ""as"", ""A\\n\\"", ""delete"", ""delete"", ""from"", ""the"", ""archive"", ""not"", ""on"", ""mag"", ""tapes"", ""\\n"", ""stdout""], []]",[-29649226925329250128],160,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,173,-1,"fputs (_(""\
\n\
If a long option shows an argument as mandatory, then it is mandatory\n\
for the equivalent short option also.  Similarly for optional arguments.\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""\\n\\"", ""If"", ""a"", ""long"", ""option"", ""shows"", ""an"", ""argument"", ""as"", ""mandatory"", ""then"", ""it"", ""is"", ""mandatory\\n\\"", ""for"", ""the"", ""equivalent"", ""short"", ""option"", ""also"", ""Similarly"", ""for"", ""optional"", ""arguments"", ""\\n"", ""stdout""], []]",[19005408191001547579],159,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a447fd3714cbcb37950f399390809f797b0633ec,16 May 2004,"Use argp for command line parsing.
",2030,data/crawl/tar/hunk_191.cpp,,,data/crawl/tar/old_hunk_191.cpp,data/crawl/tar/new_hunk_191.cpp,162,-1,"fputs (_(""\
GNU `tar' saves many files together into a single tape or disk archive, and\n\
can restore individual files from the archive.\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""GNU"", ""tar"", ""saves"", ""many"", ""files"", ""together"", ""into"", ""a"", ""single"", ""tape"", ""or"", ""disk"", ""archive"", ""and\\n\\"", ""can"", ""restore"", ""individual"", ""files"", ""from"", ""the"", ""archive"", ""\\n"", ""stdout""], []]",[27458376337825040884],158,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=e4afe72b7a026c6df07ed563c5d92147c5c3bd6e,10 Jul 2004,"src/extract.c (extract_archive): Do not report an error when
 hard-linking X to X when X exists.
",32,data/crawl/tar/hunk_190.cpp,,,data/crawl/tar/old_hunk_190.cpp,data/crawl/tar/new_hunk_190.cpp,-1,2,,/extract.c (extract_archive);,"[""addLog""]","[[], [""/extract"", ""c"", ""extract_archive""]]",[-13177726539201928101],157,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=7347b4f5d51c15bb19637ea52e9bf7dff832cc52,6 Sep 2004,"Started merging with cpio into paxutils.
",2224,data/crawl/tar/hunk_188.cpp,,,data/crawl/tar/old_hunk_188.cpp,data/crawl/tar/new_hunk_188.cpp,506,-1,"error (EXIT_ON_EXEC_ERROR, errno, _(""Cannot execute remote shell""));",,"[""removeLog""]","[[""error"", ""EXIT_ON_EXEC_ERROR"", ""errno"", ""_"", ""Cannot"", ""execute"", ""remote"", ""shell""], []]",[-12165312339372634679],156,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=7347b4f5d51c15bb19637ea52e9bf7dff832cc52,6 Sep 2004,"Started merging with cpio into paxutils.
",2224,data/crawl/tar/hunk_188.cpp,,,data/crawl/tar/old_hunk_188.cpp,data/crawl/tar/new_hunk_188.cpp,298,-1,"error (0, errno, _(""stdout""));",,"[""removeLog""]","[[""error"", ""0"", ""errno"", ""_"", ""stdout""], []]",[-7848754778167234870],155,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=7347b4f5d51c15bb19637ea52e9bf7dff832cc52,6 Sep 2004,"Started merging with cpio into paxutils.
",2224,data/crawl/tar/hunk_188.cpp,,,data/crawl/tar/old_hunk_188.cpp,data/crawl/tar/new_hunk_188.cpp,295,-1,"error (0, errno, _(""stdin""));",,"[""removeLog""]","[[""error"", ""0"", ""errno"", ""_"", ""stdin""], []]",[-18904346838957796762],154,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=7347b4f5d51c15bb19637ea52e9bf7dff832cc52,6 Sep 2004,"Started merging with cpio into paxutils.
",2224,data/crawl/tar/hunk_188.cpp,,,data/crawl/tar/old_hunk_188.cpp,data/crawl/tar/new_hunk_188.cpp,291,-1,"error (EXIT_ON_EXEC_ERROR, 0, _(""exec/tcp: Service not available""));",,"[""removeLog""]","[[""error"", ""EXIT_ON_EXEC_ERROR"", ""0"", ""_"", ""exec/tcp"", ""Service"", ""not"", ""available""], []]",[-14711424415818167180],153,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=00478f4bd3c475d41a151d797c19a1c6c2d0daf5,7 Sep 2004,"Integrated into paxutils.
",171,data/crawl/tar/hunk_186.cpp,,,data/crawl/tar/old_hunk_186.cpp,data/crawl/tar/new_hunk_186.cpp,69,-1,"fputs (_(""\
If a long option shows an argument as mandatory, then it is mandatory\n\
for the equivalent short option also.\n\
\n\
  -l, --file-length=LENGTH   LENGTH of generated file\n\
  -p, --pattern=PATTERN      PATTERN is `default' or `zeros'\n\
      --help                 display this help and exit\n\
      --version              output version information and exit\n""),
	     stdout);",,"[""removeLog""]","[[""fputs"", ""_"", ""\\"", ""If"", ""a"", ""long"", ""option"", ""shows"", ""an"", ""argument"", ""as"", ""mandatory"", ""then"", ""it"", ""is"", ""mandatory\\n\\"", ""for"", ""the"", ""equivalent"", ""short"", ""option"", ""also"", ""\\n\\"", ""\\n\\"", ""l"", ""file"", ""length"", ""LENGTH"", ""LENGTH"", ""of"", ""generated"", ""file\\n\\"", ""p"", ""pattern"", ""PATTERN"", ""PATTERN"", ""is"", ""default"", ""or"", ""zeros"", ""\\n\\"", ""help"", ""display"", ""this"", ""help"", ""and"", ""exit\\n\\"", ""version"", ""output"", ""version"", ""information"", ""and"", ""exit\\n"", ""stdout""], []]",[-39669424862579220703],152,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c8764440d9cb0187fcbabe26e7f6191c0148178e,4 Feb 2005,"(extract_archive): Rewritten
",836,data/crawl/tar/hunk_180.cpp,,,data/crawl/tar/old_hunk_180.cpp,data/crawl/tar/new_hunk_180.cpp,3,3,"ERROR ((0, 0, _(""Visible long name error"")));","ERROR ((0, 0, _(""Unexpected long name header"")));","[""updateContent""]","[[""Visible"", ""error""], [""Unexpected"", ""header""]]",[-12617458396691953908],151,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e2e868af584e5e922948424545f73dc54fb634a,4 Feb 2005,"Add translators' comments
",9,data/crawl/tar/hunk_177.cpp,,,data/crawl/tar/old_hunk_177.cpp,data/crawl/tar/new_hunk_177.cpp,3,3,"ERROR ((0, 0, _(""Visible longname error"")));","ERROR ((0, 0, _(""Unexpected long name header"")));","[""updateContent""]","[[""Visible"", ""longname"", ""error""], [""Unexpected"", ""long"", ""name"", ""header""]]",[-18410359884912939992],150,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=75a16f75a954f16eff5a076aa4bb51ded85e70b7,5 Feb 2005,"(exec_error, fork_error, dup_error,pipe_error): New functions
",24,data/crawl/tar/hunk_171.cpp,,,data/crawl/tar/old_hunk_171.cpp,data/crawl/tar/new_hunk_171.cpp,-1,23,,"call_arg_error (""pipe"", name);","[""addLog""]","[[], [""call_arg_error"", ""pipe"", ""name""]]",[-5899432776131278271],149,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=75a16f75a954f16eff5a076aa4bb51ded85e70b7,5 Feb 2005,"(exec_error, fork_error, dup_error,pipe_error): New functions
",24,data/crawl/tar/hunk_171.cpp,,,data/crawl/tar/old_hunk_171.cpp,data/crawl/tar/new_hunk_171.cpp,-1,17,,"call_arg_error (""dup2"", name);","[""addLog""]","[[], [""call_arg_error"", ""dup2"", ""name""]]",[-18860646194327457128],148,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=75a16f75a954f16eff5a076aa4bb51ded85e70b7,5 Feb 2005,"(exec_error, fork_error, dup_error,pipe_error): New functions
",24,data/crawl/tar/hunk_171.cpp,,,data/crawl/tar/old_hunk_171.cpp,data/crawl/tar/new_hunk_171.cpp,-1,11,,"call_arg_error (""fork"", name);","[""addLog""]","[[], [""call_arg_error"", ""fork"", ""name""]]",[-10551519933358910063],147,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=75a16f75a954f16eff5a076aa4bb51ded85e70b7,5 Feb 2005,"(exec_error, fork_error, dup_error,pipe_error): New functions
",24,data/crawl/tar/hunk_171.cpp,,,data/crawl/tar/old_hunk_171.cpp,data/crawl/tar/new_hunk_171.cpp,-1,5,,"call_arg_error (""exec"", name);","[""addLog""]","[[], [""call_arg_error"", ""exec"", ""name""]]",[-14706215064511184360],146,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0b939d7dbc87703afe765410202d2781f3f7b222,5 Feb 2005,"(sys_exec_command,sys_wait_command): New functions
",165,data/crawl/tar/hunk_170.cpp,,,data/crawl/tar/old_hunk_170.cpp,data/crawl/tar/new_hunk_170.cpp,-1,162,,"ERROR ((0, 0, _(""%lu: Child terminated on unknown reason""),
	    (unsigned long) pid, WTERMSIG (status)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%lu"", ""Child"", ""terminated"", ""on"", ""unknown"", ""reason"", ""unsigned"", ""long"", ""pid"", ""WTERMSIG"", ""status""]]",[-8516871229394447823],145,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0b939d7dbc87703afe765410202d2781f3f7b222,5 Feb 2005,"(sys_exec_command,sys_wait_command): New functions
",165,data/crawl/tar/hunk_170.cpp,,,data/crawl/tar/old_hunk_170.cpp,data/crawl/tar/new_hunk_170.cpp,-1,153,,"ERROR ((0, 0, _(""%lu: Child returned status %d""),
		(unsigned long) pid, WEXITSTATUS (status)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%lu"", ""Child"", ""returned"", ""status"", ""%d"", ""unsigned"", ""long"", ""pid"", ""WEXITSTATUS"", ""status""]]",[-8022739327228330880],144,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a71d32d2f16989a8c82d3946d4f7ecd6093a55a,5 Feb 2005,"Code clean up.
",489,data/crawl/tar/hunk_168.cpp,,,data/crawl/tar/old_hunk_168.cpp,data/crawl/tar/new_hunk_168.cpp,183,-1,"report_difference (&current_stat_info, _(""File type differs""));",,"[""removeLog""]","[[""report_difference"", ""&current_stat_info"", ""_"", ""File"", ""type"", ""differs""], []]",[-13978244838295874112],143,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a71d32d2f16989a8c82d3946d4f7ecd6093a55a,5 Feb 2005,"Code clean up.
",489,data/crawl/tar/hunk_168.cpp,,,data/crawl/tar/old_hunk_168.cpp,data/crawl/tar/new_hunk_168.cpp,162,-1,"report_difference (&current_stat_info, _(""Mode differs""));",,"[""removeLog""]","[[""report_difference"", ""&current_stat_info"", ""_"", ""Mode"", ""differs""], []]",[-3852723382706295779],142,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a71d32d2f16989a8c82d3946d4f7ecd6093a55a,5 Feb 2005,"Code clean up.
",489,data/crawl/tar/hunk_167.cpp,,,data/crawl/tar/old_hunk_167.cpp,data/crawl/tar/new_hunk_167.cpp,-1,16,,"report_difference (&current_stat_info, _(""Mode differs""));","[""addLog""]","[[], [""report_difference"", ""&current_stat_info"", ""_"", ""Mode"", ""differs""]]",[3852723382706295779],141,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a71d32d2f16989a8c82d3946d4f7ecd6093a55a,5 Feb 2005,"Code clean up.
",489,data/crawl/tar/hunk_167.cpp,,,data/crawl/tar/old_hunk_167.cpp,data/crawl/tar/new_hunk_167.cpp,-1,13,,"report_difference (&current_stat_info, _(""File type differs""));","[""addLog""]","[[], [""report_difference"", ""&current_stat_info"", ""_"", ""File"", ""type"", ""differs""]]",[13978244838295874112],140,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a71d32d2f16989a8c82d3946d4f7ecd6093a55a,5 Feb 2005,"Code clean up.
",489,data/crawl/tar/hunk_167.cpp,,,data/crawl/tar/old_hunk_167.cpp,data/crawl/tar/new_hunk_167.cpp,26,-1,"ERROR ((0, 0, _(""%s: Unknown file type '%c', diffed as normal file""),
	      quotearg_colon (current_stat_info.file_name),
	      current_header->header.typeflag));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Unknown"", ""file"", ""type"", ""%c"", ""diffed"", ""as"", ""normal"", ""file"", ""quotearg_colon"", ""current_stat_info"", ""file_name"", ""current_header"", ""header"", ""typeflag""], []]",[9769860923353638288],139,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fa63755f6bf50d67c4403a709a4ff5d02ad23ef3,5 Feb 2005,"(exec_error,fork_error,dup2_error,pipe_error): Removed unneeded
 functions.
",24,data/crawl/tar/hunk_165.cpp,,,data/crawl/tar/old_hunk_165.cpp,data/crawl/tar/new_hunk_165.cpp,23,-1,"call_arg_error (""pipe"", name);",,"[""removeLog""]","[[""call_arg_error"", ""pipe"", ""name""], []]",[5899432776131278271],138,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fa63755f6bf50d67c4403a709a4ff5d02ad23ef3,5 Feb 2005,"(exec_error,fork_error,dup2_error,pipe_error): Removed unneeded
 functions.
",24,data/crawl/tar/hunk_165.cpp,,,data/crawl/tar/old_hunk_165.cpp,data/crawl/tar/new_hunk_165.cpp,17,-1,"call_arg_error (""dup2"", name);",,"[""removeLog""]","[[""call_arg_error"", ""dup2"", ""name""], []]",[18860646194327457128],137,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fa63755f6bf50d67c4403a709a4ff5d02ad23ef3,5 Feb 2005,"(exec_error,fork_error,dup2_error,pipe_error): Removed unneeded
 functions.
",24,data/crawl/tar/hunk_165.cpp,,,data/crawl/tar/old_hunk_165.cpp,data/crawl/tar/new_hunk_165.cpp,11,-1,"call_arg_error (""fork"", name);",,"[""removeLog""]","[[""call_arg_error"", ""fork"", ""name""], []]",[10551519933358910063],136,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=fa63755f6bf50d67c4403a709a4ff5d02ad23ef3,5 Feb 2005,"(exec_error,fork_error,dup2_error,pipe_error): Removed unneeded
 functions.
",24,data/crawl/tar/hunk_165.cpp,,,data/crawl/tar/old_hunk_165.cpp,data/crawl/tar/new_hunk_165.cpp,5,-1,"call_arg_error (""exec"", name);",,"[""removeLog""]","[[""call_arg_error"", ""exec"", ""name""], []]",[14706215064511184360],135,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=95fa3422d7365bfec419cb6537da6d9e0efbab83,2 Apr 2005,"(decode_record): Don't dump core when given a corrupted extended
 header.  Problem reported by Jim Meyering. Also, check for other ways that
 the header might be invalid, e.g., missing newline at end.  Do not allow keys
 with nulls. Allow blanks before and after length, as POSIX requires. Do not
 allow leading ""-"" in length.  Check for length overflow. (xheader_decode,
 xheader_decode_global): Let decode_record check for exhaustion of record.
 (xheader_read): Null-terminate the extended record; decode_record relies on
 this.
",87,data/crawl/tar/hunk_163.cpp,,,data/crawl/tar/old_hunk_163.cpp,data/crawl/tar/new_hunk_163.cpp,-1,58,,"ERROR ((0, 0, _(""Malformed extended header: missing newline"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""missing"", ""newline""]]",[5877767992320056755],134,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=95fa3422d7365bfec419cb6537da6d9e0efbab83,2 Apr 2005,"(decode_record): Don't dump core when given a corrupted extended
 header.  Problem reported by Jim Meyering. Also, check for other ways that
 the header might be invalid, e.g., missing newline at end.  Do not allow keys
 with nulls. Allow blanks before and after length, as POSIX requires. Do not
 allow leading ""-"" in length.  Check for length overflow. (xheader_decode,
 xheader_decode_global): Let decode_record check for exhaustion of record.
 (xheader_read): Null-terminate the extended record; decode_record relies on
 this.
",87,data/crawl/tar/hunk_163.cpp,,,data/crawl/tar/old_hunk_163.cpp,data/crawl/tar/new_hunk_163.cpp,-1,43,,"ERROR ((0, 0,
	      _(""Malformed extended header: missing blank after length"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""missing"", ""blank"", ""after"", ""length""]]",[5767186269756115388],133,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=95fa3422d7365bfec419cb6537da6d9e0efbab83,2 Apr 2005,"(decode_record): Don't dump core when given a corrupted extended
 header.  Problem reported by Jim Meyering. Also, check for other ways that
 the header might be invalid, e.g., missing newline at end.  Do not allow keys
 with nulls. Allow blanks before and after length, as POSIX requires. Do not
 allow leading ""-"" in length.  Check for length overflow. (xheader_decode,
 xheader_decode_global): Let decode_record check for exhaustion of record.
 (xheader_read): Null-terminate the extended record; decode_record relies on
 this.
",87,data/crawl/tar/hunk_163.cpp,,,data/crawl/tar/old_hunk_163.cpp,data/crawl/tar/new_hunk_163.cpp,-1,24,,"ERROR ((0, 0, _(""Malformed extended header: missing length"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""missing"", ""length""]]",[18580801813170271450],132,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=95fa3422d7365bfec419cb6537da6d9e0efbab83,2 Apr 2005,"(decode_record): Don't dump core when given a corrupted extended
 header.  Problem reported by Jim Meyering. Also, check for other ways that
 the header might be invalid, e.g., missing newline at end.  Do not allow keys
 with nulls. Allow blanks before and after length, as POSIX requires. Do not
 allow leading ""-"" in length.  Check for length overflow. (xheader_decode,
 xheader_decode_global): Let decode_record check for exhaustion of record.
 (xheader_read): Null-terminate the extended record; decode_record relies on
 this.
",87,data/crawl/tar/hunk_163.cpp,,,data/crawl/tar/old_hunk_163.cpp,data/crawl/tar/new_hunk_163.cpp,22,33,"ERROR ((0, 0,
       _(""Malformed extended header: missing whitespace after the length"")));","ERROR ((0, 0, _(""Malformed extended header: length out of range"")));","[""updateContent""]","[[""missing"", ""whitespace"", ""after"", ""the""], [""out"", ""of"", ""range""]]",[2634587406636130633],131,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_157.cpp,,,data/crawl/tar/old_hunk_157.cpp,data/crawl/tar/new_hunk_157.cpp,44,-1,"ERROR ((0, 0,
	    ngettext (""%s: Wrote only %lu of %lu byte"",
		      ""%s: Wrote only %lu of %lu bytes"",
		      size),
	    name, (unsigned long int) status, (unsigned long int) size));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""ngettext"", ""%s"", ""Wrote"", ""only"", ""%lu"", ""of"", ""%lu"", ""byte"", ""%s"", ""Wrote"", ""only"", ""%lu"", ""of"", ""%lu"", ""bytes"", ""size"", ""name"", ""unsigned"", ""long"", ""int"", ""status"", ""unsigned"", ""long"", ""int"", ""size""], []]",[21545638143288035199],130,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_157.cpp,,,data/crawl/tar/old_hunk_157.cpp,data/crawl/tar/new_hunk_157.cpp,35,-1,"call_arg_error (""write"", name);",,"[""removeLog""]","[[""call_arg_error"", ""write"", ""name""], []]",[1239180953843582975],129,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_157.cpp,,,data/crawl/tar/old_hunk_157.cpp,data/crawl/tar/new_hunk_157.cpp,29,-1,"call_arg_error (""waitpid"", name);",,"[""removeLog""]","[[""call_arg_error"", ""waitpid"", ""name""], []]",[14483812913489595378],128,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_157.cpp,,,data/crawl/tar/old_hunk_157.cpp,data/crawl/tar/new_hunk_157.cpp,23,-1,"call_arg_error (""utime"", name);",,"[""removeLog""]","[[""call_arg_error"", ""utime"", ""name""], []]",[13920144699611414864],127,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_157.cpp,,,data/crawl/tar/old_hunk_157.cpp,data/crawl/tar/new_hunk_157.cpp,17,-1,"call_arg_error (""unlink"", name);",,"[""removeLog""]","[[""call_arg_error"", ""unlink"", ""name""], []]",[9349767022548828116],126,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_157.cpp,,,data/crawl/tar/old_hunk_157.cpp,data/crawl/tar/new_hunk_157.cpp,11,-1,"call_arg_warn (""truncate"", name);",,"[""removeLog""]","[[""call_arg_warn"", ""truncate"", ""name""], []]",[3675692444196772876],125,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_157.cpp,,,data/crawl/tar/old_hunk_157.cpp,data/crawl/tar/new_hunk_157.cpp,5,-1,"call_arg_error (""truncate"", name);",,"[""removeLog""]","[[""call_arg_error"", ""truncate"", ""name""], []]",[2117281613223250409],124,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_156.cpp,,,data/crawl/tar/old_hunk_156.cpp,data/crawl/tar/new_hunk_156.cpp,25,-1,"call_arg_warn (""stat"", name);",,"[""removeLog""]","[[""call_arg_warn"", ""stat"", ""name""], []]",[13440788288475530256],123,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_156.cpp,,,data/crawl/tar/old_hunk_156.cpp,data/crawl/tar/new_hunk_156.cpp,19,-1,"call_arg_error (""stat"", name);",,"[""removeLog""]","[[""call_arg_error"", ""stat"", ""name""], []]",[11882377457502007789],122,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_156.cpp,,,data/crawl/tar/old_hunk_156.cpp,data/crawl/tar/new_hunk_156.cpp,6,-1,"ERROR ((0, e, _(""%s: Cannot create symlink to %s""),
	  quotearg_colon (name), quote_n (1, contents)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""create"", ""symlink"", ""to"", ""%s"", ""quotearg_colon"", ""name"", ""quote_n"", ""1"", ""contents""], []]",[-2916493202140917311],121,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_155.cpp,,,data/crawl/tar/old_hunk_155.cpp,data/crawl/tar/new_hunk_155.cpp,21,-1,"call_arg_warn (""seek"", name);",,"[""removeLog""]","[[""call_arg_warn"", ""seek"", ""name""], []]",[13440773288579530806],120,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_155.cpp,,,data/crawl/tar/old_hunk_155.cpp,data/crawl/tar/new_hunk_155.cpp,13,-1,"ERROR ((0, e, _(""%s: Cannot seek to %s""),
	  quotearg_colon (name),
	  STRINGIFY_BIGINT (offset, buf)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""seek"", ""to"", ""%s"", ""quotearg_colon"", ""name"", ""STRINGIFY_BIGINT"", ""offset"", ""buf""], []]",[-6484573404986961207],119,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_155.cpp,,,data/crawl/tar/old_hunk_155.cpp,data/crawl/tar/new_hunk_155.cpp,5,-1,"call_arg_error (""seek"", name);",,"[""removeLog""]","[[""call_arg_error"", ""seek"", ""name""], []]",[11882362457606008339],118,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_154.cpp,,,data/crawl/tar/old_hunk_154.cpp,data/crawl/tar/new_hunk_154.cpp,11,-1,"call_arg_warn (""savedir"", name);",,"[""removeLog""]","[[""call_arg_warn"", ""savedir"", ""name""], []]",[4483225517168082047],117,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_154.cpp,,,data/crawl/tar/old_hunk_154.cpp,data/crawl/tar/new_hunk_154.cpp,5,-1,"call_arg_error (""savedir"", name);",,"[""removeLog""]","[[""call_arg_error"", ""savedir"", ""name""], []]",[2924814686194559580],116,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_153.cpp,,,data/crawl/tar/old_hunk_153.cpp,data/crawl/tar/new_hunk_153.cpp,30,-1,"call_arg_warn (""readlink"", name);",,"[""removeLog""]","[[""call_arg_warn"", ""readlink"", ""name""], []]",[18892478127957828606],115,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_153.cpp,,,data/crawl/tar/old_hunk_153.cpp,data/crawl/tar/new_hunk_153.cpp,24,-1,"call_arg_error (""readlink"", name);",,"[""removeLog""]","[[""call_arg_error"", ""readlink"", ""name""], []]",[17334067296984306139],114,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_152.cpp,,,data/crawl/tar/old_hunk_152.cpp,data/crawl/tar/new_hunk_152.cpp,13,-1,"ERROR ((0, e,
	  ngettext (""%s: Read error at byte %s, while reading %lu byte"",
		    ""%s: Read error at byte %s, while reading %lu bytes"",
		    size),
	  quotearg_colon (name), STRINGIFY_BIGINT (offset, buf),
	  (unsigned long) size));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""ngettext"", ""%s"", ""Read"", ""error"", ""at"", ""byte"", ""%s"", ""while"", ""reading"", ""%lu"", ""byte"", ""%s"", ""Read"", ""error"", ""at"", ""byte"", ""%s"", ""while"", ""reading"", ""%lu"", ""bytes"", ""size"", ""quotearg_colon"", ""name"", ""STRINGIFY_BIGINT"", ""offset"", ""buf"", ""unsigned"", ""long"", ""size""], []]",[4996518273545987625],113,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_152.cpp,,,data/crawl/tar/old_hunk_152.cpp,data/crawl/tar/new_hunk_152.cpp,5,-1,"call_arg_error (""read"", name);",,"[""removeLog""]","[[""call_arg_error"", ""read"", ""name""], []]",[16037060588851282791],112,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_151.cpp,,,data/crawl/tar/old_hunk_151.cpp,data/crawl/tar/new_hunk_151.cpp,49,-1,"call_arg_warn (""open"", name);",,"[""removeLog""]","[[""call_arg_warn"", ""open"", ""name""], []]",[11612272736695072950],111,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_151.cpp,,,data/crawl/tar/old_hunk_151.cpp,data/crawl/tar/new_hunk_151.cpp,37,-1,"call_arg_error (""open"", name);",,"[""removeLog""]","[[""call_arg_error"", ""open"", ""name""], []]",[10053861905721550483],110,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_151.cpp,,,data/crawl/tar/old_hunk_151.cpp,data/crawl/tar/new_hunk_151.cpp,31,-1,"call_arg_error (""mknod"", name);",,"[""removeLog""]","[[""call_arg_error"", ""mknod"", ""name""], []]",[14518143172516888861],109,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_151.cpp,,,data/crawl/tar/old_hunk_151.cpp,data/crawl/tar/new_hunk_151.cpp,25,-1,"call_arg_error (""mkfifo"", name);",,"[""removeLog""]","[[""call_arg_error"", ""mkfifo"", ""name""], []]",[7856564262405584679],108,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_151.cpp,,,data/crawl/tar/old_hunk_151.cpp,data/crawl/tar/new_hunk_151.cpp,19,-1,"call_arg_error (""mkdir"", name);",,"[""removeLog""]","[[""call_arg_error"", ""mkdir"", ""name""], []]",[14518153172554888835],107,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_151.cpp,,,data/crawl/tar/old_hunk_151.cpp,data/crawl/tar/new_hunk_151.cpp,12,-1,"ERROR ((0, e, _(""%s: Cannot hard link to %s""),
	  quotearg_colon (source), quote_n (1, target)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""hard"", ""link"", ""to"", ""%s"", ""quotearg_colon"", ""source"", ""quote_n"", ""1"", ""target""], []]",[-16572626554625544121],106,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_150.cpp,,,data/crawl/tar/old_hunk_150.cpp,data/crawl/tar/new_hunk_150.cpp,99,-1,"call_arg_warn (""close"", name);",,"[""removeLog""]","[[""call_arg_warn"", ""close"", ""name""], []]",[4656643123195449145],105,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_150.cpp,,,data/crawl/tar/old_hunk_150.cpp,data/crawl/tar/new_hunk_150.cpp,93,-1,"call_arg_error (""close"", name);",,"[""removeLog""]","[[""call_arg_error"", ""close"", ""name""], []]",[3098232292221926678],104,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_150.cpp,,,data/crawl/tar/old_hunk_150.cpp,data/crawl/tar/new_hunk_150.cpp,86,-1,"ERROR ((0, e, _(""%s: Cannot change ownership to uid %lu, gid %lu""),
	  quotearg_colon (name), (unsigned long) uid, (unsigned long) gid));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""change"", ""ownership"", ""to"", ""uid"", ""%lu"", ""gid"", ""%lu"", ""quotearg_colon"", ""name"", ""unsigned"", ""long"", ""uid"", ""unsigned"", ""long"", ""gid""], []]",[34718370246957576613],103,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_150.cpp,,,data/crawl/tar/old_hunk_150.cpp,data/crawl/tar/new_hunk_150.cpp,78,-1,"ERROR ((0, e, _(""%s: Cannot change mode to %s""),
	  quotearg_colon (name), buf));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""change"", ""mode"", ""to"", ""%s"", ""quotearg_colon"", ""name"", ""buf""], []]",[11260288757634500464],102,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5c35fdb275b519373e6eb34621d956d09a52bf31,19 May 2005,"Remove defines and declarations imported from paxutils
",429,data/crawl/tar/hunk_150.cpp,,,data/crawl/tar/old_hunk_150.cpp,data/crawl/tar/new_hunk_150.cpp,37,-1,"ERROR ((0, e, _(""%s: Cannot %s""), quotearg_colon (name), call));",,"[""removeLog""]","[[""ERROR"", ""0"", ""e"", ""_"", ""%s"", ""Cannot"", ""%s"", ""quotearg_colon"", ""name"", ""call""], []]",[-6969327521997874916],101,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d659cbaccdc1f3279c49107cf15f15a639738529,22 Jun 2005,"Carefully crafted invalid headers can cause buffer overrun. Invalid
 header fields go undiagnosed. Some valid time strings are ignored.

* NEWS: Better support for full-resolution time stamps.
The -v option now prints time stamps only to 1-minute resolution.
* gnulib.modules: Add utimens.
* lib/.cvsignore: Add imaxtostr.c, inttostr.c, inttostr.h,
offtostr.c, umaxtostr.c, utimens.c, utimens.h.  Remove paxconvert.c.
* lib/Makefile.tmpl (libtar_a_SOURCES): Remove paxconvert.c.
* lib/paxconvert.c: Remove; superseded by umaxtostr.c.
* po/POTFILES.in: Remove lib/paxconvert.c.  Add lib/xalloc-die.c,
lib/obstack.c.
* src/buffer.c (set_start_time, compute_duration, start_time):
Use gettime rather than rolling our own code.
* src/common.h (OLDGNU_NAME_FIELD_SIZE, MAXOCTAL11, MAXOCTAL7): Remove.
(newer_ctime_option): Remove.
(timespec_lt): New function.
(OLDER_STAT_TIME): Use it.
(string_to_chars): First arg is char const *, not char *.
(tartime): Time arg is now struct timespec.  New bool arg.
All callers changed.
(code_ns_fraction): New decl.
(sys_stat_nanoseconds): Remove decl.
(get_stat_atime, get_stat_ctime, get_stat_mtime): New functions.
(set_stat_atime, set_stat_ctime, set_stat_mtime): New functions.
* src/compare.c: Include utimens.h rather than rolling our own.
(diff_dir, diff_file, diff_link, diff_symlink, diff_special):
Prototype.
(diff_dumpdir, diff_multivol): Prototype.
(diff_file): Support higher-resolution time stamps.
* src/create.c: Include utimens.h rather than rolling our own.
(MAX_OCTAL_VAL): New macro.
(tar_copy_str, string_to_chars): Don't bother to zero-fill;
the destination is already zeroed.
(string_to_chars): First arg is char const *.
(start_private_header): Use MINOR_TO_CHARS, not MAJOR_TO_CHARS,
for minor device number.
(write_header_name, dump_hard_link, dump_file0):
Simplify test for old GNU format.
(start_header): Put in placeholders for uid, etc., even when
using extended headers, for benefit of older ""tar"" implementations.
Don't assume uintmax_t is wider than 32 bits.
Output extended header for mtime if needed.
(dump_regular_finish, dump_file0):
Support extended time stamp resolution.
* src/extract.c: Include utimens.h rather than rolling our own.
(check_time): Support extended time stamp resolution.
* src/list.c: Include <inttostr.h>.
(tartime): Use umaxtostr rather than stringify_uintmax_t_backwards.
* src/xheader.c: Include <inttostr.h>.
Do not include <xstrtol.h>.
(strtoimax) [!HAVE_DECL_STRTOIMAX && !defined strtoimax]: New decl.
(strtoumax) [!HAVE_DECL_STRTOUMAX && !defined strtoumax]: New decl.
(BILLION, LOG10_BILLION): New constants.
(to_decimal): Remove; superseded by inttostr.  All callers changed
to use umaxtostr.
(xheader_format_name): Don't assume pids and uintmax_t values
fit in 63 bytes (!) when printed.
(decode_record): Don't bother to check for ERANGE; an out of range
value must be treater than len_max anyway.
If the length is out of range, output it in the diagnostic.
(format_uintmax): Remove; all callers changed to use umaxtostr.
(xheader_print): Don't assume sizes can be printed in 99 bytes (!).
(out_of_range_header): New function.
(decode_time): Use it.
(code_time): Accept struct timespec, not time_t and unsigned long.
All callers changed.  Size sbuf properly, and remove unnecessary check.
Don't assume time stamps can fit in 199 bytes.
Handle negative time stamps.  Handle fractional time stamps
more consistently.  Don't output unnecessary trailing zeros.
(decode_time): Yield struct timespec, not time_t and unsigned long.
All callers changed.
Handle negative time stamps.  Truncate towards minus infinity
consistently.  Improve overflow checks, and output a better
diagnostic on overflow.
(code_num): Don't assume uintmax_t can be printed in 99 bytes (!).
(decode_num): New function, for better diagnostics.
(atime_coder, atime_decoder, gid_decoder, ctime_coder):
(ctime_decoder, mtime_coder, mtime_decoder, size_decoder):
(uid_decoder, sparse_size_decoder, sparse_numblocks_decoder):
(sparse_offset_decoder, sparse_numbytes_decoder):
Use decode_num, etc., instead of xstrtoumax, etc.

* src/xheader.c (sparse_numblocks_decoder): Remove unchecked use
of `calloc'.  Use xcalloc instead.
(decode_time, gid_decoder, size_decoder, uid_decoder):
(sparse_size_decoder, sparse_offset_decoder, sparse_numblocks_decoder):
Ensure that the result of calling xstrtoumax is no larger than
the maximum value for the target type.  Upon any failure, exit with
a diagnostic.
(sparse_numblocks_decoder): Avoid buffer overrun/heap corruption:
use x2nrealloc, rather than `n *= 2' and xrealloc(p, n,....
(decode_time): Rewrite to accept time strings like
1119018481.000000000.  Before, such strings were always ignored.",1185,data/crawl/tar/hunk_147.cpp,,,data/crawl/tar/old_hunk_147.cpp,data/crawl/tar/new_hunk_147.cpp,-1,17,,"ERROR ((0, 0, _(""Extended header %s=%s is out of range %s..%s""),
	  keyword, value, minval_string, maxval_string));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Extended"", ""header"", ""%s"", ""%s"", ""is"", ""out"", ""of"", ""range"", ""%s"", ""%s"", ""keyword"", ""value"", ""minval_string"", ""maxval_string""]]",[-1802617199148398931],100,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d659cbaccdc1f3279c49107cf15f15a639738529,22 Jun 2005,"Carefully crafted invalid headers can cause buffer overrun. Invalid
 header fields go undiagnosed. Some valid time strings are ignored.

* NEWS: Better support for full-resolution time stamps.
The -v option now prints time stamps only to 1-minute resolution.
* gnulib.modules: Add utimens.
* lib/.cvsignore: Add imaxtostr.c, inttostr.c, inttostr.h,
offtostr.c, umaxtostr.c, utimens.c, utimens.h.  Remove paxconvert.c.
* lib/Makefile.tmpl (libtar_a_SOURCES): Remove paxconvert.c.
* lib/paxconvert.c: Remove; superseded by umaxtostr.c.
* po/POTFILES.in: Remove lib/paxconvert.c.  Add lib/xalloc-die.c,
lib/obstack.c.
* src/buffer.c (set_start_time, compute_duration, start_time):
Use gettime rather than rolling our own code.
* src/common.h (OLDGNU_NAME_FIELD_SIZE, MAXOCTAL11, MAXOCTAL7): Remove.
(newer_ctime_option): Remove.
(timespec_lt): New function.
(OLDER_STAT_TIME): Use it.
(string_to_chars): First arg is char const *, not char *.
(tartime): Time arg is now struct timespec.  New bool arg.
All callers changed.
(code_ns_fraction): New decl.
(sys_stat_nanoseconds): Remove decl.
(get_stat_atime, get_stat_ctime, get_stat_mtime): New functions.
(set_stat_atime, set_stat_ctime, set_stat_mtime): New functions.
* src/compare.c: Include utimens.h rather than rolling our own.
(diff_dir, diff_file, diff_link, diff_symlink, diff_special):
Prototype.
(diff_dumpdir, diff_multivol): Prototype.
(diff_file): Support higher-resolution time stamps.
* src/create.c: Include utimens.h rather than rolling our own.
(MAX_OCTAL_VAL): New macro.
(tar_copy_str, string_to_chars): Don't bother to zero-fill;
the destination is already zeroed.
(string_to_chars): First arg is char const *.
(start_private_header): Use MINOR_TO_CHARS, not MAJOR_TO_CHARS,
for minor device number.
(write_header_name, dump_hard_link, dump_file0):
Simplify test for old GNU format.
(start_header): Put in placeholders for uid, etc., even when
using extended headers, for benefit of older ""tar"" implementations.
Don't assume uintmax_t is wider than 32 bits.
Output extended header for mtime if needed.
(dump_regular_finish, dump_file0):
Support extended time stamp resolution.
* src/extract.c: Include utimens.h rather than rolling our own.
(check_time): Support extended time stamp resolution.
* src/list.c: Include <inttostr.h>.
(tartime): Use umaxtostr rather than stringify_uintmax_t_backwards.
* src/xheader.c: Include <inttostr.h>.
Do not include <xstrtol.h>.
(strtoimax) [!HAVE_DECL_STRTOIMAX && !defined strtoimax]: New decl.
(strtoumax) [!HAVE_DECL_STRTOUMAX && !defined strtoumax]: New decl.
(BILLION, LOG10_BILLION): New constants.
(to_decimal): Remove; superseded by inttostr.  All callers changed
to use umaxtostr.
(xheader_format_name): Don't assume pids and uintmax_t values
fit in 63 bytes (!) when printed.
(decode_record): Don't bother to check for ERANGE; an out of range
value must be treater than len_max anyway.
If the length is out of range, output it in the diagnostic.
(format_uintmax): Remove; all callers changed to use umaxtostr.
(xheader_print): Don't assume sizes can be printed in 99 bytes (!).
(out_of_range_header): New function.
(decode_time): Use it.
(code_time): Accept struct timespec, not time_t and unsigned long.
All callers changed.  Size sbuf properly, and remove unnecessary check.
Don't assume time stamps can fit in 199 bytes.
Handle negative time stamps.  Handle fractional time stamps
more consistently.  Don't output unnecessary trailing zeros.
(decode_time): Yield struct timespec, not time_t and unsigned long.
All callers changed.
Handle negative time stamps.  Truncate towards minus infinity
consistently.  Improve overflow checks, and output a better
diagnostic on overflow.
(code_num): Don't assume uintmax_t can be printed in 99 bytes (!).
(decode_num): New function, for better diagnostics.
(atime_coder, atime_decoder, gid_decoder, ctime_coder):
(ctime_decoder, mtime_coder, mtime_decoder, size_decoder):
(uid_decoder, sparse_size_decoder, sparse_numblocks_decoder):
(sparse_offset_decoder, sparse_numbytes_decoder):
Use decode_num, etc., instead of xstrtoumax, etc.

* src/xheader.c (sparse_numblocks_decoder): Remove unchecked use
of `calloc'.  Use xcalloc instead.
(decode_time, gid_decoder, size_decoder, uid_decoder):
(sparse_size_decoder, sparse_offset_decoder, sparse_numblocks_decoder):
Ensure that the result of calling xstrtoumax is no larger than
the maximum value for the target type.  Upon any failure, exit with
a diagnostic.
(sparse_numblocks_decoder): Avoid buffer overrun/heap corruption:
use x2nrealloc, rather than `n *= 2' and xrealloc(p, n,....
(decode_time): Rewrite to accept time strings like
1119018481.000000000.  Before, such strings were always ignored.",1185,data/crawl/tar/hunk_146.cpp,,,data/crawl/tar/old_hunk_146.cpp,data/crawl/tar/new_hunk_146.cpp,5,6,"ERROR ((0, 0, _(""Malformed extended header: length out of range"")));","ERROR ((0, 0, _(""Extended header length %*s is out of range""),
	      len_len, p));","[""updateContent"", ""addVariable""]","[[""Malformed"", ""extended""], [""Extended"", ""%*s"", ""is"", ""len_len"", ""p""]]",[-17038798472147713226],99,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=040b5ab5f969f9ee6c69a54bc284e2ff57b86556,23 Jun 2005,"A sweep of the sparse code prompted by a bug report by Jim Meyering.
 * src/sparse.c: Include <inttostr.h>. (struct tar_sparse_file): offset and
 dumped_size are off_t, not size_t.  optab is now const *. (dump_zeros):
 Return bool success flag, not off_t. All callers changed. Use a constant-zero
 buffer rather than clearing a buffer each time. Don't mess up if write fails.
 (dump_zeros, check_sparse_region): Don't assume off_t is no wider than
 size_t. (tar_sparse_init): Don't bother clearing a field that is already
 clear. (zero_block_p): First arg is const *, not *. (clear_block,
 SPARSES_INIT_COUNT): Remove. (sparse_add_map): First arg is now struct
 start_stat_info *, not struct tar_sparse_file *.  All callers changed. Use
 x2nrealloc to check for size_t overflow. (parse_scan_file): Cache
 commonly-used parts of file. Use an auto buffer, not a static one. Don't
 bother clearing the buffer; not needed. Don't bother clearing items that are
 already clear. (oldgnu_optab, star_optab, pax_optab): Now const.
 (sparse_dump_region): Don't bother clearing the buffer before reading into
 it; just clear the parts that aren't read into. (sparse_dump_file): Clear the
 whole local variable 'file'. (diff_buffer): Remove; now a local var.
 (check_sparse_region): Don't bother clearing buffer before reading into it. 
 Don't assume off_t is promoted to long. (oldgnu_get_sparse_info,
 star_get_sparse_info): Use an auto status, not static. * src/tar.h (struct
 tar_stat_info): had_trailing_slash is now bool, not int. * src/xheader.c
 (sparse_offset_coder, sparse_numbytes_coder): Rewrite to avoid cast.
 (sparse_offset_decoder, sparse_numbytes_decoder): Diagnose excess entries
 rather than crashing.
",225,data/crawl/tar/hunk_144.cpp,,,data/crawl/tar/old_hunk_144.cpp,data/crawl/tar/new_hunk_144.cpp,-1,7,,"ERROR ((0, 0, _(""Malformed extended header: excess %s=%s""),
		""GNU.sparse.offset"", arg));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""excess"", ""%s"", ""%s"", ""GNU"", ""sparse"", ""offset"", ""arg""]]",[15187394471088130559],98,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=040b5ab5f969f9ee6c69a54bc284e2ff57b86556,23 Jun 2005,"A sweep of the sparse code prompted by a bug report by Jim Meyering.
 * src/sparse.c: Include <inttostr.h>. (struct tar_sparse_file): offset and
 dumped_size are off_t, not size_t.  optab is now const *. (dump_zeros):
 Return bool success flag, not off_t. All callers changed. Use a constant-zero
 buffer rather than clearing a buffer each time. Don't mess up if write fails.
 (dump_zeros, check_sparse_region): Don't assume off_t is no wider than
 size_t. (tar_sparse_init): Don't bother clearing a field that is already
 clear. (zero_block_p): First arg is const *, not *. (clear_block,
 SPARSES_INIT_COUNT): Remove. (sparse_add_map): First arg is now struct
 start_stat_info *, not struct tar_sparse_file *.  All callers changed. Use
 x2nrealloc to check for size_t overflow. (parse_scan_file): Cache
 commonly-used parts of file. Use an auto buffer, not a static one. Don't
 bother clearing the buffer; not needed. Don't bother clearing items that are
 already clear. (oldgnu_optab, star_optab, pax_optab): Now const.
 (sparse_dump_region): Don't bother clearing the buffer before reading into
 it; just clear the parts that aren't read into. (sparse_dump_file): Clear the
 whole local variable 'file'. (diff_buffer): Remove; now a local var.
 (check_sparse_region): Don't bother clearing buffer before reading into it. 
 Don't assume off_t is promoted to long. (oldgnu_get_sparse_info,
 star_get_sparse_info): Use an auto status, not static. * src/tar.h (struct
 tar_stat_info): had_trailing_slash is now bool, not int. * src/xheader.c
 (sparse_offset_coder, sparse_numbytes_coder): Rewrite to avoid cast.
 (sparse_offset_decoder, sparse_numbytes_decoder): Diagnose excess entries
 rather than crashing.
",225,data/crawl/tar/hunk_143.cpp,,,data/crawl/tar/old_hunk_143.cpp,data/crawl/tar/new_hunk_143.cpp,3,4,"report_difference (file->stat_info,
			     _(""File fragment at %lu is not a hole""), beg);","report_difference (file->stat_info,
			     _(""File fragment at %s is not a hole""),
			     offtostr (beg, begbuf));","[""updateContent"", ""addVariable""]","[[""%lu""], [""%s"", ""offtostr"", ""begbuf""]]",[5020589933154638255],97,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1e304fc5fd4fba5455057e74b09d08f954753340,5 Nov 2005,"(struct directory.mtime): New member. (note_directory): Take
 additional arguments. All callers updated. (scan_directory): Updated to use
 more metadata. In particular, this allows to correctly detect renamed files.
 (read_directory_file,write_directory_file) (write_directory_file_entry):
 Support new directory file format.
",284,data/crawl/tar/hunk_141.cpp,,,data/crawl/tar/old_hunk_141.cpp,data/crawl/tar/new_hunk_141.cpp,-1,29,,"ERROR((1, 0, _(""Unsupported incremental format version: %s""),
	       incremental_version));","[""addLog""]","[[], [""ERROR"", ""1"", ""0"", ""_"", ""Unsupported"", ""incremental"", ""format"", ""version"", ""%s"", ""incremental_version""]]",[1726237193814991517],96,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=08a8d2dec63967653c7f54a1b4b7cb49c3c12679,7 Nov 2005,"(dumpdir_size, get_gnu_dumpdir): New functions. (purge_directory):
 Use stat_info.dumpdir instead of getting its value explicitely.
",80,data/crawl/tar/hunk_140.cpp,,,data/crawl/tar/old_hunk_140.cpp,data/crawl/tar/new_hunk_140.cpp,37,31,"ERROR ((0, 0, _(""Unexpected EOF in archive"")));","ERROR ((1, 0, _(""Unexpected EOF in archive"")));","[""updateContent""]","[[""0""], [""1""]]",[128000383],95,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=374ae10d39e9e52789a00202c831a1c7c45e1610,7 Nov 2005,"(xheader_keyword_deleted_p): Remove static qualifier. (struct
 xhdr_tab.decoder): Change prototype. POSIX allows string values to contain
 embedded nulls, so take an extra argument specifying the length of the
 string. (decx,decg,dummy_decoder,atime_decoder,gid_decoder)
 (gname_decoder,linkpath_decoder,ctime_decoder,mtime_decoder)
 (path_decoder,size_decoder,uid_decoder,uname_decoder)
 (sparse_size_decoder,sparse_numblocks_decoder)
 (sparse_offset_decoder,sparse_numbytes_decoder): Likewise. (decode_record):
 Pass value length to the handler (run_override_list): Pass value length to
 the decoder (xheader_print_n): New function (xheader_print): Rewritten using
 xheader_print_n (xheader_finish): Do not rely om strlen to compute the length
 of the collected string: it can contain embedded nulls
 (xheader_string_begin,xheader_string_add,xheader_string_end): New functions.
 (sparse_map_decoder,dumpdir_coder,dumpdir_decoder): New functions. Handle
 GNU.sparse.map and GNU.dumpdir variables. (xhdr_tab): Add new variables.
",275,data/crawl/tar/hunk_138.cpp,,,data/crawl/tar/old_hunk_138.cpp,data/crawl/tar/new_hunk_138.cpp,-1,69,,"ERROR ((0, 0,
	    _(""Malformed extended header: invalid %s: odd number of values""),
	    keyword));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""invalid"", ""%s"", ""odd"", ""number"", ""of"", ""values"", ""keyword""]]",[-4357226329955672423],94,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=374ae10d39e9e52789a00202c831a1c7c45e1610,7 Nov 2005,"(xheader_keyword_deleted_p): Remove static qualifier. (struct
 xhdr_tab.decoder): Change prototype. POSIX allows string values to contain
 embedded nulls, so take an extra argument specifying the length of the
 string. (decx,decg,dummy_decoder,atime_decoder,gid_decoder)
 (gname_decoder,linkpath_decoder,ctime_decoder,mtime_decoder)
 (path_decoder,size_decoder,uid_decoder,uname_decoder)
 (sparse_size_decoder,sparse_numblocks_decoder)
 (sparse_offset_decoder,sparse_numbytes_decoder): Likewise. (decode_record):
 Pass value length to the handler (run_override_list): Pass value length to
 the decoder (xheader_print_n): New function (xheader_print): Rewritten using
 xheader_print_n (xheader_finish): Do not rely om strlen to compute the length
 of the collected string: it can contain embedded nulls
 (xheader_string_begin,xheader_string_add,xheader_string_end): New functions.
 (sparse_map_decoder,dumpdir_coder,dumpdir_decoder): New functions. Handle
 GNU.sparse.map and GNU.dumpdir variables. (xhdr_tab): Add new variables.
",275,data/crawl/tar/hunk_138.cpp,,,data/crawl/tar/old_hunk_138.cpp,data/crawl/tar/new_hunk_138.cpp,-1,59,,"ERROR ((0, 0,
		  _(""Malformed extended header: invalid %s: unexpected delimiter %c""),
		  keyword, *delim));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""extended"", ""header"", ""invalid"", ""%s"", ""unexpected"", ""delimiter"", ""%c"", ""keyword"", ""*delim""]]",[-20591871525789071561],93,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=374ae10d39e9e52789a00202c831a1c7c45e1610,7 Nov 2005,"(xheader_keyword_deleted_p): Remove static qualifier. (struct
 xhdr_tab.decoder): Change prototype. POSIX allows string values to contain
 embedded nulls, so take an extra argument specifying the length of the
 string. (decx,decg,dummy_decoder,atime_decoder,gid_decoder)
 (gname_decoder,linkpath_decoder,ctime_decoder,mtime_decoder)
 (path_decoder,size_decoder,uid_decoder,uname_decoder)
 (sparse_size_decoder,sparse_numblocks_decoder)
 (sparse_offset_decoder,sparse_numbytes_decoder): Likewise. (decode_record):
 Pass value length to the handler (run_override_list): Pass value length to
 the decoder (xheader_print_n): New function (xheader_print): Rewritten using
 xheader_print_n (xheader_finish): Do not rely om strlen to compute the length
 of the collected string: it can contain embedded nulls
 (xheader_string_begin,xheader_string_add,xheader_string_end): New functions.
 (sparse_map_decoder,dumpdir_coder,dumpdir_decoder): New functions. Handle
 GNU.sparse.map and GNU.dumpdir variables. (xhdr_tab): Add new variables.
",275,data/crawl/tar/hunk_137.cpp,,,data/crawl/tar/old_hunk_137.cpp,data/crawl/tar/new_hunk_137.cpp,-1,5,,"ERROR((0, 0, _(""Ignoring unknown extended header keyword `%s'""),
	   keyword));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Ignoring"", ""unknown"", ""extended"", ""header"", ""keyword"", ""%s"", ""keyword""]]",[-15047513891067570995],92,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a169d65b94722c55b0daa20997a1cb02307159cf,8 Dec 2005,"(gid_to_chars, major_to_chars, minor_to_chars) (mode_to_chars,
 off_to_chars, size_to_chars, time_to_chars) (uid_to_chars, uintmax_to_chars):
 Return bool (to_chars): Return bool (start_header): Check return values of
 convertion routines. Fail if unable to store data in the header.
",237,data/crawl/tar/hunk_129.cpp,,,data/crawl/tar/old_hunk_129.cpp,data/crawl/tar/new_hunk_129.cpp,97,-1,"ERROR ((0, 0, _(""value %s out of %s range %s..%s""),
		value_string, type, minval_string, maxval_string));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""value"", ""%s"", ""out"", ""of"", ""%s"", ""range"", ""%s"", ""%s"", ""value_string"", ""type"", ""minval_string"", ""maxval_string""], []]",[-13905257408713560482],91,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a169d65b94722c55b0daa20997a1cb02307159cf,8 Dec 2005,"(gid_to_chars, major_to_chars, minor_to_chars) (mode_to_chars,
 off_to_chars, size_to_chars, time_to_chars) (uid_to_chars, uintmax_to_chars):
 Return bool (to_chars): Return bool (start_header): Check return values of
 convertion routines. Fail if unable to store data in the header.
",237,data/crawl/tar/hunk_128.cpp,,,data/crawl/tar/old_hunk_128.cpp,data/crawl/tar/new_hunk_128.cpp,-1,61,,"ERROR ((0, 0, _(""value %s out of %s range %s..%s""),
	    value_string, type, minval_string, maxval_string));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""value"", ""%s"", ""out"", ""of"", ""%s"", ""range"", ""%s"", ""%s"", ""value_string"", ""type"", ""minval_string"", ""maxval_string""]]",[13905257408713560482],90,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f03fc1e078693d5315031739cf15b092349ab93c,9 Dec 2005,"(read_directory_file): Fix format string
",2,data/crawl/tar/hunk_127.cpp,,,data/crawl/tar/old_hunk_127.cpp,data/crawl/tar/new_hunk_127.cpp,3,3,"ERROR((1, 0, _(""Unsupported incremental format version: %s""),
	       incremental_version));","ERROR((1, 0, _(""Unsupported incremental format version: %d""),
	       incremental_version));","[""updateContent""]","[[""%s""], [""%d""]]",[-21],89,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a0b4431f26a72addb201c306ae02c2e12c2d5092,8 May 2006,"(rename_directory): New function
",36,data/crawl/tar/hunk_126.cpp,,,data/crawl/tar/old_hunk_126.cpp,data/crawl/tar/new_hunk_126.cpp,-1,28,,"ERROR ((0, e, _(""Cannot rename %s to %s""),
	      quote_n (0, src),
	      quote_n (1, dst)));","[""addLog""]","[[], [""ERROR"", ""0"", ""e"", ""_"", ""Cannot"", ""rename"", ""%s"", ""to"", ""%s"", ""quote_n"", ""0"", ""src"", ""quote_n"", ""1"", ""dst""]]",[-2914065528217041722],88,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,110,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Invalid inode number"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""inode"", ""number""], []]",[32210852484669428998],87,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,98,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Invalid device number"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""device"", ""number""], []]",[32877137414318571082],86,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,83,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
			quotearg_colon (listed_incremental_option), lineno,
			_(""Invalid modification time (nanoseconds)"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""modification"", ""time"", ""nanoseconds""], []]",[19772974021668649334],85,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_124.cpp,,,data/crawl/tar/old_hunk_124.cpp,data/crawl/tar/new_hunk_124.cpp,71,-1,"ERROR ((0, 0, ""%s:%ld: %s"",
			quotearg_colon (listed_incremental_option), lineno,
			_(""Invalid modification time (seconds)"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""modification"", ""time"", ""seconds""], []]",[22727584653760979128],84,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,125,,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option), lineno,
		_(""Invalid inode number"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Invalid"", ""inode"", ""number""]]",[-32210852484669428998],83,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c9e7465642f8dc879ea589b628176e6c9b6656bf,8 May 2006,"(struct directory.contents, flags): New members (nfs,found,new):
 Remove. Replaced by appropriate bitmask values in `flags' field. All uses
 updated. (directory_meta_table): New table. (hash_directory): Rename to
 hash_directory_name (compare_directories): Rename to compare_directory_names
 (hash_directory_meta,compare_directory_meta,find_directory_meta): New
 functions (compare_dirents): Removed (note_directory): Get 7th argument:
 directory contents. All callers updated (dumpdir_locate,makedumpdir): New
 functions (scan_directory): Rewritten. Use makedumpdir to create a sorted
 dumpdir array. This makes the obstack argument unnecessary. Besides,
 ALL_CHILDREN flag is set only for new directories. (procdir): Change return
 type to struct directory. Return immediately if the directory was already
 initialized. Discover directory renames using directory_meta_table.
 (append_incremental_renames): New function. (read_directory_file,
 write_directory_file): Use new snapshot file format.
",1158,data/crawl/tar/hunk_123.cpp,,,data/crawl/tar/old_hunk_123.cpp,data/crawl/tar/new_hunk_123.cpp,-1,117,,"ERROR ((0, 0, ""%s:%ld: %s"",
		quotearg_colon (listed_incremental_option), lineno,
		_(""Device number out of range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""%s"", ""%ld"", ""%s"", ""quotearg_colon"", ""listed_incremental_option"", ""lineno"", ""_"", ""Device"", ""number"", ""out"", ""of"", ""range""]]",[-23478891362305537406],82,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=2d2e1d411e09126a7ed82ad774e24082914a51ce,8 Jun 2006,"(dumpdir_locate,obstack_code_rename,purge_directory): Re-implement
 renaming. Introduce X control code. (make_tmp_dir_name): Remove
",212,data/crawl/tar/hunk_119.cpp,,,data/crawl/tar/old_hunk_119.cpp,data/crawl/tar/new_hunk_119.cpp,-1,125,,"ERROR ((0, errno,
		      _(""Cannot create temporary directory using template %s""),
		      quote (temp_stub)));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""Cannot"", ""create"", ""temporary"", ""directory"", ""using"", ""template"", ""%s"", ""quote"", ""temp_stub""]]",[12598747840142840902],81,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=2d2e1d411e09126a7ed82ad774e24082914a51ce,8 Jun 2006,"(dumpdir_locate,obstack_code_rename,purge_directory): Re-implement
 renaming. Introduce X control code. (make_tmp_dir_name): Remove
",212,data/crawl/tar/hunk_119.cpp,,,data/crawl/tar/old_hunk_119.cpp,data/crawl/tar/new_hunk_119.cpp,-1,76,,"ERROR ((0, 0,
	      _(""Malformed dumpdir: expected '%c' but found end of data""),
	      expect));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""dumpdir"", ""expected"", ""%c"", ""but"", ""found"", ""end"", ""of"", ""data"", ""expect""]]",[4819949848667487728],80,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=2d2e1d411e09126a7ed82ad774e24082914a51ce,8 Jun 2006,"(dumpdir_locate,obstack_code_rename,purge_directory): Re-implement
 renaming. Introduce X control code. (make_tmp_dir_name): Remove
",212,data/crawl/tar/hunk_119.cpp,,,data/crawl/tar/old_hunk_119.cpp,data/crawl/tar/new_hunk_119.cpp,-1,56,,"ERROR ((0, 0,
		      _(""Malformed dumpdir: empty name in 'T'"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""dumpdir"", ""empty"", ""name"", ""in"", ""T""]]",[-595190471116491948],79,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=2d2e1d411e09126a7ed82ad774e24082914a51ce,8 Jun 2006,"(dumpdir_locate,obstack_code_rename,purge_directory): Re-implement
 renaming. Introduce X control code. (make_tmp_dir_name): Remove
",212,data/crawl/tar/hunk_119.cpp,,,data/crawl/tar/old_hunk_119.cpp,data/crawl/tar/new_hunk_119.cpp,-1,50,,"ERROR ((0, 0,
		      _(""Malformed dumpdir: 'T' not preceeded by 'R'"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""dumpdir"", ""T"", ""not"", ""preceeded"", ""by"", ""R""]]",[6898073136868965132],78,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=2d2e1d411e09126a7ed82ad774e24082914a51ce,8 Jun 2006,"(dumpdir_locate,obstack_code_rename,purge_directory): Re-implement
 renaming. Introduce X control code. (make_tmp_dir_name): Remove
",212,data/crawl/tar/hunk_119.cpp,,,data/crawl/tar/old_hunk_119.cpp,data/crawl/tar/new_hunk_119.cpp,-1,37,,"ERROR ((0, 0,
			  _(""Malformed dumpdir: empty name in 'R'"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""dumpdir"", ""empty"", ""name"", ""in"", ""R""]]",[-595190471372492718],77,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=2d2e1d411e09126a7ed82ad774e24082914a51ce,8 Jun 2006,"(dumpdir_locate,obstack_code_rename,purge_directory): Re-implement
 renaming. Introduce X control code. (make_tmp_dir_name): Remove
",212,data/crawl/tar/hunk_119.cpp,,,data/crawl/tar/old_hunk_119.cpp,data/crawl/tar/new_hunk_119.cpp,-1,24,,"ERROR ((0, 0,
		      _(""Malformed dumpdir: 'X' duplicated"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""dumpdir"", ""X"", ""duplicated""]]",[458996203839218749],76,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=2d2e1d411e09126a7ed82ad774e24082914a51ce,8 Jun 2006,"(dumpdir_locate,obstack_code_rename,purge_directory): Re-implement
 renaming. Introduce X control code. (make_tmp_dir_name): Remove
",212,data/crawl/tar/hunk_119.cpp,,,data/crawl/tar/old_hunk_119.cpp,data/crawl/tar/new_hunk_119.cpp,-1,14,,"ERROR ((0, 0,
		  _(""Malformed dumpdir: expected '%c' but found %#3o""),
		  expect, *p));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Malformed"", ""dumpdir"", ""expected"", ""%c"", ""but"", ""found"", ""%"", ""3o"", ""expect"", ""*p""]]",[16687455804755144555],75,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f9bd340c1bdcb47ce99e33bc995ef28de5f6d2eb,8 Jun 2006,"--checkpoint takes an optional argument specifying number of records
 between two successive checkpoints (proposed by Jason Armistead on
 2004-06-22).Optional dot starting the argument means ""print dots instead of
 textual checkpoints"". (tar_help): New function
",108,data/crawl/tar/hunk_118.cpp,,,data/crawl/tar/old_hunk_118.cpp,data/crawl/tar/new_hunk_118.cpp,-1,20,,"argp_fmtstream_printf (fs, _(""Report bugs to %s.\n""),
			 argp_program_bug_address);","[""addLog""]","[[], [""argp_fmtstream_printf"", ""fs"", ""_"", ""Report"", ""bugs"", ""to"", ""%s"", ""\\n"", ""argp_program_bug_address""]]",[-13854404164918457789],74,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f9bd340c1bdcb47ce99e33bc995ef28de5f6d2eb,8 Jun 2006,"--checkpoint takes an optional argument specifying number of records
 between two successive checkpoints (proposed by Jason Armistead on
 2004-06-22).Optional dot starting the argument means ""print dots instead of
 textual checkpoints"". (tar_help): New function
",108,data/crawl/tar/hunk_118.cpp,,,data/crawl/tar/old_hunk_118.cpp,data/crawl/tar/new_hunk_118.cpp,-1,13,,"argp_fmtstream_printf (fs, ""\n%s\n\n"",
		       _(""Valid arguments for --quoting-style options are:""));","[""addLog""]","[[], [""argp_fmtstream_printf"", ""fs"", ""\\n%s\\n\\n"", ""_"", ""Valid"", ""arguments"", ""for"", ""quoting"", ""style"", ""options"", ""are""]]",[-24548863207140135322],73,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f9bd340c1bdcb47ce99e33bc995ef28de5f6d2eb,8 Jun 2006,"--checkpoint takes an optional argument specifying number of records
 between two successive checkpoints (proposed by Jason Armistead on
 2004-06-22).Optional dot starting the argument means ""print dots instead of
 textual checkpoints"". (tar_help): New function
",108,data/crawl/tar/hunk_117.cpp,,,data/crawl/tar/old_hunk_117.cpp,data/crawl/tar/new_hunk_117.cpp,-1,8,,"argp_fmtstream_printf (fs, ""%s%s\n"", prefix, quoting_style_args[i]);","[""addLog""]","[[], [""argp_fmtstream_printf"", ""fs"", ""%s%s\\n"", ""prefix"", ""quoting_style_args[i]""]]",[-4704664587397408913],72,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d0201294c0978972fa1ce303d4b56de5cef48ee3,24 Jun 2006,"(xhdr_tab.decoder): pass keyword as a second argument. All callers
 changed. (decode_record): Check for numeric overflow (xheader_string_end):
 Return boolean value. Check for possible numeric overflow
",170,data/crawl/tar/hunk_113.cpp,,,data/crawl/tar/old_hunk_113.cpp,data/crawl/tar/new_hunk_113.cpp,12,14,"ERROR ((0, 0, _(""Malformed extended header: excess %s=%s""),
		""GNU.sparse.numbytes"", arg));","ERROR ((0, 0, _(""Malformed extended header: excess %s=%s""),
		keyword, arg));","[""removeContent"", ""addVariable""]","[[""GNU"", ""sparse"", ""numbytes""], [""keyword""]]",[-3854507458384520360],71,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d0201294c0978972fa1ce303d4b56de5cef48ee3,24 Jun 2006,"(xhdr_tab.decoder): pass keyword as a second argument. All callers
 changed. (decode_record): Check for numeric overflow (xheader_string_end):
 Return boolean value. Check for possible numeric overflow
",170,data/crawl/tar/hunk_112.cpp,,,data/crawl/tar/old_hunk_112.cpp,data/crawl/tar/new_hunk_112.cpp,-1,6,,"ERROR ((0, 0,
        _(""Generated keyword/value pair is too long (keyword=%s, length=%s""),
	      keyword, nbuf));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Generated"", ""keyword/value"", ""pair"", ""is"", ""too"", ""long"", ""keyword"", ""%s"", ""length"", ""%s"", ""keyword"", ""nbuf""]]",[5761359181476036687],70,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d0201294c0978972fa1ce303d4b56de5cef48ee3,24 Jun 2006,"(xhdr_tab.decoder): pass keyword as a second argument. All callers
 changed. (decode_record): Check for numeric overflow (xheader_string_end):
 Return boolean value. Check for possible numeric overflow
",170,data/crawl/tar/hunk_110.cpp,,,data/crawl/tar/old_hunk_110.cpp,data/crawl/tar/new_hunk_110.cpp,-1,6,,"ERROR ((0, 0, _(""Extended header length is out of allowed range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Extended"", ""header"", ""length"", ""is"", ""out"", ""of"", ""allowed"", ""range""]]",[4530906043695161880],69,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bf5ba3dbefa4878d712b83ea16c95220c2197417,25 Jun 2006,"A sample utility to expand sparse files extracted by third-party
 tars. It is not meant to be installed nor to be included in the distribution.
 It is here, so that it can be obtained either from CVS or from the tar web
 site.
",469,data/crawl/tar/hunk_109.cpp,,,data/crawl/tar/old_hunk_109.cpp,data/crawl/tar/new_hunk_109.cpp,-1,312,,"die (1, ""write error (%d)"", errno);","[""addLog""]","[[], [""die"", ""1"", ""write"", ""error"", ""%d"", ""errno""]]",[23452736392666890930],68,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bf5ba3dbefa4878d712b83ea16c95220c2197417,25 Jun 2006,"A sample utility to expand sparse files extracted by third-party
 tars. It is not meant to be installed nor to be included in the distribution.
 It is here, so that it can be obtained either from CVS or from the tar web
 site.
",469,data/crawl/tar/hunk_109.cpp,,,data/crawl/tar/old_hunk_109.cpp,data/crawl/tar/new_hunk_109.cpp,-1,310,,"die (1, ""read error (%d)"", errno);","[""addLog""]","[[], [""die"", ""1"", ""read"", ""error"", ""%d"", ""errno""]]",[8654856757659191114],67,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_105.cpp,,,data/crawl/tar/old_hunk_105.cpp,data/crawl/tar/new_hunk_105.cpp,5,5,"ERROR ((1, 0, _(""Unsupported incremental format version: %d""),
		  incremental_version));","ERROR ((1, 0, _(""Unsupported incremental format version: %""PRIuMAX),
		  incremental_version));","[""updateContent"", ""addVariable""]","[[""%d""], [""%"", ""PRIuMAX""]]",[1352411777277983216],66,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=05805868f26533141b8b02d5a6449965652ef187,7 Aug 2006,"(read_incr_db_01): Check input strings more carefully.  Do not pass
 arbitrary char values to isspace, as this has undefined behavior.  Likewise
 for assigning arbitrary uintmax_t values to other types. (read_negative_num,
 read_unsigned_num, read_timespec): New functions, to check input values a bit
 more carefuly. (read_num): Use read_unsigned_num.  New arg MAX_VAL; all
 callers changed. (read_incr_db_2): Use these new functions. Use a consistent
 diagnostic for unexpected EOF. (read_directory_file): Do not assign arbitrary
 uintmax_t value to int. (read_timespec, write_directory_file_entry,
 write_directory_file): Handle negative time_t values correctly.  We don't
 bother to do this with pre-2 formats, since presumably the time stamps were
 output incorrectly.
",434,data/crawl/tar/hunk_102.cpp,,,data/crawl/tar/old_hunk_102.cpp,data/crawl/tar/new_hunk_102.cpp,11,11,"ERROR ((0, 0, ""%s:%ld: %s"",
	    quotearg_colon (listed_incremental_option),
	    lineno,
	    _(""Time stamp out of range"")));","ERROR ((0, errno, ""%s:%ld: %s"",
	    quotearg_colon (listed_incremental_option),
	    lineno,
	    _(""Invalid time stamp"")));","[""updateContent"", ""removeContent"", ""addVariable""]","[[""0"", ""Time"", ""out"", ""of"", ""range""], [""errno"", ""Invalid"", ""time""]]",[-1113107273156671956],65,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49ea4c50575f66e8f0450e463e1d882eed6255ec,30 Nov 2006,"* NEWS: Remove support for mangled names. * doc/tar.texi (verbose
 tutorial): Likewise. * src/Makefile.am (tar_SOURCES): Remove mangle.c. *
 src/common.h (extract_mangle): Remove decl. * src/extract.c
 (extract_mangle_wrapper): Remove. (prepare_to_extract): Remove support for
 mangled names. * src/list.c (read_and, print_header): Likewise. *
 src/mangle.c: Remove. * src/tar.h (GNUTYPE_NAMES): Remove.
",174,data/crawl/tar/hunk_100.cpp,,,data/crawl/tar/old_hunk_100.cpp,data/crawl/tar/new_hunk_100.cpp,116,-1,"ERROR ((0, 0, _(""Unknown demangling command %s""), cursor));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Unknown"", ""demangling"", ""command"", ""%s"", ""cursor""], []]",[-5943457990443733470],64,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49ea4c50575f66e8f0450e463e1d882eed6255ec,30 Nov 2006,"* NEWS: Remove support for mangled names. * doc/tar.texi (verbose
 tutorial): Likewise. * src/Makefile.am (tar_SOURCES): Remove mangle.c. *
 src/common.h (extract_mangle): Remove decl. * src/extract.c
 (extract_mangle_wrapper): Remove. (prepare_to_extract): Remove support for
 mangled names. * src/list.c (read_and, print_header): Likewise. *
 src/mangle.c: Remove. * src/tar.h (GNUTYPE_NAMES): Remove.
",174,data/crawl/tar/hunk_100.cpp,,,data/crawl/tar/old_hunk_100.cpp,data/crawl/tar/new_hunk_100.cpp,109,-1,"ERROR ((0, errno, _(""%s: Cannot symlink to %s""),
		    quotearg_colon (name), quote_n (1, name_end + 4)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""symlink"", ""to"", ""%s"", ""quotearg_colon"", ""name"", ""quote_n"", ""1"", ""name_end"", ""4""], []]",[-17675058527560581292],63,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49ea4c50575f66e8f0450e463e1d882eed6255ec,30 Nov 2006,"* NEWS: Remove support for mangled names. * doc/tar.texi (verbose
 tutorial): Likewise. * src/Makefile.am (tar_SOURCES): Remove mangle.c. *
 src/common.h (extract_mangle): Remove decl. * src/extract.c
 (extract_mangle_wrapper): Remove. (prepare_to_extract): Remove support for
 mangled names. * src/list.c (read_and, print_header): Likewise. *
 src/mangle.c: Remove. * src/tar.h (GNUTYPE_NAMES): Remove.
",174,data/crawl/tar/hunk_100.cpp,,,data/crawl/tar/old_hunk_100.cpp,data/crawl/tar/new_hunk_100.cpp,89,-1,"ERROR ((0, errno, _(""%s: Cannot rename to %s""),
		    quotearg_colon (name), quote_n (1, name_end + 4)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""Cannot"", ""rename"", ""to"", ""%s"", ""quotearg_colon"", ""name"", ""quote_n"", ""1"", ""name_end"", ""4""], []]",[-7379065118369292126],62,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=49ea4c50575f66e8f0450e463e1d882eed6255ec,30 Nov 2006,"* NEWS: Remove support for mangled names. * doc/tar.texi (verbose
 tutorial): Likewise. * src/Makefile.am (tar_SOURCES): Remove mangle.c. *
 src/common.h (extract_mangle): Remove decl. * src/extract.c
 (extract_mangle_wrapper): Remove. (prepare_to_extract): Remove support for
 mangled names. * src/list.c (read_and, print_header): Likewise. *
 src/mangle.c: Remove. * src/tar.h (GNUTYPE_NAMES): Remove.
",174,data/crawl/tar/hunk_100.cpp,,,data/crawl/tar/old_hunk_100.cpp,data/crawl/tar/new_hunk_100.cpp,53,-1,"ERROR ((0, 0, _(""Unexpected EOF in mangled names"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Unexpected"", ""EOF"", ""in"", ""mangled"", ""names""], []]",[1297509030895174056],61,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8e3f3adf9888cca4acedfe005d277867c999fcb3,12 Dec 2006,"Port to Forte Developer 7 C 5.4 and C99. * src/common.h
 (add_exclude_tag): Add decl; C99 requires this and Forte warns about it. *
 src/incremen.c: Include <mkdtemp.h> for mkdtemp prototype, for same reason. *
 src/misc.c (get_max_open_files): Rewrite to avoid code that Forte C complains
 about as being unreachable. * src/xheader.c (mtime_code): Rewrite to avoid
 Forte error reported by Trond Hasle Amundsen.

* src/incremen.c (compare_dirnames): Rewrite to avoid casts.
* src/utf8.c (string_ascii_p): Likewise.
* src/xheader.c (mtime_coder, volume_size_coder, volume_offset_coder):
Likewise.

SCALAR(0x8283218)",72,data/crawl/tar/hunk_97.cpp,,,data/crawl/tar/old_hunk_97.cpp,data/crawl/tar/new_hunk_97.cpp,-1,9,,/xheader.c (mtime_code);,"[""addLog""]","[[], [""/xheader"", ""c"", ""mtime_code""]]",[1773254890678848168],60,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=445d95be07e497f6b1e3c94d20c5a80cfbf23af5,4 Jan 2007,"(diff_dumpdir): Compare directory contents using dumpdir_cmp.  Do not
 free dumpdir_buffer, it will leave the incremental directory table in the
 inconsistent state and trigger full dump. (read_and_process): Process
 dumpdirs no matter what the archive format.
",66,data/crawl/tar/hunk_96.cpp,,,data/crawl/tar/old_hunk_96.cpp,data/crawl/tar/new_hunk_96.cpp,-1,4,,"report_difference (&current_stat_info, _(""Contents differ""));","[""addLog""]","[[], [""report_difference"", ""&current_stat_info"", ""_"", ""Contents"", ""differ""]]",[9199971555879355926],59,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=445d95be07e497f6b1e3c94d20c5a80cfbf23af5,4 Jan 2007,"(diff_dumpdir): Compare directory contents using dumpdir_cmp.  Do not
 free dumpdir_buffer, it will leave the incremental directory table in the
 inconsistent state and trigger full dump. (read_and_process): Process
 dumpdirs no matter what the archive format.
",66,data/crawl/tar/hunk_94.cpp,,,data/crawl/tar/old_hunk_94.cpp,data/crawl/tar/new_hunk_94.cpp,12,-1,"report_difference (&current_stat_info, _(""Contents differ""));",,"[""removeLog""]","[[""report_difference"", ""&current_stat_info"", ""_"", ""Contents"", ""differ""], []]",[-9199971555879355926],58,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b9588c472262be876400e0804c529c57102d6f0d,23 Jan 2007,"(struct exclude_tag): rename to exclusion_tag (check_exclusion_tags):
 New function (cachedir_file_p): New function (from check_cache_directory)
 (dump_dir0,dump_file0): Use check_exclusion_tags
",215,data/crawl/tar/hunk_92.cpp,,,data/crawl/tar/old_hunk_92.cpp,data/crawl/tar/new_hunk_92.cpp,-1,10,,"exclusion_tag_warning (st->orig_file_name, tag_file_name,
				     _(""directory not dumped""));","[""addLog""]","[[], [""exclusion_tag_warning"", ""st"", ""orig_file_name"", ""tag_file_name"", ""_"", ""directory"", ""not"", ""dumped""]]",[3754211157928654521],57,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=efe6609cd997116b4f29181b57117ff6d91c7d98,26 Sep 2007,"(struct directory): New member tagfile (make_directory): Initialize
 tagfile to NULL (procdir): New argument: entry Hanlde exclusion tags.
 (makedumpdir): Take into account directory->tagfile. (scan_directory): Hanlde
 exclusion tags.
",65,data/crawl/tar/hunk_87.cpp,,,data/crawl/tar/old_hunk_87.cpp,data/crawl/tar/new_hunk_87.cpp,-1,13,,"exclusion_tag_warning (name_buffer, tag_file_name,
			       _(""directory not dumped""));","[""addLog""]","[[], [""exclusion_tag_warning"", ""name_buffer"", ""tag_file_name"", ""_"", ""directory"", ""not"", ""dumped""]]",[2513408544928580515],56,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=5f4d99491da44c47654f3b4f0cab30ed84328138,5 Dec 2007,"(check_compressed_archive): Do not bail out if the file is too short,
 set boolean flag, passed as an argument instead.  This fixes a bug introduced
 on 2007-08-24. See also tests/shortupd.at.
",31,data/crawl/tar/hunk_83.cpp,,,data/crawl/tar/old_hunk_83.cpp,data/crawl/tar/new_hunk_83.cpp,4,-1,"ERROR ((0, 0, _(""This does not look like a tar archive"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""This"", ""does"", ""not"", ""look"", ""like"", ""a"", ""tar"", ""archive""], []]",[-25105532001702206967],55,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=8aa729b90e579cce02d1ef77256c3c4f7b8af29c,5 May 2008,"(main): Reword the ""delayed error"" message. New wording proposed by
 Karl Berry.
",2,data/crawl/tar/hunk_82.cpp,,,data/crawl/tar/old_hunk_82.cpp,data/crawl/tar/new_hunk_82.cpp,3,3,"error (0, 0, _(""Error exit delayed from previous errors""));","error (0, 0, _(""Exiting with failure status due to previous errors""));","[""updateContent""]","[[""Error"", ""exit"", ""delayed"", ""from""], [""Exiting"", ""with"", ""failure"", ""status"", ""due"", ""to""]]",[-14889120006176168418],54,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=985637ab5a7448cf89e59ac433229a4fef2d265d,26 Jun 2008,"Bugfixes.

* src/buffer.c (try_new_volume): Print more information with error
diagnostics.
(_gnu_flush_write): Improve error checking.  Adjust
real_s_sizeleft before calling new_volume to avoid creating
malformed multivolume headers.
* tests/delete05.at, tests/gzip.at, tests/ignfail.at,
tests/longv7.at, tests/lustar01.at, tests/lustar02.at,
tests/shortfile.at: Update to match new diagnostic wording
(see 2008-05-06).

* NEWS: Update.",57,data/crawl/tar/hunk_81.cpp,,,data/crawl/tar/old_hunk_81.cpp,data/crawl/tar/new_hunk_81.cpp,-1,5,,"ERROR ((0, 0, _(""write did not end on a block boundary"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""write"", ""did"", ""not"", ""end"", ""on"", ""a"", ""block"", ""boundary""]]",[12256500287287740228],53,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=7f6e6e6a3e4e9a66f86f0c781da0680a438df61a,25 Nov 2008,"Do not try to drain the input pipe before closing the archive.

* src/buffer.c (close_archive): Remove call to
sys_drain_input_pipe. Pass hit_eof as the second
argument to sys_wait_for_child.
* src/common.h (sys_drain_input_pipe): Remove
(sys_wait_for_child): Declare second argument.
* src/system.c (sys_drain_input_pipe): Remove.
(sys_wait_for_child): Take two arguments. The second one helps to
decide whether to tolerate child termination on SIGPIPE.",58,data/crawl/tar/hunk_75.cpp,,,data/crawl/tar/old_hunk_75.cpp,data/crawl/tar/new_hunk_75.cpp,3,6,"ERROR ((0, 0, _(""Child died with signal %d""),
		WTERMSIG (wait_status)));","ERROR ((0, 0, _(""Child died with signal %d""), sig));","[""removeVariable"", ""addVariable""]","[[""WTERMSIG"", ""wait_status""], [""sig""]]",[-4040417754433355859],52,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ac6caa71bc6077d75ff5073f76f97d53225e78ae,7 Mar 2009,"Migrate to Git
",29623,data/crawl/tar/hunk_72.cpp,,,data/crawl/tar/old_hunk_72.cpp,data/crawl/tar/new_hunk_72.cpp,72,-1,"error (xalloc_exit_failure, 0, ""%s"", _(xalloc_msg_memory_exhausted));",,"[""removeLog""]","[[""error"", ""xalloc_exit_failure"", ""0"", ""%s"", ""_"", ""xalloc_msg_memory_exhausted""], []]",[1822739142890536808],51,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ac6caa71bc6077d75ff5073f76f97d53225e78ae,7 Mar 2009,"Migrate to Git
",29623,data/crawl/tar/hunk_71.cpp,,,data/crawl/tar/old_hunk_71.cpp,data/crawl/tar/new_hunk_71.cpp,232,-1,"error (1, 0, _(""cannot convert U+%04X to local character set: %s""), code,
	   gettext (msg));",,"[""removeLog""]","[[""error"", ""1"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""%s"", ""code"", ""gettext"", ""msg""], []]",[-33030173934653945481],50,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ac6caa71bc6077d75ff5073f76f97d53225e78ae,7 Mar 2009,"Migrate to Git
",29623,data/crawl/tar/hunk_71.cpp,,,data/crawl/tar/old_hunk_71.cpp,data/crawl/tar/new_hunk_71.cpp,230,-1,"error (1, 0, _(""cannot convert U+%04X to local character set""), code);",,"[""removeLog""]","[[""error"", ""1"", ""0"", ""_"", ""cannot"", ""convert"", ""U"", ""%04X"", ""to"", ""local"", ""character"", ""set"", ""code""], []]",[-21831195340544402245],49,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ac6caa71bc6077d75ff5073f76f97d53225e78ae,7 Mar 2009,"Migrate to Git
",29623,data/crawl/tar/hunk_70.cpp,,,data/crawl/tar/old_hunk_70.cpp,data/crawl/tar/new_hunk_70.cpp,51,-1,"fputs (""Copyright "", stdout);",,"[""removeLog""]","[[""fputs"", ""Copyright"", ""stdout""], []]",[4592243020658936354],48,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ac6caa71bc6077d75ff5073f76f97d53225e78ae,7 Mar 2009,"Migrate to Git
",29623,data/crawl/tar/hunk_70.cpp,,,data/crawl/tar/old_hunk_70.cpp,data/crawl/tar/new_hunk_70.cpp,41,-1,"fputs (""(C)"", stream);",,"[""removeLog""]","[[""fputs"", ""C"", ""stream""], []]",[12668536724985154919],47,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ac6caa71bc6077d75ff5073f76f97d53225e78ae,7 Mar 2009,"Migrate to Git
",29623,data/crawl/tar/hunk_68.cpp,,,data/crawl/tar/old_hunk_68.cpp,data/crawl/tar/new_hunk_68.cpp,137,-1,"error (0, 0, format, quotearg_n_style (0, ARGMATCH_QUOTING_STYLE, value),
	 quote_n (1, context));",,"[""removeLog""]","[[""error"", ""0"", ""0"", ""format"", ""quotearg_n_style"", ""0"", ""ARGMATCH_QUOTING_STYLE"", ""value"", ""quote_n"", ""1"", ""context""], []]",[3117648326146377871],46,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ac6caa71bc6077d75ff5073f76f97d53225e78ae,7 Mar 2009,"Migrate to Git
",29623,data/crawl/tar/hunk_66.cpp,,,data/crawl/tar/old_hunk_66.cpp,data/crawl/tar/new_hunk_66.cpp,186,-1,/buffer.c (try_new_volume);,,"[""removeLog""]","[[""/buffer"", ""c"", ""try_new_volume""], []]",[12530930510547672729],45,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_65.cpp,,,data/crawl/tar/old_hunk_65.cpp,data/crawl/tar/new_hunk_65.cpp,170,-1,"fputs (message, stderr);",,"[""removeLog""]","[[""fputs"", ""message"", ""stderr""], []]",[19068772633607565375],44,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_65.cpp,,,data/crawl/tar/old_hunk_65.cpp,data/crawl/tar/new_hunk_65.cpp,168,-1,"fputs ("": "", stderr);",,"[""removeLog""]","[[""fputs"", ""stderr""], []]",[12222138665392642905],43,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_65.cpp,,,data/crawl/tar/old_hunk_65.cpp,data/crawl/tar/new_hunk_65.cpp,167,-1,"fputs (program_name, stderr);",,"[""removeLog""]","[[""fputs"", ""program_name"", ""stderr""], []]",[15430255656860506239],42,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,712,-1,"fputs(bp[0], out);",,"[""removeLog""]","[[""fputs"", ""bp[0]"", ""out""], []]",[-7111777645923505721],41,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,711,-1,"fputs(""va_dcl"", out);",,"[""removeLog""]","[[""fputs"", ""va_dcl"", ""out""], []]",[6202439204735682583],40,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=c30c4ffb9fc874aafea6f6c91f3fc78595db4154,18 Jun 2009,"Remove files that were removed in CVS, but reappeared after migration
 to Git
",5265,data/crawl/tar/hunk_64.cpp,,,data/crawl/tar/old_hunk_64.cpp,data/crawl/tar/new_hunk_64.cpp,309,-1,"fputs(more, out);",,"[""removeLog""]","[[""fputs"", ""more"", ""out""], []]",[7686589844068392945],39,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=92773d860f94323c14cc8c1b27436f2e73a174fd,16 Sep 2009,"Restore extra help output.

* src/tar.c (tar_list_quoting_styles): Change first argument to
struct obstack.
(format_default_settings): New function.
(show_default_settings)
(show_default_settings_fs): Removed.
(tar_help): Removed.
(tar_help_filter): New function.
(argp): Set help_filter.
(parse_opt): Fix error message.",370,data/crawl/tar/hunk_63.cpp,,,data/crawl/tar/old_hunk_63.cpp,data/crawl/tar/new_hunk_63.cpp,20,20,"argp_fmtstream_printf (fs, _(""Report bugs to %s.\n""),
			 argp_program_bug_address);","obstack_grow (&stk, s, strlen (s));","[""updateVariable"", ""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""argp_fmtstream_printf"", ""fs"", ""_"", ""Report"", ""bugs"", ""to"", ""%s"", ""\\n"", ""argp_program_bug_address""], [""obstack_grow"", ""&stk"", ""s"", ""strlen"", ""s""]]",[-11543692060527703276],38,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=92773d860f94323c14cc8c1b27436f2e73a174fd,16 Sep 2009,"Restore extra help output.

* src/tar.c (tar_list_quoting_styles): Change first argument to
struct obstack.
(format_default_settings): New function.
(show_default_settings)
(show_default_settings_fs): Removed.
(tar_help): Removed.
(tar_help_filter): New function.
(argp): Set help_filter.
(parse_opt): Fix error message.",370,data/crawl/tar/hunk_63.cpp,,,data/crawl/tar/old_hunk_63.cpp,data/crawl/tar/new_hunk_63.cpp,13,18,"argp_fmtstream_printf (fs, ""\n%s\n\n"",
		       _(""Valid arguments for --quoting-style options are:""));","obstack_grow (&stk, s, strlen (s));","[""updateVariable"", ""updateLog"", ""removeContent"", ""addVariable""]","[[""argp_fmtstream_printf"", ""fs"", ""\\n%s\\n\\n"", ""_"", ""Valid"", ""arguments"", ""for"", ""quoting"", ""style"", ""options"", ""are""], [""obstack_grow"", ""&stk"", ""s"", ""strlen"", ""s""]]",[-849233018306025743],37,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=92773d860f94323c14cc8c1b27436f2e73a174fd,16 Sep 2009,"Restore extra help output.

* src/tar.c (tar_list_quoting_styles): Change first argument to
struct obstack.
(format_default_settings): New function.
(show_default_settings)
(show_default_settings_fs): Removed.
(tar_help): Removed.
(tar_help_filter): New function.
(argp): Set help_filter.
(parse_opt): Fix error message.",370,data/crawl/tar/hunk_62.cpp,,,data/crawl/tar/old_hunk_62.cpp,data/crawl/tar/new_hunk_62.cpp,8,13,"argp_fmtstream_printf (fs, ""%s%s\n"", prefix, quoting_style_args[i]);","obstack_1grow (stk, '\n');","[""updateVariable"", ""updateLog"", ""removeVariable"", ""updateContent""]","[[""argp_fmtstream_printf"", ""fs"", ""%s%s\\n"", ""prefix"", ""quoting_style_args[i]""], [""obstack_1grow"", ""stk"", ""\\n""]]",[1653641917230024757],36,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4dfcd6c054a5e9e1a371c822a3be90564dd9b690,7 Oct 2009,"Fix bugs in handling the --remove-files option.

Make sure the files are deleted only if they were succesfully stored
to the archive.

* src/exit.c: New file.
* src/unlink.c: New file.
* src/Makefile.am (tar_SOURCES): Add exit.c and unlink.c.
* src/common.h: Include progname.h
(program_name): Remove global.
(records_written): New extern.
(queue_deferred_unlink, finish_deferred_unlinks): New prototypes.
(fatal_exit_hook): New extern.
* src/create.c (create_archive): Call finish_deferred_unlinks.
(dump_hard_link, dump_file0): Don't actually unlink the file,
queue it to deferred_unlinks instead.
* src/delete.c (records_written): Remove extern: declared in
common.h.
* src/extract.c (extract_archive): Set fatal_exit_hook.
(fatal_exit, xalloc_die): Move to exit.c
* src/system.c (sys_wait_for_child): Exit immediately
if the child dies or exits with a non-zero status.
(sys_child_open_for_compress)
(sys_child_open_for_uncompress): Use set_program_name,
instead of setting program_name directly.
* src/tar.c (main): Use set_program_name,
instead of setting program_name directly.

* tests/Makefile.am (TESTSUITE_AT): Add remfiles01.at
and remfiles02.at.
* tests/testsuite.at: Likewise.
* tests/gzip.at: Reflect the above changes.",401,data/crawl/tar/hunk_60.cpp,,,data/crawl/tar/old_hunk_60.cpp,data/crawl/tar/new_hunk_60.cpp,15,-1,"error (0, 0, ""%s"", _(""memory exhausted""));",,"[""removeLog""]","[[""error"", ""0"", ""0"", ""%s"", ""_"", ""memory"", ""exhausted""], []]",[-18665186363113048020],35,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=4dfcd6c054a5e9e1a371c822a3be90564dd9b690,7 Oct 2009,"Fix bugs in handling the --remove-files option.

Make sure the files are deleted only if they were succesfully stored
to the archive.

* src/exit.c: New file.
* src/unlink.c: New file.
* src/Makefile.am (tar_SOURCES): Add exit.c and unlink.c.
* src/common.h: Include progname.h
(program_name): Remove global.
(records_written): New extern.
(queue_deferred_unlink, finish_deferred_unlinks): New prototypes.
(fatal_exit_hook): New extern.
* src/create.c (create_archive): Call finish_deferred_unlinks.
(dump_hard_link, dump_file0): Don't actually unlink the file,
queue it to deferred_unlinks instead.
* src/delete.c (records_written): Remove extern: declared in
common.h.
* src/extract.c (extract_archive): Set fatal_exit_hook.
(fatal_exit, xalloc_die): Move to exit.c
* src/system.c (sys_wait_for_child): Exit immediately
if the child dies or exits with a non-zero status.
(sys_child_open_for_compress)
(sys_child_open_for_uncompress): Use set_program_name,
instead of setting program_name directly.
* src/tar.c (main): Use set_program_name,
instead of setting program_name directly.

* tests/Makefile.am (TESTSUITE_AT): Add remfiles01.at
and remfiles02.at.
* tests/testsuite.at: Likewise.
* tests/gzip.at: Reflect the above changes.",401,data/crawl/tar/hunk_60.cpp,,,data/crawl/tar/old_hunk_60.cpp,data/crawl/tar/new_hunk_60.cpp,8,-1,"error (TAREXIT_FAILURE, 0, _(""Error is not recoverable: exiting now""));",,"[""removeLog""]","[[""error"", ""TAREXIT_FAILURE"", ""0"", ""_"", ""Error"", ""is"", ""not"", ""recoverable"", ""exiting"", ""now""], []]",[-29424550464379772209],34,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=63e092548a9b87c0be0f0b286c883e1f3d52294c,7 Oct 2009,"Provide a way to explicitly set mtime for extended header ustar
 blocks.

* src/tar.c (struct textual_date): ts is a copy of the structure,
not a pointer to it. Date is a copy as well, hence the `const' is
taken away.
(get_date_or_file): Return 0/1 depending on success/failure.
Copy timestamp to the `ts' member. Store a copy of the string
in `date'.
(report_textual_dates): Report only if verbose_option is set,
but always free the list.
(expand_pax_option): New function.
(parse_opt): Preprocess the argument to xheader_set_option with
expand_pax_option.
(decode_options): Call report_textual_dates unconditionally.
* src/xheader.c (exthdr_mtime_option, exthdr_mtime)
(globexthdr_mtime_option, globexthdr_mtime): New statics.
(xheader_set_keyword_equal): handle exthdr.mtime and globexthdr.mtime.
(xheader_write): Override `t' argument if a corresponding
exthdr.mtime or globexthdr.mtime option is set.
* NEWS: Update
* doc/tar.texi: Document the changes.",206,data/crawl/tar/hunk_58.cpp,,,data/crawl/tar/old_hunk_58.cpp,data/crawl/tar/new_hunk_58.cpp,-1,9,,"ERROR ((0, 0, _(""Time stamp is out of allowed range"")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""Time"", ""stamp"", ""is"", ""out"", ""of"", ""allowed"", ""range""]]",[6805265858852520305],33,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0ba8bdf5f3401fdc8c1595857ab69f6c65e04353,11 Mar 2010,"Fix `--test-label' and `--label -r' behavior.

* doc/tar.texi (Including a Label in the Archive): Revise
the section.
* NEWS: Update

* src/buffer.c (open_archive): Check volume label on
ACCESS_UPDATE as well.
* src/list.c (test_archive_label): Rewrite to match the
documentation.
* src/names.c (regex_usage_warning): Return int.
(names_notfound): Rewrite the conditional.
(label_notfound): New function.

* tests/label03.at: New testcase.
* tests/label04.at: New testcase.
* tests/label05.at: New testcase.
* tests/Makefile.am: Add new testcases.
* tests/testsuite.at: Likewise.",376,data/crawl/tar/hunk_56.cpp,,,data/crawl/tar/old_hunk_56.cpp,data/crawl/tar/new_hunk_56.cpp,-1,17,,"error (0, 0, _(""Archive label mismatch""));","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""Archive"", ""label"", ""mismatch""]]",[6592666722326856271],32,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0ba8bdf5f3401fdc8c1595857ab69f6c65e04353,11 Mar 2010,"Fix `--test-label' and `--label -r' behavior.

* doc/tar.texi (Including a Label in the Archive): Revise
the section.
* NEWS: Update

* src/buffer.c (open_archive): Check volume label on
ACCESS_UPDATE as well.
* src/list.c (test_archive_label): Rewrite to match the
documentation.
* src/names.c (regex_usage_warning): Return int.
(names_notfound): Rewrite the conditional.
(label_notfound): New function.

* tests/label03.at: New testcase.
* tests/label04.at: New testcase.
* tests/label05.at: New testcase.
* tests/Makefile.am: Add new testcases.
* tests/testsuite.at: Likewise.",376,data/crawl/tar/hunk_55.cpp,,,data/crawl/tar/old_hunk_55.cpp,data/crawl/tar/new_hunk_55.cpp,7,-1,"ERROR ((0, 0, _(""%s: Required occurrence not found in archive""),
		  quotearg_colon (cursor->name)));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Required"", ""occurrence"", ""not"", ""found"", ""in"", ""archive"", ""quotearg_colon"", ""cursor"", ""name""], []]",[-5841894509227996977],31,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=0ba8bdf5f3401fdc8c1595857ab69f6c65e04353,11 Mar 2010,"Fix `--test-label' and `--label -r' behavior.

* doc/tar.texi (Including a Label in the Archive): Revise
the section.
* NEWS: Update

* src/buffer.c (open_archive): Check volume label on
ACCESS_UPDATE as well.
* src/list.c (test_archive_label): Rewrite to match the
documentation.
* src/names.c (regex_usage_warning): Return int.
(names_notfound): Rewrite the conditional.
(label_notfound): New function.

* tests/label03.at: New testcase.
* tests/label04.at: New testcase.
* tests/label05.at: New testcase.
* tests/Makefile.am: Add new testcases.
* tests/testsuite.at: Likewise.",376,data/crawl/tar/hunk_55.cpp,,,data/crawl/tar/old_hunk_55.cpp,data/crawl/tar/new_hunk_55.cpp,4,3,"ERROR ((0, 0, _(""%s: Not found in archive""),
		  quotearg_colon (cursor->name)));","ERROR ((0, 0, 
		(cursor->found_count == 0) ?
		     _(""%s: Not found in archive"") :
		     _(""%s: Required occurrence not found in archive""),
		quotearg_colon (cursor->name)));","[""addContent"", ""addVariable""]","[[], [""found_count"", ""0"", ""_"", ""%s"", ""Required"", ""occurrence"", ""not"", ""found"", ""in"", ""archive"", ""cursor""]]",[2428897912859399205],30,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d88b2a613f4b1a5554e8c34c8f75b91abff5f0e9,15 Nov 2011,"Fix operation of --verify in conjunction with --listed-incremental

* src/common.h (clear_directory_table): New proto.
* src/incremen.c (clear_directory_table): New function.
* src/compare.c (diff_dumpdir): Take a pointer to struct
tar_stat_info as argument.
Initialize its fd.
(diff_archive): Update call to diff_dumpdir.
(verify_volume): Call clear_directory_table.",60,data/crawl/tar/hunk_44.cpp,,,data/crawl/tar/old_hunk_44.cpp,data/crawl/tar/new_hunk_44.cpp,24,40,"report_difference (&current_stat_info, _(""Contents differ""));","report_difference (dir, _(""Contents differ""));","[""updateVariable"", ""removeVariable""]","[[""&current_stat_info""], [""dir""]]",[-8116069282325251433],29,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=696338043e52f440853e1143c52b81b41cd59723,18 Nov 2012,"Add basic suuport for extended attributes.

* src/Makefile.am: Add xattrs.[ch]
* src/xattrs.c: New file.
* src/xattrs.h: New file.
* src/common.h (READ_LIKE_SUBCOMMAND): New define.
(selinux_context_option, acls_option, xattrs_option): New globals.
(xheader_xattr_init, xheader_xattr_free)
(xheader_xattr_copy, xheader_xattr_add): New protos.
(WARN_XATTR_WRITE): New mask.
* src/create.c (start_header): Handle xattrs pairs if in POSIX format.
(dump_file0): Handle extended attributes.
* src/extract.c (delayed_set_stat,delayed_link) <xattr_map_size>
<xattr_map>: New members.
(set_xattr): New static function.
(open_output_file): Accept an additional argument indicating
whether the file has already been created.
(set_stat,delay_set_stat)
(apply_nonancestor_delayed_set_stat)
(extract_file): Handle extended attributes.
* src/list.c (decode_header, simple_print_header): Display
extended attributes.
* src/tar.c: New options --xattrs, --no-xattrs, --xattrs-include,
--xattrs-exclude
(tar_stat_destroy): Free the xattr_map storage.
* src/tar.h (xattr_array): New struct.
(tar_stat_info) <xattr_map_size, xattr_map>: New members.
* src/warning.c: New warning control keyword ""xattr-write"".
* src/xheader.c (xheader_xattr_init)
(xheader_xattr_free, xheader_xattr_add)
(xheader_xattr_copy): New functions.
(struct xhdr_tab) <prefix>: New member.
(locate_handler): Permit selecting the keyword based on its
prefix.
(xheader_protected_pattern_p)
(xheader_protected_keyword_p): Likewise.
(xattr_coder, xattr_decoder): New functions.
(xhdr_tab): Reflect the changes to struct xhdr_tab.
New keyword ""SCHILY.xattr"".
* tests/Makefile.am: Add new tests.
* tests/testsuite.at: Likewise.
(AT_CHECK_UTIL, AT_XATTRS_UTILS_PREREQ)
(AT_CAPABILITIES_UTILS_PREREQ, AT_XATTRS_PREREQ): New defuns.
* tests/xattr01.at: New test.
* tests/xattr02.at: New test.
* tests/xattr03.at: New test.
* tests/xattr04.at: New test.
* tests/capabs_raw01.at: New test.",822,data/crawl/tar/hunk_40.cpp,,,data/crawl/tar/old_hunk_40.cpp,data/crawl/tar/new_hunk_40.cpp,-1,143,,"call_arg_warn ((fd == 0) ? ""lgetxattrat""
                                         : ""fgetxattr"", file_name);","[""addLog""]","[[], [""call_arg_warn"", ""fd"", ""0"", ""lgetxattrat"", ""fgetxattr"", ""file_name""]]",[-8013588900604307334],28,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=696338043e52f440853e1143c52b81b41cd59723,18 Nov 2012,"Add basic suuport for extended attributes.

* src/Makefile.am: Add xattrs.[ch]
* src/xattrs.c: New file.
* src/xattrs.h: New file.
* src/common.h (READ_LIKE_SUBCOMMAND): New define.
(selinux_context_option, acls_option, xattrs_option): New globals.
(xheader_xattr_init, xheader_xattr_free)
(xheader_xattr_copy, xheader_xattr_add): New protos.
(WARN_XATTR_WRITE): New mask.
* src/create.c (start_header): Handle xattrs pairs if in POSIX format.
(dump_file0): Handle extended attributes.
* src/extract.c (delayed_set_stat,delayed_link) <xattr_map_size>
<xattr_map>: New members.
(set_xattr): New static function.
(open_output_file): Accept an additional argument indicating
whether the file has already been created.
(set_stat,delay_set_stat)
(apply_nonancestor_delayed_set_stat)
(extract_file): Handle extended attributes.
* src/list.c (decode_header, simple_print_header): Display
extended attributes.
* src/tar.c: New options --xattrs, --no-xattrs, --xattrs-include,
--xattrs-exclude
(tar_stat_destroy): Free the xattr_map storage.
* src/tar.h (xattr_array): New struct.
(tar_stat_info) <xattr_map_size, xattr_map>: New members.
* src/warning.c: New warning control keyword ""xattr-write"".
* src/xheader.c (xheader_xattr_init)
(xheader_xattr_free, xheader_xattr_add)
(xheader_xattr_copy): New functions.
(struct xhdr_tab) <prefix>: New member.
(locate_handler): Permit selecting the keyword based on its
prefix.
(xheader_protected_pattern_p)
(xheader_protected_keyword_p): Likewise.
(xattr_coder, xattr_decoder): New functions.
(xhdr_tab): Reflect the changes to struct xhdr_tab.
New keyword ""SCHILY.xattr"".
* tests/Makefile.am: Add new tests.
* tests/testsuite.at: Likewise.
(AT_CHECK_UTIL, AT_XATTRS_UTILS_PREREQ)
(AT_CAPABILITIES_UTILS_PREREQ, AT_XATTRS_PREREQ): New defuns.
* tests/xattr01.at: New test.
* tests/xattr02.at: New test.
* tests/xattr03.at: New test.
* tests/xattr04.at: New test.
* tests/capabs_raw01.at: New test.",822,data/crawl/tar/hunk_40.cpp,,,data/crawl/tar/old_hunk_40.cpp,data/crawl/tar/new_hunk_40.cpp,-1,114,,"call_arg_warn ((fd == 0) ? ""llistxattrat"" : ""flistxattr"", file_name);","[""addLog""]","[[], [""call_arg_warn"", ""fd"", ""0"", ""llistxattrat"", ""flistxattr"", ""file_name""]]",[-26486722970499191430],27,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d36f5a3cc3280d6c4a58367bf51b527d5c14ac04,18 Nov 2012,"Support for POSIX ACLs

* configure.ac: Check whether ACLs are available on the
host system.
* gnulib.modules: Add acl
* src/create.c (start_header): Store ACLs when creating
a POSIX archive.
(dump_file0): Handle ACLs.
* src/extract.c (delayed_set_stat) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
(delayed_link): Likewise.
(set_stat,delay_set_stat)
(apply_nonancestor_delayed_set_stat): Set ACLs.
* src/tar.c: New options: ""--acls"", ""--no-acls""
(tar_stat_destroy): Free acls_a_ptr and acls_d_ptr fields.
* src/tar.h (tar_stat_info) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
* src/xattrs.c (xattrs_acls_get, xattrs_acls_set): New functions.
* src/xheader.c: Support new keywors: ""SCHILY.acl.access"" and
""SCHILY.acl.default"".
* tests/Makefile.am: Add new tests.
* tests/testsuite.at: Likewise.
* tests/acls01.at: New test.
* tests/acls02.at: New test.",627,data/crawl/tar/hunk_39.cpp,,,data/crawl/tar/old_hunk_39.cpp,data/crawl/tar/new_hunk_39.cpp,-1,282,,"call_arg_warn (""file_has_acl_at"", file_name);","[""addLog""]","[[], [""call_arg_warn"", ""file_has_acl_at"", ""file_name""]]",[-19825320036062642961],26,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=d36f5a3cc3280d6c4a58367bf51b527d5c14ac04,18 Nov 2012,"Support for POSIX ACLs

* configure.ac: Check whether ACLs are available on the
host system.
* gnulib.modules: Add acl
* src/create.c (start_header): Store ACLs when creating
a POSIX archive.
(dump_file0): Handle ACLs.
* src/extract.c (delayed_set_stat) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
(delayed_link): Likewise.
(set_stat,delay_set_stat)
(apply_nonancestor_delayed_set_stat): Set ACLs.
* src/tar.c: New options: ""--acls"", ""--no-acls""
(tar_stat_destroy): Free acls_a_ptr and acls_d_ptr fields.
* src/tar.h (tar_stat_info) <acls_a_ptr, acls_a_len>
<acls_d_ptr, acls_d_len>: New members.
* src/xattrs.c (xattrs_acls_get, xattrs_acls_set): New functions.
* src/xheader.c: Support new keywors: ""SCHILY.acl.access"" and
""SCHILY.acl.default"".
* tests/Makefile.am: Add new tests.
* tests/testsuite.at: Likewise.
* tests/acls01.at: New test.
* tests/acls02.at: New test.",627,data/crawl/tar/hunk_39.cpp,,,data/crawl/tar/old_hunk_39.cpp,data/crawl/tar/new_hunk_39.cpp,-1,155,,"call_arg_warn (""acl_from_text"", file_name);","[""addLog""]","[[], [""call_arg_warn"", ""acl_from_text"", ""file_name""]]",[-6349549074503414400],25,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=085cace1805308589c6211429068f68047be0b0e,18 Nov 2012,"Add SELinux context store/restore/list support.

* gnulib.modules: Add selinux-at.
* src/Makefile.am (tar_LDADD): Add LIB_SELINUX.

* src/create.c (start_header, dump_file0): Handle selinux contexts.
* src/extract.c (delayed_set_stat) <cntx_name>: New member.
(delayed_link) <cntx_name>: New member.
(set_stat, delay_set_stat)
(apply_nonancestor_delayed_set_stat): Handle selinux contexts.
* src/tar.c: New options: ""--selinux"", ""--no-selinux"".
(tar_stat_destroy): Free cntx_name.
* src/tar.h (tar_stat_info) <cntx_name>: New member.
* src/xattrs.c (xattrs_selinux_get)
(xattrs_selinux_set): New functions.
(xattrs_print_char): Honor selinux_context_option.
(xattrs_print): Print selinux context.
* src/xheader.c: Handle new keyword ""RHT.security.selinux"".
* tests/Makefile.am: Add new tests.
* tests/testsuite.at: Likewise.
* tests/selacl01.at: New test.
* tests/selnx01.at: New test.",311,data/crawl/tar/hunk_38.cpp,,,data/crawl/tar/old_hunk_38.cpp,data/crawl/tar/new_hunk_38.cpp,-1,20,,"call_arg_warn (fd ? ""fgetfilecon"" : ""lgetfileconat"", file_name);","[""addLog""]","[[], [""call_arg_warn"", ""fd"", ""fgetfilecon"", ""lgetfileconat"", ""file_name""]]",[-24993579701247350419],24,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=df7b55a8f6354e30e8da62eec7f706df033d0c81,22 Dec 2012,"Fix some problems with negative and out-of-range integers.

Original problem reported for HP-UX LVM v2.2 by Michael White in
<http://lists.gnu.org/archive/html/bug-tar/2012-10/msg00000.html>.
This patch fixes some other gotchas that I noticed.
* gnulib.modules: Add extern-inline.
* src/common.h: Use _GL_INLINE_HEADER_BEGIN, _GL_INLINE_HEADER_END.
(COMMON_INLINE, max, min): New macros.
(represent_uintmax, valid_timespec): New inline functions.
(SYSINT_BUFSIZE): New constant.
(sysinttostr, strtosysint, decode_timespec): New decls.
* src/create.c (start_private_header): Silently bring the time_t
value into range; it is now the caller's responsibility to deal
with any overflow error.  Use uid 0 and gid 0 rather than the
user's uid/gid, since the faked header isn't ""owned"" by the user
and the uid/gid could in theory be out of range.  Leave major and
minor zeroed.
(FILL): Remove.
(write_gnu_long_link): Let start_private_header zero things out.
* src/create.c (write_gnu_long_link, write_extended):
* src/xheader.c (xheader_write_global):
Use start_time, not current time; no point hammering on the clock.
* src/compare.c (diff_multivol): Check that offset, size are in range.
* src/incremen.c (read_incr_db_01, write_directory_file_entry):
Allow negative time_t, dev_t, and ino_t.
* src/list.c (max): Remove (moved to common.h).
(read_header): Check that size is in range.
(from_header): Return intmax_t, not uintmax_t, to allow negative.
All callers changed.  At compile time, check assumptions about
intmax_t and uintmax_t.  Use bool for booleans.  Avoid overflow
hassles on picky hosts.
(mode_from_header): Last arg is now bool *, not unsigned *.
All callers changed.
(simple_print_header): Do not assume UID, GID fit in 'long'.
* src/list.c (from_header):
* src/xheader.c (out_of_range_header):
Arg is now a plain minimum value, not minus minval converted to
uintmax_t.  All callers changed.
* src/misc.c (COMMON_INLINE): New macro.
(sysinttostr, strtosysint, decode_timespec): New functions.
* src/sparse.c (oldgnu_add_sparse, oldgnu_fixup_header)
(star_fixup_header):
Check for offset overflow.
(decode_num): Clear errno before calling strtoumax.
* src/tar.c (expand_pax_option): Don't discard nanoseconds.
* src/xheader.c (assign_time_option): Allow negative time_t.
(decode_record): Simplify, since out-of-range string is guaranteed
to produce a value exceeding len_max.
(xheader_read): Last arg is off_t, not size_t.
Caller should diagnose negative arg, as needed.
Check that it's in range.
(enum decode_time_status): Remove.
(_decode_time): Remove, folding into decode_time.
(decode_time): Return bool, not enum decode_time_status.
Rely on decode_timespec to do most of the work.
(code_signed_num): New function.
(code_num): Use it.
(decode_signed_num): New function.
(decode_num): Use it.
(gid_coder, gid_decoder, uid_coder, uid_decoder, sparse_map_decoder)
(sparse_map_decoder): Code and decode negative values.
(sparse_map_decoder): Improve check for out-of-range values.
* tests/time01.at: New file.
* tests/Makefile.am (TESTSUITE_AT): Add it.
* tests/testsuite.at: Include it.",759,data/crawl/tar/hunk_23.cpp,,,data/crawl/tar/old_hunk_23.cpp,data/crawl/tar/new_hunk_23.cpp,7,-1,"ERROR ((0, 0, _(""Extended header length is out of allowed range"")));",,"[""removeLog""]","[[""ERROR"", ""0"", ""0"", ""_"", ""Extended"", ""header"", ""length"", ""is"", ""out"", ""of"", ""allowed"", ""range""], []]",[-4530906043695161880],23,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=df7b55a8f6354e30e8da62eec7f706df033d0c81,22 Dec 2012,"Fix some problems with negative and out-of-range integers.

Original problem reported for HP-UX LVM v2.2 by Michael White in
<http://lists.gnu.org/archive/html/bug-tar/2012-10/msg00000.html>.
This patch fixes some other gotchas that I noticed.
* gnulib.modules: Add extern-inline.
* src/common.h: Use _GL_INLINE_HEADER_BEGIN, _GL_INLINE_HEADER_END.
(COMMON_INLINE, max, min): New macros.
(represent_uintmax, valid_timespec): New inline functions.
(SYSINT_BUFSIZE): New constant.
(sysinttostr, strtosysint, decode_timespec): New decls.
* src/create.c (start_private_header): Silently bring the time_t
value into range; it is now the caller's responsibility to deal
with any overflow error.  Use uid 0 and gid 0 rather than the
user's uid/gid, since the faked header isn't ""owned"" by the user
and the uid/gid could in theory be out of range.  Leave major and
minor zeroed.
(FILL): Remove.
(write_gnu_long_link): Let start_private_header zero things out.
* src/create.c (write_gnu_long_link, write_extended):
* src/xheader.c (xheader_write_global):
Use start_time, not current time; no point hammering on the clock.
* src/compare.c (diff_multivol): Check that offset, size are in range.
* src/incremen.c (read_incr_db_01, write_directory_file_entry):
Allow negative time_t, dev_t, and ino_t.
* src/list.c (max): Remove (moved to common.h).
(read_header): Check that size is in range.
(from_header): Return intmax_t, not uintmax_t, to allow negative.
All callers changed.  At compile time, check assumptions about
intmax_t and uintmax_t.  Use bool for booleans.  Avoid overflow
hassles on picky hosts.
(mode_from_header): Last arg is now bool *, not unsigned *.
All callers changed.
(simple_print_header): Do not assume UID, GID fit in 'long'.
* src/list.c (from_header):
* src/xheader.c (out_of_range_header):
Arg is now a plain minimum value, not minus minval converted to
uintmax_t.  All callers changed.
* src/misc.c (COMMON_INLINE): New macro.
(sysinttostr, strtosysint, decode_timespec): New functions.
* src/sparse.c (oldgnu_add_sparse, oldgnu_fixup_header)
(star_fixup_header):
Check for offset overflow.
(decode_num): Clear errno before calling strtoumax.
* src/tar.c (expand_pax_option): Don't discard nanoseconds.
* src/xheader.c (assign_time_option): Allow negative time_t.
(decode_record): Simplify, since out-of-range string is guaranteed
to produce a value exceeding len_max.
(xheader_read): Last arg is off_t, not size_t.
Caller should diagnose negative arg, as needed.
Check that it's in range.
(enum decode_time_status): Remove.
(_decode_time): Remove, folding into decode_time.
(decode_time): Return bool, not enum decode_time_status.
Rely on decode_timespec to do most of the work.
(code_signed_num): New function.
(code_num): Use it.
(decode_signed_num): New function.
(decode_num): Use it.
(gid_coder, gid_decoder, uid_coder, uid_decoder, sparse_map_decoder)
(sparse_map_decoder): Code and decode negative values.
(sparse_map_decoder): Improve check for out-of-range values.
* tests/time01.at: New file.
* tests/Makefile.am (TESTSUITE_AT): Add it.
* tests/testsuite.at: Include it.",759,data/crawl/tar/hunk_20.cpp,,,data/crawl/tar/old_hunk_20.cpp,data/crawl/tar/new_hunk_20.cpp,9,6,"ERROR ((0, errno, ""%s:%ld: %s"",
		      quotearg_colon (listed_incremental_option), lineno,
		      _(""Invalid modification time (seconds)"")));","ERROR ((0, errno, ""%s:%ld: %s"",
		    quotearg_colon (listed_incremental_option), lineno,
		    _(""Invalid modification time"")));","[""updateContent""]","[[""seconds""], []]",[-645727887860354760],22,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=077d7bceff9f28209972325097509d7ae775c1f0,16 Aug 2013,"Don't treat attempts to read an already read file list as fatal
 errors.

* src/names.c (add_file_id): Report error and return 1 if the file
has already been read.
(read_next_name): Don't try to open file if add_file_id returns 1.
(name_next_elt): Simplify conditional.",11,data/crawl/tar/hunk_17.cpp,,,data/crawl/tar/old_hunk_17.cpp,data/crawl/tar/new_hunk_17.cpp,-1,3,,"ERROR ((0, 0, _(""%s: file list already read""),
		quotearg_colon (filename)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""file"", ""list"", ""already"", ""read"", ""quotearg_colon"", ""filename""]]",[-8685540782153843997],21,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=bff9c3637d9e3c010be697a81d93e934c919d83c,17 Aug 2013,"Improve error diagnostics

* src/names.c (file_list_name): New static function.
(add_file_id): If a filelist is being read twice, print the names
of the files that caused it.
* tests/T-rec.at: New test case.
* tests/Makefile.am: Add new file.
* tests/testsuite.at: Include new file.",74,data/crawl/tar/hunk_16.cpp,,,data/crawl/tar/old_hunk_16.cpp,data/crawl/tar/new_hunk_16.cpp,18,36,"ERROR ((0, 0, _(""%s: file list already read""),
		quotearg_colon (filename)));","ERROR ((0, 0,
		_(""%s: file list requested from %s already read from %s""),
		quotearg_n (0, filename),
		reading_from, p->from_file));","[""updateVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[""quotearg_colon""], [""requested"", ""from"", ""%s"", ""from"", ""%s"", ""quotearg_n"", ""0"", ""reading_from"", ""p"", ""from_file""]]",[-2172096587585997011],20,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f0a1f78196f75678424712ac36f0a4a46e3e5658,21 Jan 2014,"Implement statistics display in checkpoint actions.

* NEWS: Update.
* configure.ac: Version 1.27.90
* gnulib.modules: Add fprintftime.
* doc/tar.texi: Document the ""totals"" action and new format specifiers
for echo and ttyout checkpoint actions.
* src/buffer.c (compute_duration): Return computed value.
(print_stats): Don't print trailing newline.  Return number of
characters output.
(format_total_stats): New function.
(print_total_stats): Rewrite via format_total_stats.
* src/checkpoint.c (checkpoint_opcode) <cop_totals>: New opcode.
(checkpoint_compile_action): Handle cop_totals.
(expand_checkpoint_string): Remove.
(format_checkpoint_string): New function to be used instead of
expand_checkpoint_string.  All callers updated.
* src/common.h (TF_READ,TF_WRITE)
(TF_DELETED): New constants.
(format_total_stats,print_total_stats): New protos.",383,data/crawl/tar/hunk_14.cpp,Feature,add display option,data/crawl/tar/old_hunk_14.cpp,data/crawl/tar/new_hunk_14.cpp,-1,106,,"fputs (opstr, fp);","[""addLog""]","[[], [""fputs"", ""opstr"", ""fp""]]",[4824257201013024592],19,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=f0a1f78196f75678424712ac36f0a4a46e3e5658,21 Jan 2014,"Implement statistics display in checkpoint actions.

* NEWS: Update.
* configure.ac: Version 1.27.90
* gnulib.modules: Add fprintftime.
* doc/tar.texi: Document the ""totals"" action and new format specifiers
for echo and ttyout checkpoint actions.
* src/buffer.c (compute_duration): Return computed value.
(print_stats): Don't print trailing newline.  Return number of
characters output.
(format_total_stats): New function.
(print_total_stats): Rewrite via format_total_stats.
* src/checkpoint.c (checkpoint_opcode) <cop_totals>: New opcode.
(checkpoint_compile_action): Handle cop_totals.
(expand_checkpoint_string): Remove.
(format_checkpoint_string): New function to be used instead of
expand_checkpoint_string.  All callers updated.
* src/common.h (TF_READ,TF_WRITE)
(TF_DELETED): New constants.
(format_total_stats,print_total_stats): New protos.",383,data/crawl/tar/hunk_14.cpp,Feature,add display option,data/crawl/tar/old_hunk_14.cpp,data/crawl/tar/new_hunk_14.cpp,-1,101,,"fputs (cps, fp);","[""addLog""]","[[], [""fputs"", ""cps"", ""fp""]]",[-4286597072622561812],18,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=eb7e2aa9334d80747c6f6c4f093716fd030f3f15,22 Jan 2014,"checkpoint actions: further improvements.

* NEWS: Update.
* doc/tar.texi: Update.
* src/buffer.c (print_stats): Avoid use of additional string buffer.
Allow for text to be NULL.
Call gettext if it is not.
(format_total_stats): Don't use gettext when calling print_stats.
* src/checkpoint.c (def_format): Change default format.
(format_checkpoint_string): Implement optional arguments for
T conversion.
(finish_checkpoint_actions): Rename to checkpoint_flush_actions,
make extern.  All uses changed.
* src/common.h (checkpoint_flush_actions): New proto.
* src/tar.c (main): Set error_hook",130,data/crawl/tar/hunk_13.cpp,Maintence,improve implementation,data/crawl/tar/old_hunk_13.cpp,data/crawl/tar/new_hunk_13.cpp,-1,13,,"ERROR ((0, 0, _(""cannot split string '%s': %s""),
			      arg, wordsplit_strerror (&ws)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""cannot"", ""split"", ""string"", ""%s"", ""%s"", ""arg"", ""wordsplit_strerror"", ""&ws""]]",[-5232243863090259730],17,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=a09e840507c16357ec11b17a02e103c3a26adebc,23 Jan 2014,"Make sure transformed file names retain trailing slash in listing.

* src/list.c (simple_print_header): Print trailing slash
if using the transformed name.
Use had_trailing_slash instead of analyzing last byte if temp_name",11,data/crawl/tar/hunk_12.cpp,Feature,add check for option,data/crawl/tar/old_hunk_12.cpp,data/crawl/tar/new_hunk_12.cpp,-1,3,,"fputs (quotearg (temp_name), stdlis);","[""addLog""]","[[], [""fputs"", ""quotearg"", ""temp_name"", ""stdlis""]]",[-11061513986626797399],16,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=93906c238d9309f95afeddfa9ac8d7ce92351e70,21 Feb 2014,"Support exclusion patterns from various VCS ignore lists.

* src/Makefile.am (tar_SOURCES): Add exclist.c
* src/common.h (EXCL_DEFAULT, EXCL_RECURSIVE)
(EXCL_NON_RECURSIVE): New flags.
(excfile_add, info_attach_exclist)
(info_cleanup_exclist,info_free_exclist)
(exclude_vcs_ignores): New prototypes.
* src/create.c (dump_dir0): Call info_attach_exclist.
* src/exclist.c: New file.
* src/incremen.c (scan_directory): Call info_attach_exclist.
* src/names.c (excluded_name): Moved to exclist.c. Change signature.
All uses updated.
* src/tar.c: New options: --exclude-ignore, --exclude-ignore-recursive
and --exclude-vcs-ignores.
(tar_stat_destroy): Free exclist.
* src/tar.h (tar_stat_info): New member exclude_list.

* NEWS: Document new exclusion options.
* doc/tar.texi: Likewise.
* doc/tar.1: Likewise.",564,data/crawl/tar/hunk_10.cpp,Feature,more option,data/crawl/tar/old_hunk_10.cpp,data/crawl/tar/new_hunk_10.cpp,-1,92,,"ERROR ((0, errno, _(""%s: fdopen failed""), file->name));","[""addLog""]","[[], [""ERROR"", ""0"", ""errno"", ""_"", ""%s"", ""fdopen"", ""failed"", ""file"", ""name""]]",[9597021014191561569],15,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b0902369e789c9aadf584799889a34637688d601,20 Mar 2014,"Fail if archive comes from a terminal.

Based on patch from Pavel Raiskup <praiskup@redhat.com>.

* gnulib.modules: Add new modules.
* src/buffer.c (_open_archive): Refuse to read archive from a tty.
* tests/Makefile.am (TESTSUITE_AT): Add iotty.at
(check_PROGRAMS): New program ttyemu
* tests/testsuite.at: Include iotty.at
* tests/iotty.at: New file.
* tests/ttyemu.c: New file.",527,data/crawl/tar/hunk_9.cpp,Feature,refuse handle files from terminal,data/crawl/tar/old_hunk_9.cpp,data/crawl/tar/new_hunk_9.cpp,-1,219,,"fputs (usage_text[i], stderr);","[""addLog""]","[[], [""fputs"", ""usage_text[i]"", ""stderr""]]",[-18028942149051289898],14,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=21f86195b7c48196e7912bbb2755e56af5ea62ff,25 Jul 2015,"Fix typos (preceeded etc.)

Copyright-paperwork-exempt: yes",22,data/crawl/tar/hunk_8.cpp,Maintence,typo in log message,data/crawl/tar/old_hunk_8.cpp,data/crawl/tar/new_hunk_8.cpp,2,2,"ERROR ((0, 0,
		      _(""Malformed dumpdir: 'T' not preceeded by 'R'"")));","ERROR ((0, 0,
		      _(""Malformed dumpdir: 'T' not preceded by 'R'"")));","[""updateContent""]","[[""preceeded""], [""preceded""]]",[10924325843164070456],13,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ae23a57d7003eee5cf323a29bf956c19aea3b63f,31 Aug 2015,"Improve option sanity checking

Any two conflicting options are reported only if they both occur in
the command line.  Otherwise, options defined in the command line
silently override those set in the TAR_OPTIONS environment variable.

* src/common.h (option_source): New enum.
(option_locus): New struct.
* src/names.c (name_elt): New member: line.
(name_add_file): Initialize line.
(read_name_from_file): Keep track of input line number for diagnostic
purposes.
(handle_option): Take a pointer to struct name_elt as 2nd parameter;
pass locus info to more_options().
* src/tar.c (tar_args): New member: loc.
(option_class): New enum.
(optloc_save,optloc_lookup)
(option_set_in_cl,optloc_eq): New functions.
(set_use_compress_program_option): Take into account option location.
(set_old_files_option): New function.
(parse_opt): Keep track of option locations.
(more_options): Improve error reporting.
(parse_default_options): New function.
(decode_options): Parse TAR_OPTION and command line separately.
Options from the latter silently override those from the former.

* lib/prepargs.c: Remove.
* lib/prepargs.h: Remove.
* lib/Makefile.am: Update.",421,data/crawl/tar/hunk_6.cpp,Bug,improve check for conflicting options,data/crawl/tar/old_hunk_6.cpp,data/crawl/tar/new_hunk_6.cpp,-1,8,,"error (0, 0, _(""error parsing %s""), args->loc->name);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""error"", ""parsing"", ""%s"", ""args"", ""loc"", ""name""]]",[16386678873080115180],12,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=ae23a57d7003eee5cf323a29bf956c19aea3b63f,31 Aug 2015,"Improve option sanity checking

Any two conflicting options are reported only if they both occur in
the command line.  Otherwise, options defined in the command line
silently override those set in the TAR_OPTIONS environment variable.

* src/common.h (option_source): New enum.
(option_locus): New struct.
* src/names.c (name_elt): New member: line.
(name_add_file): Initialize line.
(read_name_from_file): Keep track of input line number for diagnostic
purposes.
(handle_option): Take a pointer to struct name_elt as 2nd parameter;
pass locus info to more_options().
* src/tar.c (tar_args): New member: loc.
(option_class): New enum.
(optloc_save,optloc_lookup)
(option_set_in_cl,optloc_eq): New functions.
(set_use_compress_program_option): Take into account option location.
(set_old_files_option): New function.
(parse_opt): Keep track of option locations.
(more_options): Improve error reporting.
(parse_default_options): New function.
(decode_options): Parse TAR_OPTION and command line separately.
Options from the latter silently override those from the former.

* lib/prepargs.c: Remove.
* lib/prepargs.h: Remove.
* lib/Makefile.am: Update.",421,data/crawl/tar/hunk_6.cpp,Bug,improve check for conflicting options,data/crawl/tar/old_hunk_6.cpp,data/crawl/tar/new_hunk_6.cpp,-1,5,,"error (0, 0, _(""%s:%lu: location of the error""), args->loc->name,
	       (unsigned long) args->loc->line);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""%s"", ""%lu"", ""location"", ""of"", ""the"", ""error"", ""args"", ""loc"", ""name"", ""unsigned"", ""long"", ""args"", ""loc"", ""line""]]",[16996124706445213845],11,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1a615a41f5e1c84b8386d2b524af9126ebb810b1,2 Nov 2015,"New options: --owner-map and --group-map.

* NEWS: Update.
* doc/tar.1: Document --owner-map and --group-map
* doc/tar.texi: Likewise.

* src/map.c: New file.
* src/Makefile.am: Add map.c
* src/common.h (owner_map_read, owner_map_translate)
(group_map_read, group_map_translate): New protos.
* src/create.c (start_header): Use owner_map_translate
and group_map_translate to optionally translate user/group names/ids.
* src/tar.c: New options --owner-map and --group-map.

* tests/map.at: New file.
* tests/Makefile.am: Add map.at
* tests/testsuite.at: Include map.at.",566,data/crawl/tar/hunk_5.cpp,Feature,add new option,data/crawl/tar/old_hunk_5.cpp,data/crawl/tar/new_hunk_5.cpp,-1,160,,"error (0, 0, _(""%s:%u: can't obtain %s of %s""),
		     file, line, what, ws.ws_wordv[1]);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""%s"", ""%u"", ""can"", ""t"", ""obtain"", ""%s"", ""of"", ""%s"", ""file"", ""line"", ""what"", ""ws"", ""ws_wordv[1]""]]",[11256940603883653784],10,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1a615a41f5e1c84b8386d2b524af9126ebb810b1,2 Nov 2015,"New options: --owner-map and --group-map.

* NEWS: Update.
* doc/tar.1: Document --owner-map and --group-map
* doc/tar.texi: Likewise.

* src/map.c: New file.
* src/Makefile.am: Add map.c
* src/common.h (owner_map_read, owner_map_translate)
(group_map_read, group_map_translate): New protos.
* src/create.c (start_header): Use owner_map_translate
and group_map_translate to optionally translate user/group names/ids.
* src/tar.c: New options --owner-map and --group-map.

* tests/map.at: New file.
* tests/Makefile.am: Add map.at
* tests/testsuite.at: Include map.at.",566,data/crawl/tar/hunk_5.cpp,Feature,add new option,data/crawl/tar/old_hunk_5.cpp,data/crawl/tar/new_hunk_5.cpp,-1,127,,"error (0, 0, _(""%s:%u: can't obtain %s of %s""),
		     file, line, what, ws.ws_wordv[0]);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""%s"", ""%u"", ""can"", ""t"", ""obtain"", ""%s"", ""of"", ""%s"", ""file"", ""line"", ""what"", ""ws"", ""ws_wordv[0]""]]",[11256940603882653913],9,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1a615a41f5e1c84b8386d2b524af9126ebb810b1,2 Nov 2015,"New options: --owner-map and --group-map.

* NEWS: Update.
* doc/tar.1: Document --owner-map and --group-map
* doc/tar.texi: Likewise.

* src/map.c: New file.
* src/Makefile.am: Add map.c
* src/common.h (owner_map_read, owner_map_translate)
(group_map_read, group_map_translate): New protos.
* src/create.c (start_header): Use owner_map_translate
and group_map_translate to optionally translate user/group names/ids.
* src/tar.c: New options --owner-map and --group-map.

* tests/map.at: New file.
* tests/Makefile.am: Add map.at
* tests/testsuite.at: Include map.at.",566,data/crawl/tar/hunk_5.cpp,Feature,add new option,data/crawl/tar/old_hunk_5.cpp,data/crawl/tar/new_hunk_5.cpp,-1,109,,"error (0, 0, _(""%s:%u: malformed line""), file, line);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""%s"", ""%u"", ""malformed"", ""line"", ""file"", ""line""]]",[23198835395056817485],8,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1a615a41f5e1c84b8386d2b524af9126ebb810b1,2 Nov 2015,"New options: --owner-map and --group-map.

* NEWS: Update.
* doc/tar.1: Document --owner-map and --group-map
* doc/tar.texi: Likewise.

* src/map.c: New file.
* src/Makefile.am: Add map.c
* src/common.h (owner_map_read, owner_map_translate)
(group_map_read, group_map_translate): New protos.
* src/create.c (start_header): Use owner_map_translate
and group_map_translate to optionally translate user/group names/ids.
* src/tar.c: New options --owner-map and --group-map.

* tests/map.at: New file.
* tests/Makefile.am: Add map.at
* tests/testsuite.at: Include map.at.",566,data/crawl/tar/hunk_5.cpp,Feature,add new option,data/crawl/tar/old_hunk_5.cpp,data/crawl/tar/new_hunk_5.cpp,-1,64,,"error (0, 0, _(""%s:%u: %s out of range: %s""), file, line, what, arg);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""%s"", ""%u"", ""%s"", ""out"", ""of"", ""range"", ""%s"", ""file"", ""line"", ""what"", ""arg""]]",[12818410737431096012],7,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=1a615a41f5e1c84b8386d2b524af9126ebb810b1,2 Nov 2015,"New options: --owner-map and --group-map.

* NEWS: Update.
* doc/tar.1: Document --owner-map and --group-map
* doc/tar.texi: Likewise.

* src/map.c: New file.
* src/Makefile.am: Add map.c
* src/common.h (owner_map_read, owner_map_translate)
(group_map_read, group_map_translate): New protos.
* src/create.c (start_header): Use owner_map_translate
and group_map_translate to optionally translate user/group names/ids.
* src/tar.c: New options --owner-map and --group-map.

* tests/map.at: New file.
* tests/Makefile.am: Add map.at
* tests/testsuite.at: Include map.at.",566,data/crawl/tar/hunk_5.cpp,Feature,add new option,data/crawl/tar/old_hunk_5.cpp,data/crawl/tar/new_hunk_5.cpp,-1,59,,"error (0, 0, _(""%s:%u: invalid %s: %s""),  file, line, what, arg);","[""addLog""]","[[], [""error"", ""0"", ""0"", ""_"", ""%s"", ""%u"", ""invalid"", ""%s"", ""%s"", ""file"", ""line"", ""what"", ""arg""]]",[3420164685418062336],6,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=3010818f369be1555b6b2d1532682e15a11c12cc,6 Apr 2016,"Remove iotty test

The auxiliary utility ttyemu proved to be unreliable.  Given existing
differences between pty implementations and termios ioctls on various
platforms, writing it in a portable way requires effort disproportional
to its actual purpose.

* configure.ac: Remove check for grantpt
* gnulib.modules: Remove posix_openpt, ptsname, and unlockpt
* tests/Makefile.am (TESTSUITE_AT): Remove iotty.at
(check_PROGRAMS): Remove ttyemu.
* tests/testsuite.at: Remove iotty.at
* tests/iotty.at: Remove.
* tests/ttyemu.c: Remove.",530,data/crawl/tar/hunk_2.cpp,Feature,remove module because of its inreliability,data/crawl/tar/old_hunk_2.cpp,data/crawl/tar/new_hunk_2.cpp,219,-1,"fputs (usage_text[i], stderr);",,"[""removeLog""]","[[""fputs"", ""usage_text[i]"", ""stderr""], []]",[18028942149051289898],5,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a33077a7b7ad7d32815a21dee54eba63b38a81c,27 May 2016,"Report positional options that were used but had no effect during
 archive creation

* src/names.c (file_selection_option)
(file_selection_option_name): New functions.
(unconsumed_option_push, unconsumed_option_free)
(unconsumed_option_report): New functions.
(name_list_advance): Maintain a list
of eventually unconsumed options during archive creation.
Report unconsumed options, if any.

* tests/positional01.at: New test case.
* tests/positional02.at: New test case.
* tests/positional03.at: New test case.
* tests/Makefile.am: Add new test cases.
* tests/testsuite.at: Likewise.

* NEWS: Document the changes.
* configure.ac: Version 1.29.90
* doc/tar.texi: Document the changes.",315,data/crawl/tar/hunk_1.cpp,Feature,a lot of change for report uneffected parameter,data/crawl/tar/old_hunk_1.cpp,data/crawl/tar/new_hunk_1.cpp,-1,68,,"ERROR ((0, 0, _(""--%s has no effect""),
			file_selection_option_name (elt->v.opt.option)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""has"", ""no"", ""effect"", ""file_selection_option_name"", ""elt"", ""v"", ""opt"", ""option""]]",[-5623016648890904025],4,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a33077a7b7ad7d32815a21dee54eba63b38a81c,27 May 2016,"Report positional options that were used but had no effect during
 archive creation

* src/names.c (file_selection_option)
(file_selection_option_name): New functions.
(unconsumed_option_push, unconsumed_option_free)
(unconsumed_option_report): New functions.
(name_list_advance): Maintain a list
of eventually unconsumed options during archive creation.
Report unconsumed options, if any.

* tests/positional01.at: New test case.
* tests/positional02.at: New test case.
* tests/positional03.at: New test case.
* tests/Makefile.am: Add new test cases.
* tests/testsuite.at: Likewise.

* NEWS: Document the changes.
* configure.ac: Version 1.29.90
* doc/tar.texi: Document the changes.",315,data/crawl/tar/hunk_1.cpp,Feature,a lot of change for report uneffected parameter,data/crawl/tar/old_hunk_1.cpp,data/crawl/tar/new_hunk_1.cpp,-1,64,,"ERROR ((0, 0, _(""--%s %s has no effect""),
			file_selection_option_name (elt->v.opt.option),
			quote (elt->v.opt.arg)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""%s"", ""has"", ""no"", ""effect"", ""file_selection_option_name"", ""elt"", ""v"", ""opt"", ""option"", ""quote"", ""elt"", ""v"", ""opt"", ""arg""]]",[-3535122918285159718],3,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a33077a7b7ad7d32815a21dee54eba63b38a81c,27 May 2016,"Report positional options that were used but had no effect during
 archive creation

* src/names.c (file_selection_option)
(file_selection_option_name): New functions.
(unconsumed_option_push, unconsumed_option_free)
(unconsumed_option_report): New functions.
(name_list_advance): Maintain a list
of eventually unconsumed options during archive creation.
Report unconsumed options, if any.

* tests/positional01.at: New test case.
* tests/positional02.at: New test case.
* tests/positional03.at: New test case.
* tests/Makefile.am: Add new test cases.
* tests/testsuite.at: Likewise.

* NEWS: Document the changes.
* configure.ac: Version 1.29.90
* doc/tar.texi: Document the changes.",315,data/crawl/tar/hunk_1.cpp,Feature,a lot of change for report uneffected parameter,data/crawl/tar/old_hunk_1.cpp,data/crawl/tar/new_hunk_1.cpp,-1,59,,"ERROR ((0, 0, _(""-C %s has no effect""), quote (elt->v.name)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""C"", ""%s"", ""has"", ""no"", ""effect"", ""quote"", ""elt"", ""v"", ""name""]]",[-13485451799302003319],2,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=9a33077a7b7ad7d32815a21dee54eba63b38a81c,27 May 2016,"Report positional options that were used but had no effect during
 archive creation

* src/names.c (file_selection_option)
(file_selection_option_name): New functions.
(unconsumed_option_push, unconsumed_option_free)
(unconsumed_option_report): New functions.
(name_list_advance): Maintain a list
of eventually unconsumed options during archive creation.
Report unconsumed options, if any.

* tests/positional01.at: New test case.
* tests/positional02.at: New test case.
* tests/positional03.at: New test case.
* tests/Makefile.am: Add new test cases.
* tests/testsuite.at: Likewise.

* NEWS: Document the changes.
* configure.ac: Version 1.29.90
* doc/tar.texi: Document the changes.",315,data/crawl/tar/hunk_1.cpp,Feature,a lot of change for report uneffected parameter,data/crawl/tar/old_hunk_1.cpp,data/crawl/tar/new_hunk_1.cpp,-1,48,,"ERROR ((0, 0, _(""The following options were used after any non-optional arguments in archive create or update mode.  These options are positional and affect only arguments that follow them.  Please, rearrange them properly."")));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""The"", ""following"", ""options"", ""were"", ""used"", ""after"", ""any"", ""non"", ""optional"", ""arguments"", ""in"", ""archive"", ""create"", ""or"", ""update"", ""mode"", ""These"", ""options"", ""are"", ""positional"", ""and"", ""affect"", ""only"", ""arguments"", ""that"", ""follow"", ""them"", ""Please"", ""rearrange"", ""them"", ""properly""]]",[23726000604326319701],1,0
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=7340f67b9860ea0531c1450e5aa261c50f67165d,29 Oct 2016,"When extracting, skip "".."" members

* NEWS: Document this.
* src/extract.c (extract_archive): Skip members whose names
contain "".."".",16,data/crawl/tar/hunk_0.cpp,Feature,add function for consistence with document,data/crawl/tar/old_hunk_0.cpp,data/crawl/tar/new_hunk_0.cpp,-1,12,,"ERROR ((0, 0, _(""%s: Member name contains '..'""),
	    quotearg_colon (current_stat_info.orig_file_name)));","[""addLog""]","[[], [""ERROR"", ""0"", ""0"", ""_"", ""%s"", ""Member"", ""name"", ""contains"", ""quotearg_colon"", ""current_stat_info"", ""orig_file_name""]]",[14270485840126446193],0,0
