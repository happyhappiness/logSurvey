@@ -871,6 +871,7 @@ AC_ARG_ENABLE(ecap,
 )
 
 dnl Perform configuration consistency checks for eCAP
+ECAPLIB=""
 if test $use_ecap = yes;
 then
     dnl eCAP support requires loadable modules, which are enabled by default
@@ -881,7 +882,7 @@ then
 
     dnl eCAP support requires libecap
     AC_CHECK_LIB([ecap], [main],
-        [ECAP_LIBS="-lecap"],
+        [ECAPLIB="-lecap"],
         [AC_MSG_FAILURE([eCAP support requires libecap library, but no usable library was found])]
     )
 fi
@@ -896,7 +897,10 @@ else
     AC_DEFINE(USE_ECAP,0,[Disable eCAP support])
     ECAP_LIBS=""
 fi
+dnl convenience library
 AC_SUBST(ECAP_LIBS)
+dnl -lecap if needed
+AC_SUBST(ECAPLIB)
 
 
 dnl enable adaptation if requested by specific adaptation mechanisms
@@ -149,14 +149,14 @@ noinst_LTLIBRARIES = libsquid.la
 
 # libraries used by many targets
 COMMON_LIBS = \
+	base/libbase.la \
 	libsquid.la \
 	auth/libacls.la \
 	ident/libident.la \
 	acl/libacls.la \
 	acl/libstate.la \
 	auth/libauth.la \
 	acl/libapi.la \
-	base/libbase.la \
 	ip/libip.la \
 	fs/libfs.la
 
@@ -569,11 +569,18 @@ recv_announce_SOURCES = recv-announce.cc SquidNew.cc
 ## tools.cc wants ip/libip.la
 ## client_side.cc wants ip/libip.la
 ## mem.cc wants ClientInfo.h
+## libbase.la wants cbdata.*
+## libbase.la wants MemBuf.*
 ufsdump_SOURCES = \
 	ClientInfo.h \
+	cbdata.h \
+	cbdata.cc \
 	debug.cc \
 	int.cc \
 	mem.cc \
+	MemBuf.cc \
+	MemBuf.cci \
+	MemBuf.h \
 	store_key_md5.cc \
 	StoreMeta.cc \
 	StoreMetaMD5.cc \
@@ -590,7 +597,8 @@ ufsdump_SOURCES = \
 	HttpRequestMethod.cc \
 	RemovalPolicy.cc \
 	squid.h \
-	$(WIN32_SOURCE)
+	$(WIN32_SOURCE) \
+	tests/stub_fd.cc
 ufsdump_LDADD = \
 	$(COMMON_LIBS) \
 	@XTRA_OBJS@ \
@@ -39,6 +39,6 @@ libadaptation_la_SOURCES = \
 	ServiceGroups.h
 
 # add libraries for specific adaptation schemes
-libadaptation_la_LIBADD = @ECAP_LIBS@ @ICAP_LIBS@
+libadaptation_la_LIBADD = @ECAP_LIBS@ @ECAPLIB@ @ICAP_LIBS@
 
 libadaptation_la_DEPENDENCIES = @ECAP_LIBS@ @ICAP_LIBS@
@@ -87,9 +87,15 @@ void
 death(int sig)
 {
     std::cout << "Fatal: Signal " <<  sig;
-    exit (1);
+    exit(1);
 }
 
+void
+fatal(const char *message)
+{
+    fprintf(stderr, "FATAL: %s\n", message);
+    exit(1);
+}
 
 /* end stub functions */
 