@@ -1202,9 +1202,21 @@ static enum path_treatment treat_one_path(struct dir_struct *dir,
 	 */
 	if ((dir->flags & DIR_COLLECT_KILLED_ONLY) &&
 	    (dtype == DT_DIR) &&
-	    !has_path_in_index &&
-	    (directory_exists_in_index(path->buf, path->len) == index_nonexistent))
-		return path_none;
+	    !has_path_in_index) {
+		/*
+		 * NEEDSWORK: directory_exists_in_index_icase()
+		 * assumes that one byte past the given path is
+		 * readable and has '/', which needs to be fixed, but
+		 * until then, work it around in the caller.
+		 */
+		strbuf_addch(path, '/');
+		if (directory_exists_in_index(path->buf, path->len - 1) ==
+		    index_nonexistent) {
+			strbuf_setlen(path, path->len - 1);
+			return path_none;
+		}
+		strbuf_setlen(path, path->len - 1);
+	}
 
 	exclude = is_excluded(dir, path->buf, &dtype);
 
@@ -78,9 +78,6 @@ date >path7
 touch path10
 >pathx/ju/nk
 
-test_expect_success \
-    'git ls-files -k to show killed files.' \
-    'git ls-files -k >.output'
 cat >.expected <<EOF
 path0/file0
 path1/file1
@@ -89,9 +86,15 @@ path3
 pathx/ju/nk
 EOF
 
-test_expect_success \
-    'validate git ls-files -k output.' \
-    'test_cmp .expected .output'
+test_expect_success 'git ls-files -k to show killed files (w/o icase)' '
+    git ls-files -k >.output &&
+    test_cmp .expected .output
+'
+
+test_expect_success 'git ls-files -k to show killed files (w/ icase)' '
+    git -c core.ignorecase=true ls-files -k >.output &&
+    test_cmp .expected .output
+'
 
 test_expect_success \
     'git ls-files -m to show modified files.' \