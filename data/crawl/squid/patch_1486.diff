@@ -1,5 +1,5 @@
 /*
- * $Id: MemBuf.cc,v 1.21 1999/01/11 21:55:37 wessels Exp $
+ * $Id: MemBuf.cc,v 1.22 1999/01/19 02:24:19 wessels Exp $
  *
  * DEBUG: section 59    auto-growing Memory Buffer with printf
  * AUTHOR: Alex Rousskov
@@ -104,11 +104,7 @@
 
 /* default values for buffer sizes, used by memBufDefInit */
 #define MEM_BUF_INIT_SIZE   (2*1024)
-#if CLIENT_SOCK_SZ < 16384
-#define MEM_BUF_MAX_SIZE   (32*1024)
-#else
-#define MEM_BUF_MAX_SIZE   (CLIENT_SOCK_SZ<<1)
-#endif
+#define MEM_BUF_MAX_SIZE    (2*1000*1024*1024)
 
 
 /* local routines */
@@ -173,13 +169,13 @@ memBufReset(MemBuf * mb)
     }
 }
 
-/* unfirtunate hack to test if the buffer has been Init()ialized */
+/* unfortunate hack to test if the buffer has been Init()ialized */
 int
 memBufIsNull(MemBuf * mb)
 {
     assert(mb);
     if (!mb->buf && !mb->max_capacity && !mb->capacity && !mb->size)
-	return 1;		/* null, not initialized */
+	return 1;		/* is null (not initialized) */
     assert(mb->buf && mb->max_capacity && mb->capacity);	/* paranoid */
     return 0;
 }
@@ -1,6 +1,6 @@
 
 /*
- * $Id: Packer.cc,v 1.10 1999/01/11 21:55:37 wessels Exp $
+ * $Id: Packer.cc,v 1.11 1999/01/19 02:24:20 wessels Exp $
  *
  * DEBUG: section 60    Packer: A uniform interface to store-like modules
  * AUTHOR: Alex Rousskov
@@ -108,7 +108,7 @@ packerToStoreInit(Packer * p, StoreEntry * e)
 {
     assert(p && e);
     p->append = (append_f) store_append;
-    p->vprintf = (vprintf_f) storeAppendVPrintf;
+    p->vprintf = (vprintf_f) store_vprintf;
     p->real_handler = e;
 }
 
@@ -1,6 +1,6 @@
 
 /*
- * $Id: StatHist.cc,v 1.22 1999/01/13 21:55:23 wessels Exp $
+ * $Id: StatHist.cc,v 1.23 1999/01/19 02:24:20 wessels Exp $
  *
  * DEBUG: section 62    Generic Histogram
  * AUTHOR: Duane Wessels
@@ -253,7 +253,7 @@ Log(double x)
     return log(x + 1.0);
 }
 
-#if !defined(_SQUID_HPUX_) || !defined(__GNUC__) 
+#if !defined(_SQUID_HPUX_) || !defined(__GNUC__)
 static
 #endif
 double
@@ -270,7 +270,7 @@ statHistLogInit(StatHist * H, int capacity, double min, double max)
 
 /* linear histogram for enums */
 /* we want to be have [-1,last_enum+1] range to track out of range enums */
-#if !defined(_SQUID_HPUX_) || !defined(__GNUC__) 
+#if !defined(_SQUID_HPUX_) || !defined(__GNUC__)
 static
 #endif
 double
@@ -1,6 +1,6 @@
 
 /*
- * $Id: cache_manager.cc,v 1.19 1999/01/13 23:24:09 wessels Exp $
+ * $Id: cache_manager.cc,v 1.20 1999/01/19 02:24:21 wessels Exp $
  *
  * DEBUG: section 16    Cache Manager Objects
  * AUTHOR: Duane Wessels
@@ -112,10 +112,10 @@ cachemgrParseUrl(const char *url)
     if (t < 2) {
 	xstrncpy(request, "menu", MAX_URL);
 #ifdef _SQUID_OS2_
-    /*
-     * emx's sscanf insists of returning 2 because it sets request
-     * to null
-     */
+	/*
+	 * emx's sscanf insists of returning 2 because it sets request
+	 * to null
+	 */
     } else if (request[0] == '\0') {
 	xstrncpy(request, "menu", MAX_URL);
 #endif
@@ -1,6 +1,6 @@
 
 /*
- * $Id: cachemgr.cc,v 1.83 1998/09/24 20:35:11 rousskov Exp $
+ * $Id: cachemgr.cc,v 1.84 1999/01/19 02:24:22 wessels Exp $
  *
  * DEBUG: section 0     CGI Cache Manager
  * AUTHOR: Duane Wessels
@@ -154,7 +154,6 @@ typedef struct {
  */
 static const time_t passwd_ttl = 60 * 60 * 3;	/* in sec */
 static const char *script_name = "/cgi-bin/cachemgr.cgi";
-static const char *const w_space = " \t\n\r";
 static const char *progname = NULL;
 static time_t now;
 static struct in_addr no_addr;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.431 1999/01/18 23:15:42 wessels Exp $
+ * $Id: client_side.cc,v 1.432 1999/01/19 02:24:23 wessels Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -348,8 +348,10 @@ clientHandleIMSReply(void *data, char *buf, ssize_t size)
     int recopy = 1;
     const http_status status = mem->reply->sline.status;
     debug(33, 3) ("clientHandleIMSReply: %s, %d bytes\n", url, (int) size);
-    if (size < 0 && !EBIT_TEST(entry->flags, ENTRY_ABORTED))
+    if (size < 0 && !EBIT_TEST(entry->flags, ENTRY_ABORTED)) {
+	memFree(buf, MEM_CLIENT_SOCK_BUF);
 	return;
+    }
     if (EBIT_TEST(entry->flags, ENTRY_ABORTED)) {
 	debug(33, 3) ("clientHandleIMSReply: ABORTED '%s'\n", url);
 	/* We have an existing entry, but failed to validate it */
@@ -1310,7 +1312,7 @@ clientPackRange(clientHttpRequest * http, HttpHdrRangeIter * i, const char **buf
 	packerClean(&p);
 	httpHeaderClean(&hdr);
 	/* append <crlf> (we packed a header, not a reply */
-	memBufPrintf(mb, "\r\n");
+	memBufPrintf(mb, crlf);
     }
     /* append */
     debug(33, 3) ("clientPackRange: appending %d bytes\n", copy_sz);
@@ -1502,8 +1504,7 @@ clientSendMoreData(void *data, char *buf, ssize_t size)
 	httpReplyDestroy(rep);
 	rep = NULL;
     } else {
-	/* leave space for growth in case we do ranges */
-	memBufInit(&mb, CLIENT_SOCK_SZ, 2 * CLIENT_SOCK_SZ);
+	memBufDefInit(&mb);
     }
     /* append body if any */
     if (http->request->range) {
@@ -1,6 +1,6 @@
 
 /*
- * $Id: fd.cc,v 1.31 1999/01/18 22:23:34 wessels Exp $
+ * $Id: fd.cc,v 1.32 1999/01/19 02:24:24 wessels Exp $
  *
  * DEBUG: section 51    Filedescriptor Functions
  * AUTHOR: Duane Wessels
@@ -196,11 +196,11 @@ fdAdjustReserved(void)
 void
 fdTouchFL(int fd, const char *file, int line)
 {
-	fde *F;
-	if (fd < 0)
-		return;
-	F = &fd_table[fd];
-	assert(F->flags.open);
-	F->last.file = file;
-	F->last.line = line;
+    fde *F;
+    if (fd < 0)
+	return;
+    F = &fd_table[fd];
+    assert(F->flags.open);
+    F->last.file = file;
+    F->last.line = line;
 }
@@ -1,6 +1,6 @@
 
 /*
- * $Id: forward.cc,v 1.46 1999/01/15 06:11:42 wessels Exp $
+ * $Id: forward.cc,v 1.47 1999/01/19 02:24:24 wessels Exp $
  *
  * DEBUG: section 17    Request Forwarding
  * AUTHOR: Duane Wessels
@@ -451,7 +451,7 @@ fwdCheckDeferRead(int fdnotused, void *data)
 }
 
 void
-fwdFail(FwdState * fwdState, ErrorState *errorState)
+fwdFail(FwdState * fwdState, ErrorState * errorState)
 {
     assert(EBIT_TEST(fwdState->entry->flags, ENTRY_FWD_HDR_WAIT));
     debug(17, 3) ("fwdFail: %s \"%s\"\n\t%s\n",
@@ -1,6 +1,6 @@
 
 /*
- * $Id: ftp.cc,v 1.266 1999/01/18 22:23:35 wessels Exp $
+ * $Id: ftp.cc,v 1.267 1999/01/19 02:24:25 wessels Exp $
  *
  * DEBUG: section 9     File Transfer Protocol (FTP)
  * AUTHOR: Harvest Derived
@@ -837,8 +837,8 @@ ftpDataRead(int fd, void *data)
 #endif
     assert(fd == ftpState->data.fd);
     if (EBIT_TEST(entry->flags, ENTRY_ABORTED)) {
-        comm_close(fd);
-        return;
+	comm_close(fd);
+	return;
     }
     errno = 0;
     read_sz = ftpState->data.size - ftpState->data.offset;
@@ -1,7 +1,7 @@
 
 
 /*
- * $Id: gopher.cc,v 1.146 1999/01/18 22:23:36 wessels Exp $
+ * $Id: gopher.cc,v 1.147 1999/01/19 02:24:26 wessels Exp $
  *
  * DEBUG: section 10    Gopher
  * AUTHOR: Harvest Derived
@@ -601,8 +601,8 @@ gopherReadReply(int fd, void *data)
     delay_id delay_id = delayMostBytesAllowed(entry->mem_obj);
 #endif
     if (EBIT_TEST(entry->flags, ENTRY_ABORTED)) {
-        comm_close(fd);
-        return;
+	comm_close(fd);
+	return;
     }
     errno = 0;
     buf = memAllocate(MEM_4K_BUF);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: http.cc,v 1.341 1999/01/18 22:23:37 wessels Exp $
+ * $Id: http.cc,v 1.342 1999/01/19 02:24:27 wessels Exp $
  *
  * DEBUG: section 11    Hypertext Transfer Protocol (HTTP)
  * AUTHOR: Harvest Derived
@@ -767,7 +767,7 @@ httpBuildRequestPrefix(request_t * request,
 	packerClean(&p);
     }
     /* append header terminator */
-    memBufAppend(mb, "\r\n", 2);
+    memBufAppend(mb, crlf, 2);
     return mb->size - offset;
 }
 /* This will be called when connect completes. Write request. */
@@ -1,6 +1,6 @@
 
 /*
- * $Id: main.cc,v 1.285 1999/01/16 00:03:39 glenn Exp $
+ * $Id: main.cc,v 1.286 1999/01/19 02:24:28 wessels Exp $
  *
  * DEBUG: section 1     Startup and Main Loop
  * AUTHOR: Harvest Derived
@@ -340,7 +340,7 @@ mainReconfigure(void)
 	    debug(1, 1) ("ICP port disabled in httpd_accelerator mode\n");
     }
     storeDirOpenSwapLogs();
-    writePidFile();         /* write PID file */
+    writePidFile();		/* write PID file */
     debug(1, 1) ("Ready to serve requests.\n");
     reconfiguring = 0;
 }
@@ -1,6 +1,6 @@
 
 /*
- * $Id: protos.h,v 1.304 1999/01/18 22:23:38 wessels Exp $
+ * $Id: protos.h,v 1.305 1999/01/19 02:24:29 wessels Exp $
  *
  *
  * SQUID Internet Object Cache  http://squid.nlanr.net/Squid/
@@ -834,6 +834,7 @@ extern void storeKeyFree(const cache_key *);
 extern const cache_key *storeKeyScan(const char *);
 extern const char *storeKeyText(const cache_key *);
 extern const cache_key *storeKeyPublic(const char *, const method_t);
+extern const cache_key *storeKeyPublicOld(const char *, const method_t);
 extern const cache_key *storeKeyPrivate(const char *, method_t, int);
 extern int storeKeyHashBuckets(int);
 extern int storeKeyNull(const cache_key *);
@@ -1,5 +1,5 @@
 /*
- * $Id: snmp_core.cc,v 1.28 1999/01/19 01:13:47 wessels Exp $
+ * $Id: snmp_core.cc,v 1.29 1999/01/19 02:24:30 wessels Exp $
  *
  * DEBUG: section 49    SNMP support
  * AUTHOR: Glenn Chisholm
@@ -217,64 +217,64 @@ snmpInit(void)
 						LEN_SQ_PRF + 2, NULL, 15,
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 1),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 1, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 1, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 2),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 2, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 2, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 3),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 3, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 3, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 4),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 4, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 4, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 5),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 5, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 5, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 6),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 6, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 6, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 7),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 7, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 7, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 8),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 8, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 8, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 9),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 9, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 9, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 10),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 10, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 10, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 11),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 11, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 11, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 12),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 12, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 12, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 13),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 13, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 13, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 14),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 14, 0),
-							    LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 14, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0)),
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 1, 15),
 						    LEN_SQ_PRF + 3, snmp_prfProtoFn, 1,
-							snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 15, 0),
-                                                            LEN_SQ_PRF + 4, snmp_prfProtoFn, 0))),
+						    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 4, SQ_PRF, 2, 1, 15, 0),
+							LEN_SQ_PRF + 4, snmp_prfProtoFn, 0))),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 2, SQ_PRF, 2, 2),
 						LEN_SQ_PRF + 2, NULL, 1,
 						snmpAddNode(snmpCreateOid(LEN_SQ_PRF + 3, SQ_PRF, 2, 2, 1),
@@ -365,80 +365,80 @@ snmpInit(void)
 					    LEN_SQ_NET + 1, NULL, 8,
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 1, 1),
 						LEN_SQ_NET + 2, snmp_netIpFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 1, 0),
-							LEN_SQ_NET + 3, snmp_netIpFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 1, 0),
+						    LEN_SQ_NET + 3, snmp_netIpFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 1, 2),
 						LEN_SQ_NET + 2, snmp_netIpFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 2, 0),
-							LEN_SQ_NET + 3, snmp_netIpFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 2, 0),
+						    LEN_SQ_NET + 3, snmp_netIpFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 1, 3),
 						LEN_SQ_NET + 2, snmp_netIpFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 3, 0),
-							LEN_SQ_NET + 3, snmp_netIpFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 3, 0),
+						    LEN_SQ_NET + 3, snmp_netIpFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 1, 4),
 						LEN_SQ_NET + 2, snmp_netIpFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 4, 0),
-							LEN_SQ_NET + 3, snmp_netIpFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 4, 0),
+						    LEN_SQ_NET + 3, snmp_netIpFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 1, 5),
 						LEN_SQ_NET + 2, snmp_netIpFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 5, 0),
-							LEN_SQ_NET + 3, snmp_netIpFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 5, 0),
+						    LEN_SQ_NET + 3, snmp_netIpFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 1, 6),
 						LEN_SQ_NET + 2, snmp_netIpFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 6, 0),
-							LEN_SQ_NET + 3, snmp_netIpFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 6, 0),
+						    LEN_SQ_NET + 3, snmp_netIpFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 1, 7),
 						LEN_SQ_NET + 2, snmp_netIpFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 7, 0),
-							LEN_SQ_NET + 3, snmp_netIpFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 7, 0),
+						    LEN_SQ_NET + 3, snmp_netIpFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 1, 8),
 						LEN_SQ_NET + 2, snmp_netIpFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 8, 0),
-							LEN_SQ_NET + 3, snmp_netIpFn, 0))),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 1, 8, 0),
+						    LEN_SQ_NET + 3, snmp_netIpFn, 0))),
 					snmpAddNode(snmpCreateOid(LEN_SQ_NET + 1, SQ_NET, 2),
 					    LEN_SQ_NET + 1, NULL, 7,
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 2, 1),
 						LEN_SQ_NET + 2, snmp_netFqdnFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 1, 0),
-							LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 1, 0),
+						    LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 2, 2),
 						LEN_SQ_NET + 2, snmp_netFqdnFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 2, 0),
-							LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 2, 0),
+						    LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 2, 3),
 						LEN_SQ_NET + 2, snmp_netFqdnFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 3, 0),
-							LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 3, 0),
+						    LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 2, 4),
 						LEN_SQ_NET + 2, snmp_netFqdnFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 4, 0),
-							LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 4, 0),
+						    LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 2, 5),
 						LEN_SQ_NET + 2, snmp_netFqdnFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 5, 0),
-							LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 5, 0),
+						    LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 2, 6),
 						LEN_SQ_NET + 2, snmp_netFqdnFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 6, 0),
-							LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 6, 0),
+						    LEN_SQ_NET + 3, snmp_netFqdnFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 2, 7),
 						LEN_SQ_NET + 2, snmp_netFqdnFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 7, 0),
-							LEN_SQ_NET + 3, snmp_netFqdnFn, 0))),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 2, 7, 0),
+						    LEN_SQ_NET + 3, snmp_netFqdnFn, 0))),
 					snmpAddNode(snmpCreateOid(LEN_SQ_NET + 1, SQ_NET, 3),
 					    LEN_SQ_NET + 1, NULL, 3,
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 3, 1),
 						LEN_SQ_NET + 2, snmp_netDnsFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 3, 1, 0),
-							LEN_SQ_NET + 3, snmp_netDnsFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 3, 1, 0),
+						    LEN_SQ_NET + 3, snmp_netDnsFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 3, 2),
 						LEN_SQ_NET + 2, snmp_netDnsFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 3, 2, 0),
-							LEN_SQ_NET + 3, snmp_netDnsFn, 0)),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 3, 2, 0),
+						    LEN_SQ_NET + 3, snmp_netDnsFn, 0)),
 					    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 2, SQ_NET, 3, 3),
 						LEN_SQ_NET + 2, snmp_netDnsFn, 1,
-						    snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 3, 3, 0),
-							LEN_SQ_NET + 3, snmp_netDnsFn, 0)))),
+						snmpAddNode(snmpCreateOid(LEN_SQ_NET + 3, SQ_NET, 3, 3, 0),
+						    LEN_SQ_NET + 3, snmp_netDnsFn, 0)))),
 				    snmpAddNode(snmpCreateOid(LEN_SQ_MESH, SQ_MESH),
 					LEN_SQ_MESH, NULL, 2,
 					snmpAddNode(snmpCreateOid(LEN_SQ_MESH + 1, SQ_MESH, 1),
@@ -872,8 +872,8 @@ snmpTreeNext(oid * Current, snint CurrentLen, oid ** Next, snint * NextLen)
 	    mibTreeEntry = mibTreeEntry->leaves[0];
 	}
 
-	if((mibTreeEntry) && (mibTreeEntry->children == 1))
-		mibTreeEntry = mibTreeEntry->leaves[0];
+	if ((mibTreeEntry) && (mibTreeEntry->children == 1))
+	    mibTreeEntry = mibTreeEntry->leaves[0];
     }
     if (mibTreeEntry) {
 	*Next = snmpOidDup(mibTreeEntry->name, mibTreeEntry->len);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: stat.cc,v 1.308 1999/01/18 22:23:40 wessels Exp $
+ * $Id: stat.cc,v 1.309 1999/01/19 02:24:31 wessels Exp $
  *
  * DEBUG: section 18    Cache Manager Statistics
  * AUTHOR: Harvest Derived
@@ -285,6 +285,14 @@ statStoreEntry(StoreEntry * s, StoreEntry * e)
 		(int) sc->copy_size);
 	    storeAppendPrintf(s, "\t\tswapin_fd: %d\n",
 		(int) sc->swapin_fd);
+	    storeAppendPrintf(s, "\t\tflags:");
+	    if (sc->flags.disk_io_pending)
+		storeAppendPrintf(s, " disk_io_pending");
+	    if (sc->flags.store_copying)
+		storeAppendPrintf(s, " store_copying");
+	    if (sc->flags.copy_event_pending)
+		storeAppendPrintf(s, " copy_event_pending");
+	    storeAppendPrintf(s, "\n");
 	}
     }
     storeAppendPrintf(s, "\n");
@@ -1,6 +1,6 @@
 
 /*
- * $Id: store.cc,v 1.483 1999/01/18 22:23:42 wessels Exp $
+ * $Id: store.cc,v 1.484 1999/01/19 02:24:33 wessels Exp $
  *
  * DEBUG: section 20    Storage Manager
  * AUTHOR: Harvest Derived
@@ -280,7 +280,10 @@ storeGet(const cache_key * key)
 StoreEntry *
 storeGetPublic(const char *uri, const method_t method)
 {
-    return storeGet(storeKeyPublic(uri, method));
+    StoreEntry *e = storeGet(storeKeyPublic(uri, method));
+    if (e == NULL && squid_curtime < 922500000)
+	e = storeGet(storeKeyPublicOld(uri, method));
+    return e;
 }
 
 static int
@@ -847,8 +850,12 @@ storeEntryLocked(const StoreEntry * e)
 	return 1;
     if (e->store_status == STORE_PENDING)
 	return 1;
+    /*
+     * SPECIAL, PUBLIC entries should be "locked"
+     */
     if (EBIT_TEST(e->flags, ENTRY_SPECIAL))
-	return 1;
+	if (!EBIT_TEST(e->flags, KEY_PRIVATE))
+	    return 1;
     return 0;
 }
 
@@ -1,6 +1,6 @@
 
 /*
- * $Id: store_key_md5.cc,v 1.19 1998/12/05 00:54:45 wessels Exp $
+ * $Id: store_key_md5.cc,v 1.20 1999/01/19 02:24:33 wessels Exp $
  *
  * DEBUG: section 20    Storage Manager MD5 Cache Keys
  * AUTHOR: Duane Wessels
@@ -48,7 +48,7 @@ storeKeyText(const unsigned char *key)
     return mb.buf;
 }
 
-const unsigned char *
+const cache_key *
 storeKeyScan(const char *buf)
 {
     static unsigned char digest[MD5_DIGEST_CHARS];
@@ -107,8 +107,11 @@ storeKeyPrivate(const char *url, method_t method, int id)
     return digest;
 }
 
+/*
+ * Compatibility transition period.  Remove this after Mar 26, 1998
+ */
 const cache_key *
-storeKeyPublic(const char *url, const method_t method)
+storeKeyPublicOld(const char *url, const method_t method)
 {
     static cache_key digest[MD5_DIGEST_CHARS];
     MD5_CTX M;
@@ -119,6 +122,19 @@ storeKeyPublic(const char *url, const method_t method)
     return digest;
 }
 
+const cache_key *
+storeKeyPublic(const char *url, const method_t method)
+{
+    static cache_key digest[MD5_DIGEST_CHARS];
+    unsigned char m = (unsigned char) method;
+    MD5_CTX M;
+    MD5Init(&M);
+    MD5Update(&M, &m, sizeof(m));
+    MD5Update(&M, (unsigned char *) url, strlen(url));
+    MD5Final(digest, &M);
+    return digest;
+}
+
 const cache_key *
 storeKeyDup(const cache_key * key)
 {
@@ -1,8 +1,7 @@
 
 
-
 /*
- * $Id: structs.h,v 1.261 1999/01/18 22:23:46 wessels Exp $
+ * $Id: structs.h,v 1.262 1999/01/19 02:24:34 wessels Exp $
  *
  *
  * SQUID Internet Object Cache  http://squid.nlanr.net/Squid/
@@ -783,7 +782,6 @@ struct _clientHttpRequest {
     char *uri;
     char *log_uri;
     struct {
-	char *buf;
 	off_t offset;
 	size_t size;
     } out;
@@ -832,7 +830,6 @@ struct _ConnStateData {
 	int state;
 	void *callback_data;
     } ident;
-    CommWriteStateData *commWriteState;
     int nrequests;
     int persistent;
     struct {
@@ -1,6 +1,6 @@
 
 /*
- * $Id: url.cc,v 1.112 1999/01/12 23:38:41 wessels Exp $
+ * $Id: url.cc,v 1.113 1999/01/19 02:24:35 wessels Exp $
  *
  * DEBUG: section 23    URL Parsing
  * AUTHOR: Duane Wessels
@@ -66,7 +66,6 @@ const char *ProtocolStr[] =
     "TOTAL"
 };
 
-static const char *const hex = "0123456789abcdef";
 static request_t *urnParse(method_t method, char *urn);
 static const char *const valid_hostname_chars =
 #if ALLOW_HOSTNAME_UNDERSCORES
@@ -1,6 +1,6 @@
 
 /*
- * $Id: wais.cc,v 1.128 1999/01/18 22:23:48 wessels Exp $
+ * $Id: wais.cc,v 1.129 1999/01/19 02:24:36 wessels Exp $
  *
  * DEBUG: section 24    WAIS Relay
  * AUTHOR: Harvest Derived
@@ -92,8 +92,8 @@ waisReadReply(int fd, void *data)
     delay_id delay_id = delayMostBytesAllowed(entry->mem_obj);
 #endif
     if (EBIT_TEST(entry->flags, ENTRY_ABORTED)) {
-        comm_close(fd);
-        return;
+	comm_close(fd);
+	return;
     }
     errno = 0;
     read_sz = 4096;