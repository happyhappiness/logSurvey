@@ -289,7 +289,7 @@ static void *us_handle_client (void *arg)
 
 		if (strcasecmp (fields[0], "getval") == 0)
 		{
-			handle_getval (fhout, buffer);
+			cmd_handle_getval (fhout, buffer);
 		}
 		else if (strcasecmp (fields[0], "getthreshold") == 0)
 		{
@@ -33,114 +33,111 @@
 #include "utils_parse_option.h"
 #include "utils_cmd_getval.h"
 
+cmd_status_t cmd_parse_getval (size_t argc, char **argv,
+    cmd_getval_t *ret_getval, cmd_error_handler_t *err)
+{
+  char *identifier_copy;
+  int status;
+
+  if (argc != 1)
+  {
+    if (argc == 0)
+      cmd_error (CMD_PARSE_ERROR, err, "Missing identifier.");
+    else
+      cmd_error (CMD_PARSE_ERROR, err,
+	  "Garbage after identifier: `%s'.", argv[1]);
+    return (CMD_PARSE_ERROR);
+  }
+
+  /* parse_identifier() modifies its first argument,
+   * returning pointers into it */
+  identifier_copy = sstrdup (argv[0]);
+
+  status = parse_identifier (argv[0], &ret_getval->identifier.host,
+      &ret_getval->identifier.plugin, &ret_getval->identifier.plugin_instance,
+      &ret_getval->identifier.type, &ret_getval->identifier.type_instance);
+  if (status != 0)
+  {
+    DEBUG ("cmd_parse_getval: Cannot parse identifier `%s'.", identifier_copy);
+    cmd_error (CMD_PARSE_ERROR, err,
+	"Cannot parse identifier `%s'.", identifier_copy);
+    sfree (identifier_copy);
+    return (CMD_PARSE_ERROR);
+  }
+
+  ret_getval->raw_identifier = identifier_copy;
+  return (CMD_OK);
+} /* cmd_status_t cmd_parse_getval */
+
 #define print_to_socket(fh, ...) \
   do { \
     if (fprintf (fh, __VA_ARGS__) < 0) { \
       char errbuf[1024]; \
-      WARNING ("handle_getval: failed to write to socket #%i: %s", \
+      WARNING ("cmd_handle_getval: failed to write to socket #%i: %s", \
           fileno (fh), sstrerror (errno, errbuf, sizeof (errbuf))); \
       return -1; \
     } \
     fflush(fh); \
   } while (0)
 
-int handle_getval (FILE *fh, char *buffer)
+cmd_status_t cmd_handle_getval (FILE *fh, char *buffer)
 {
-  char *command;
-  char *identifier;
-  char *identifier_copy;
+  cmd_error_handler_t err = { cmd_error_fh, fh };
+  cmd_status_t status;
+  cmd_t cmd;
 
-  char *hostname;
-  char *plugin;
-  char *plugin_instance;
-  char *type;
-  char *type_instance;
   gauge_t *values;
   size_t values_num;
 
   const data_set_t *ds;
 
-  int   status;
 
   if ((fh == NULL) || (buffer == NULL))
     return (-1);
 
-  DEBUG ("utils_cmd_getval: handle_getval (fh = %p, buffer = %s);",
+  DEBUG ("utils_cmd_getval: cmd_handle_getval (fh = %p, buffer = %s);",
       (void *) fh, buffer);
 
-  command = NULL;
-  status = parse_string (&buffer, &command);
-  if (status != 0)
-  {
-    print_to_socket (fh, "-1 Cannot parse command.\n");
-    return (-1);
-  }
-  assert (command != NULL);
-
-  if (strcasecmp ("GETVAL", command) != 0)
+  if ((status = cmd_parse (buffer, &cmd, &err)) != CMD_OK)
+    return (status);
+  if (cmd.type != CMD_GETVAL)
   {
-    print_to_socket (fh, "-1 Unexpected command: `%s'.\n", command);
-    return (-1);
+    cmd_error (CMD_UNKNOWN_COMMAND, &err,
+	"Unexpected command: `%s'.", CMD_TO_STRING (cmd.type));
+    cmd_destroy (&cmd);
+    return (CMD_UNKNOWN_COMMAND);
   }
 
-  identifier = NULL;
-  status = parse_string (&buffer, &identifier);
-  if (status != 0)
-  {
-    print_to_socket (fh, "-1 Cannot parse identifier.\n");
-    return (-1);
-  }
-  assert (identifier != NULL);
-
-  if (*buffer != 0)
-  {
-    print_to_socket (fh, "-1 Garbage after end of command: %s\n", buffer);
-    return (-1);
-  }
-
-  /* parse_identifier() modifies its first argument,
-   * returning pointers into it */
-  identifier_copy = sstrdup (identifier);
-
-  status = parse_identifier (identifier_copy, &hostname,
-      &plugin, &plugin_instance,
-      &type, &type_instance);
-  if (status != 0)
-  {
-    DEBUG ("handle_getval: Cannot parse identifier `%s'.", identifier);
-    print_to_socket (fh, "-1 Cannot parse identifier `%s'.\n", identifier);
-    sfree (identifier_copy);
-    return (-1);
-  }
-
-  ds = plugin_get_ds (type);
+  ds = plugin_get_ds (cmd.cmd.getval.identifier.type);
   if (ds == NULL)
   {
-    DEBUG ("handle_getval: plugin_get_ds (%s) == NULL;", type);
-    print_to_socket (fh, "-1 Type `%s' is unknown.\n", type);
-    sfree (identifier_copy);
+    DEBUG ("cmd_handle_getval: plugin_get_ds (%s) == NULL;",
+	cmd.cmd.getval.identifier.type);
+    cmd_error (CMD_ERROR, &err, "Type `%s' is unknown.\n",
+	cmd.cmd.getval.identifier.type);
+    cmd_destroy (&cmd);
     return (-1);
   }
 
   values = NULL;
   values_num = 0;
-  status = uc_get_rate_by_name (identifier, &values, &values_num);
+  status = uc_get_rate_by_name (cmd.cmd.getval.raw_identifier, &values, &values_num);
   if (status != 0)
   {
-    print_to_socket (fh, "-1 No such value\n");
-    sfree (identifier_copy);
-    return (-1);
+    cmd_error (CMD_ERROR, &err, "No such value.");
+    cmd_destroy (&cmd);
+    return (CMD_ERROR);
   }
 
   if (ds->ds_num != values_num)
   {
     ERROR ("ds[%s]->ds_num = %zu, "
 	"but uc_get_rate_by_name returned %zu values.",
 	ds->type, ds->ds_num, values_num);
-    print_to_socket (fh, "-1 Error reading value from cache.\n");
+    cmd_error (CMD_ERROR, &err, "Error reading value from cache.");
     sfree (values);
-    sfree (identifier_copy);
-    return (-1);
+    cmd_destroy (&cmd);
+    return (CMD_ERROR);
   }
 
   print_to_socket (fh, "%zu Value%s found\n", values_num,
@@ -159,9 +156,17 @@ int handle_getval (FILE *fh, char *buffer)
   }
 
   sfree (values);
-  sfree (identifier_copy);
+  cmd_destroy (&cmd);
+
+  return (CMD_OK);
+} /* cmd_status_t cmd_handle_getval */
+
+void cmd_destroy_getval (cmd_getval_t *getval)
+{
+  if (getval == NULL)
+    return;
 
-  return (0);
-} /* int handle_getval */
+  sfree (getval->raw_identifier);
+} /* void cmd_destroy_getval */
 
 /* vim: set sw=2 sts=2 ts=8 : */
@@ -29,7 +29,14 @@
 
 #include <stdio.h>
 
-int handle_getval (FILE *fh, char *buffer);
+#include "utils_cmds.h"
+
+cmd_status_t cmd_parse_getval (size_t argc, char **argv,
+    cmd_getval_t *ret_getval, cmd_error_handler_t *err);
+
+cmd_status_t cmd_handle_getval (FILE *fh, char *buffer);
+
+void cmd_destroy_getval (cmd_getval_t *getval);
 
 #endif /* UTILS_CMD_GETVAL_H */
 
@@ -152,8 +152,8 @@ cmd_status_t cmd_parse_putval (size_t argc, char **argv,
 		return (CMD_ERROR);
 	}
 
-	ret_putval->identifier = identifier_copy;
-	if (ret_putval->identifier == NULL)
+	ret_putval->raw_identifier = identifier_copy;
+	if (ret_putval->raw_identifier == NULL)
 	{
 		cmd_error (CMD_ERROR, err, "malloc failed.");
 		cmd_destroy_putval (ret_putval);
@@ -219,7 +219,7 @@ void cmd_destroy_putval (cmd_putval_t *putval)
 	if (putval == NULL)
 		return;
 
-	sfree (putval->identifier);
+	sfree (putval->raw_identifier);
 
 	for (i = 0; i < putval->vl_num; ++i)
 	{
@@ -28,6 +28,7 @@
 
 #include "utils_cmds.h"
 #include "utils_cmd_flush.h"
+#include "utils_cmd_getval.h"
 #include "utils_cmd_listval.h"
 #include "utils_cmd_putval.h"
 #include "utils_parse_option.h"
@@ -214,6 +215,12 @@ cmd_status_t cmd_parsev (size_t argc, char **argv,
 		return cmd_parse_flush (argc - 1, argv + 1,
 				&ret_cmd->cmd.flush, err);
 	}
+	else if (strcasecmp ("GETVAL", command) == 0)
+	{
+		ret_cmd->type = CMD_GETVAL;
+		return cmd_parse_getval (argc - 1, argv + 1,
+				&ret_cmd->cmd.getval, err);
+	}
 	else if (strcasecmp ("LISTVAL", command) == 0)
 	{
 		ret_cmd->type = CMD_LISTVAL;
@@ -265,6 +272,9 @@ void cmd_destroy (cmd_t *cmd)
 		case CMD_FLUSH:
 			cmd_destroy_flush (&cmd->cmd.flush);
 			break;
+		case CMD_GETVAL:
+			cmd_destroy_getval (&cmd->cmd.getval);
+			break;
 		case CMD_LISTVAL:
 			cmd_destroy_listval (&cmd->cmd.listval);
 			break;
@@ -34,11 +34,13 @@
 typedef enum {
 	CMD_UNKNOWN = 0,
 	CMD_FLUSH   = 1,
-	CMD_LISTVAL = 2,
-	CMD_PUTVAL  = 3,
+	CMD_GETVAL  = 2,
+	CMD_LISTVAL = 3,
+	CMD_PUTVAL  = 4,
 } cmd_type_t;
 #define CMD_TO_STRING(type) \
 	((type) == CMD_FLUSH) ? "FLUSH" \
+		: ((type) == CMD_GETVAL) ? "GETVAL" \
 		: ((type) == CMD_LISTVAL) ? "LISTVAL" \
 		: ((type) == CMD_PUTVAL) ? "PUTVAL" \
 		: "UNKNOWN"
@@ -52,12 +54,17 @@ typedef struct {
 	size_t identifiers_num;
 } cmd_flush_t;
 
+typedef struct {
+	char *raw_identifier;
+	identifier_t identifier;
+} cmd_getval_t;
+
 typedef struct {
 } cmd_listval_t;
 
 typedef struct {
 	/* The raw identifier as provided by the user. */
-	char *identifier;
+	char *raw_identifier;
 
 	/* An array of the fully parsed identifier and all value lists, and their
 	 * options as provided by the user. */
@@ -76,6 +83,7 @@ typedef struct {
 	cmd_type_t type;
 	union {
 		cmd_flush_t flush;
+		cmd_getval_t getval;
 		cmd_listval_t listval;
 		cmd_putval_t putval;
 	} cmd;