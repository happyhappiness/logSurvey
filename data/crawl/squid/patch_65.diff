----++++compat/debug.h
@@ -31,6 +31,12 @@ SQUIDCEXTERN int debug_enabled;
                          fprintf(stderr,X); \
                      } else (void)0
 
+#define ndebug(content) ndebug_(__FILE__, __LINE__, content)
+#define ndebug_(file, line, content) if (debug_enabled) { \
+    std::cerr &lt;&lt; file &lt;&lt; &#39;(&#39; &lt;&lt; line &lt;&lt; &#39;)&#39; &lt;&lt; &quot;: pid=&quot; &lt;&lt; getpid() &lt;&lt; &#39;:&#39; \
+        &lt;&lt; content &lt;&lt; std::endl; \
+    } else (void)0
+
 #else /* __GNUC__ */
 
 /* non-GCC compilers can&#39;t do the above macro define yet. */
----++++helpers/basic_auth/fake/fake.cc
@@ -45,23 +45,23 @@
 #include &quot;squid.h&quot;
 #include &quot;helpers/defines.h&quot;
 
-#include &lt;cstring&gt;
+#include &lt;iostream&gt;
+#include &lt;string&gt;
 
 /**
  * options:
  * -d enable debugging.
  * -h interface help.
  */
-char *program_name = NULL;
+std::string program_name;
 
 static void
 usage(void)
 {
-    fprintf(stderr,
-            &quot;Usage: %s [-d] [-v] [-h]\n&quot;
-            &quot; -d  enable debugging.\n&quot;
-            &quot; -h  this message\n\n&quot;,
-            program_name);
+    std::cerr &lt;&lt;
+            &quot;Usage: &quot; &lt;&lt; program_name &lt;&lt; &quot; [-d] [-h]&quot; &lt;&lt; std::endl &lt;&lt;
+            &quot; -d  enable debugging.&quot; &lt;&lt; std::endl &lt;&lt;
+            &quot; -h  this message&quot; &lt;&lt; std::endl &lt;&lt; std::endl;
 }
 
 static void
@@ -79,7 +79,8 @@ process_options(int argc, char *argv[])
             usage();
             exit(0);
         default:
-            fprintf(stderr, &quot;%s: FATAL: unknown option: -%c. Exiting\n&quot;, program_name, opt);
+            std::cerr &lt;&lt; program_name &lt;&lt; &quot;: FATAL: unknown option: -&quot; &lt;&lt;
+                static_cast&lt;char&gt;(optopt) &lt;&lt; &quot;. Exiting&quot; &lt;&lt; std::endl;
             usage();
             exit(1);
         }
@@ -89,33 +90,20 @@ process_options(int argc, char *argv[])
 int
 main(int argc, char *argv[])
 {
-    char buf[HELPER_INPUT_BUFFER];
-    int buflen = 0;
-
-    setbuf(stdout, NULL);
-    setbuf(stderr, NULL);
-
     program_name = argv[0];
-
     process_options(argc, argv);
 
-    debug(&quot;%s &quot; VERSION &quot; &quot; SQUID_BUILD_INFO &quot; starting up...\n&quot;, program_name);
-
-    while (fgets(buf, HELPER_INPUT_BUFFER, stdin) != NULL) {
-        char *p;
-
-        if ((p = strchr(buf, &#39;\n&#39;)) != NULL) {
-            *p = &#39;\0&#39;;      /* strip \n */
-            buflen = p - buf;   /* length is known already */
-        } else
-            buflen = strlen(buf);   /* keep this so we only scan the buffer for \0 once per loop */
-
-        debug(&quot;Got %d bytes &#39;%s&#39; from Squid\n&quot;, buflen, buf);
+    ndebug(program_name &lt;&lt; &#39; &#39; &lt;&lt; VERSION &lt;&lt; &#39; &#39; &lt;&lt; SQUID_BUILD_INFO &lt;&lt;
+                    &quot; starting up...&quot;);
+    std::string buf;
+    while (getline(std::cin,buf)) { // will return false at EOF
+        ndebug(&quot;Got &quot; &lt;&lt; buf.length() &lt;&lt; &quot; bytes &#39;&quot; &lt;&lt; buf &lt;&lt; &quot;&#39; from Squid&quot;);
 
         /* send &#39;OK&#39; result back to Squid */
         SEND_OK(&quot;&quot;);
     }
-    debug(&quot;%s &quot; VERSION &quot; &quot; SQUID_BUILD_INFO &quot; shutting down...\n&quot;, program_name);
-    exit(0);
+    ndebug(program_name &lt;&lt; &#39; &#39; &lt;&lt; VERSION &lt;&lt; &#39; &#39; &lt;&lt; SQUID_BUILD_INFO &lt;&lt;
+                    &quot; shutting down...&quot;);
+    return 0;
 }
 
----++++helpers/defines.h
@@ -46,16 +46,16 @@
 #define HELPER_INPUT_BUFFER 8196
 
 /* send OK result to Squid with a string parameter. */
-#define SEND_OK(x)  fprintf(stdout, "OK %s\n",x)
+#define SEND_OK(x)  std::cout &lt;&lt; "OK " &lt;&lt; x &lt;&lt; std::endl
 
 /* send ERR result to Squid with a string parameter. */
-#define SEND_ERR(x) fprintf(stdout, "ERR %s\n",x)
+#define SEND_ERR(x) std::cout &lt;&lt; "ERR " &lt;&lt; x &lt;&lt; std::endl
 
 /* send ERR result to Squid with a string parameter. */
-#define SEND_BH(x)  fprintf(stdout, "BH %s\n",x)
+#define SEND_BH(x)  std::cout &lt;&lt; "BH " &lt;&lt; x &lt;&lt; std::endl
 
 /* send TT result to Squid with a string parameter. */
-#define SEND_TT(x)  fprintf(stdout, "TT %s\n",x)
+#define SEND_TT(x)  std::cout &lt;&lt; "TT " &lt;&lt; x &lt;&lt; std::endl
 
 #endif /* __SQUID_HELPERS_DEFINES_H */
 
----++++GitHub