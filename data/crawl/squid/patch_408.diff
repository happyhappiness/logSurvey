@@ -36,7 +36,7 @@ namespace Auth
 
 #if USE_AUTH
 /// Initialize Auth subsystem
-extern void Init(void);
+void Init(void);
 #else /* USE_AUTH */
 inline void Init(void) {} /* NOP if not USE_AUTH */
 #endif /* USE_AUTH */
@@ -37,7 +37,7 @@
 #include "HttpHdrSc.h"
 #include "StatHist.h"
 
-extern http_hdr_sc_type &operator++ (http_hdr_sc_type &aHeader);
+http_hdr_sc_type &operator++ (http_hdr_sc_type &aHeader);
 /* copies non-extant fields from new_sc to this sc */
 void
 HttpHdrScTarget::mergeWith(const HttpHdrScTarget * new_sc)
@@ -56,7 +56,6 @@
 class ConnStateData;
 
 /*  Http Request */
-//DEAD?: extern int httpRequestHdrAllowedByName(http_hdr_type id);
 void httpRequestPack(void *obj, Packer *p);
 
 class HttpHdrRange;
@@ -57,7 +57,7 @@
 #endif
 
 // implemented in client_side_reply.cc until sides have a common parent
-extern void purgeEntriesByUrl(HttpRequest * req, const char *url);
+void purgeEntriesByUrl(HttpRequest * req, const char *url);
 
 ServerStateData::ServerStateData(FwdState *theFwdState): AsyncJob("ServerStateData"),
         requestSender(NULL),
@@ -303,7 +303,7 @@ StringRegistry::remove(String const *entry)
 
 StringRegistry StringRegistry::Instance_;
 
-extern String::size_type memStringCount();
+String::size_type memStringCount();
 
 void
 StringRegistry::Stat(StoreEntry *entry)
@@ -11,8 +11,8 @@ typedef enum { pointNone, pointPreCache, pointPostCache } VectPoint;
 typedef enum { srvBlock, srvBypass, srvWait, srvForce} SrvBehaviour;
 
 extern const char *crlf;
-extern const char *methodStr(Method); // TODO: make into a stream operator?
-extern const char *vectPointStr(VectPoint); // TODO: make into a stream op?
+const char *methodStr(Method); // TODO: make into a stream operator?
+const char *vectPointStr(VectPoint); // TODO: make into a stream op?
 
 } // namespace Adaptation
 
@@ -61,11 +61,11 @@ class Service: public RefCountable
 typedef Service::Pointer ServicePointer;
 
 typedef Vector<Adaptation::ServicePointer> Services;
-extern Services &AllServices();
-extern ServicePointer FindService(const Service::Id &key);
+Services &AllServices();
+ServicePointer FindService(const Service::Id &key);
 
 /// detach all adaptation services from current configuration
-extern void DetachServices();
+void DetachServices();
 
 } // namespace Adaptation
 
@@ -142,8 +142,8 @@ std::ostream &operator <<(std::ostream &os, const ServicePlan &p)
 }
 
 typedef Vector<ServiceGroupPointer> Groups;
-extern Groups &AllGroups();
-extern ServiceGroupPointer FindGroup(const ServiceGroup::Id &id);
+Groups &AllGroups();
+ServiceGroupPointer FindGroup(const ServiceGroup::Id &id);
 
 } // namespace Adaptation
 
@@ -49,15 +49,15 @@ class ServiceRep : public Adaptation::Service
 };
 
 /// register loaded eCAP module service
-extern void RegisterAdapterService(const ServiceRep::AdapterService& adapterService);
+void RegisterAdapterService(const ServiceRep::AdapterService& adapterService);
 /// unregister loaded eCAP module service by service uri
-extern void UnregisterAdapterService(const String& serviceUri);
+void UnregisterAdapterService(const String& serviceUri);
 
 /// returns loaded eCAP module service by service uri
-extern ServiceRep::AdapterService FindAdapterService(const String& serviceUri);
+ServiceRep::AdapterService FindAdapterService(const String& serviceUri);
 
 /// check for loaded eCAP services without matching ecap_service in squid.conf
-extern void CheckUnusedAdapterServices(const Services& services);
+void CheckUnusedAdapterServices(const Services& services);
 } // namespace Ecap
 } // namespace Adaptation
 
@@ -1896,9 +1896,9 @@ ClientSocketContext::writeComplete(const Comm::ConnectionPointer &conn, char *bu
     }
 }
 
-extern "C" CSR clientGetMoreData;
-extern "C" CSS clientReplyStatus;
-extern "C" CSD clientReplyDetach;
+SQUIDCEXTERN CSR clientGetMoreData;
+SQUIDCEXTERN CSS clientReplyStatus;
+SQUIDCEXTERN CSD clientReplyDetach;
 
 static ClientSocketContext *
 parseHttpRequestAbort(ConnStateData * csd, const char *uri)
@@ -76,7 +76,7 @@ CBDATA_CLASS_INIT(clientReplyContext);
 
 /* Local functions */
 extern "C" CSS clientReplyStatus;
-extern ErrorState *clientBuildError(err_type, http_status, char const *, Ip::Address &, HttpRequest *);
+ErrorState *clientBuildError(err_type, http_status, char const *, Ip::Address &, HttpRequest *);
 
 /* privates */
 
@@ -433,8 +433,8 @@ clientReplyContext::handleIMSReply(StoreIOBuffer result)
     }
 }
 
-extern "C" CSR clientGetMoreData;
-extern "C" CSD clientReplyDetach;
+SQUIDCEXTERN CSR clientGetMoreData;
+SQUIDCEXTERN CSD clientReplyDetach;
 
 /**
  * clientReplyContext::cacheHit Should only be called until the HTTP reply headers
@@ -101,7 +101,7 @@ static const char *const crlf = "\r\n";
 static void clientFollowXForwardedForCheck(allow_t answer, void *data);
 #endif /* FOLLOW_X_FORWARDED_FOR */
 
-extern ErrorState *clientBuildError(err_type, http_status, char const *url, Ip::Address &, HttpRequest *);
+ErrorState *clientBuildError(err_type, http_status, char const *url, Ip::Address &, HttpRequest *);
 
 CBDATA_CLASS_INIT(ClientRequestContext);
 
@@ -131,9 +131,9 @@ static int clientHierarchical(ClientHttpRequest * http);
 static void clientInterpretRequestHeaders(ClientHttpRequest * http);
 static RH clientRedirectDoneWrapper;
 static void checkNoCacheDoneWrapper(allow_t, void *);
-extern "C" CSR clientGetMoreData;
-extern "C" CSS clientReplyStatus;
-extern "C" CSD clientReplyDetach;
+SQUIDCEXTERN CSR clientGetMoreData;
+SQUIDCEXTERN CSS clientReplyStatus;
+SQUIDCEXTERN CSD clientReplyDetach;
 static void checkFailureRatio(err_type, hier_code);
 
 ClientRequestContext::~ClientRequestContext()
@@ -1533,8 +1533,8 @@ ClientHttpRequest::loggingEntry(StoreEntry *newEntry)
  * the callout.  This is strictly for convenience.
  */
 
-extern tos_t aclMapTOS (acl_tos * head, ACLChecklist * ch);
-extern nfmark_t aclMapNfmark (acl_nfmark * head, ACLChecklist * ch);
+tos_t aclMapTOS (acl_tos * head, ACLChecklist * ch);
+nfmark_t aclMapNfmark (acl_nfmark * head, ACLChecklist * ch);
 
 void
 ClientHttpRequest::doCallouts()
@@ -1448,7 +1448,7 @@ ESIContext::freeResources ()
     /* don't touch incoming, it's a pointer into buffered anyway */
 }
 
-extern ErrorState *clientBuildError (err_type, http_status, char const *, Ip::Address &, HttpRequest *);
+ErrorState *clientBuildError (err_type, http_status, char const *, Ip::Address &, HttpRequest *);
 
 /* This can ONLY be used before we have sent *any* data to the client */
 void
@@ -51,6 +51,7 @@ class _fde_disk {
     dwrite_q *write_q;
     dwrite_q *write_q_tail;
     off_t offset;
+    _fde_disk() { memset(this, 0, sizeof(_fde_disk)); }
 };
 
 class fde
@@ -112,7 +113,7 @@ class fde
 #endif
     unsigned epoll_state;
 
-    struct _fde_disk disk;
+    _fde_disk disk;
     PF *read_handler;
     void *read_data;
     PF *write_handler;
@@ -166,7 +167,6 @@ class fde
         clientInfo = NULL;
 #endif
         epoll_state = 0;
-        memset(&disk, 0, sizeof(_fde_disk));
         read_handler = NULL;
         read_data = NULL;
         write_handler = NULL;
@@ -41,15 +41,12 @@ class wordlist;
 
 void fqdncache_init(void);
 void fqdnStats(StoreEntry *);
-//extern void fqdncacheReleaseInvalid(const char *);
-//extern int fqdncacheQueueDrain(void);
 void fqdncacheFreeMemory(void);
 void fqdncache_restart(void);
 void fqdncache_purgelru(void *);
 void fqdncacheAddEntryFromHosts(char *addr, wordlist * hostnames);
 
 const char *fqdncache_gethostbyaddr(const Ip::Address &, int flags);
-//extern const char *fqdnFromAddr(const Ip::Address &);
 void fqdncache_nbgethostbyaddr(const Ip::Address &, FQDNH *, void *);
 
 #endif /* SQUID_FQDNCACHE_H_ */
@@ -402,6 +402,6 @@ class Address_list
 
 } // namespace Ip
 
-extern void parse_IpAddress_list_token(Ip::Address_list **, char *);
+void parse_IpAddress_list_token(Ip::Address_list **, char *);
 
 #endif /* _SQUID_IP_IPADDRESS_H */
@@ -5,7 +5,7 @@ namespace Ip
 {
 
 /// Probe to discover IPv6 capabilities
-extern void ProbeTransport(void);
+void ProbeTransport(void);
 
 /* Squids notion of IPv6 stack types and state */
 #define IPV6_OFF  0
@@ -19,7 +19,7 @@ typedef enum { fdnNone, fdnHttpSocket, fdnHttpsSocket,
                fdnInIcpSocket, fdnInHtcpSocket, fdnEnd
              } FdNoteId;
 
-extern const char *FdNote(int fdNodeId); ///< converts FdNoteId into a string
+const char *FdNote(int fdNodeId); ///< converts FdNoteId into a string
 
 } // namespace Ipc;
 
@@ -69,10 +69,10 @@ class SharedListenResponse
 };
 
 /// prepare and send SharedListenRequest to Coordinator
-extern void JoinSharedListen(const OpenListenerParams &, AsyncCall::Pointer &);
+void JoinSharedListen(const OpenListenerParams &, AsyncCall::Pointer &);
 
 /// process Coordinator response to SharedListenRequest
-extern void SharedListenJoined(const SharedListenResponse &response);
+void SharedListenJoined(const SharedListenResponse &response);
 
 } // namespace Ipc;
 
@@ -37,7 +37,7 @@ class StartListeningCb
 
 /// Depending on whether SMP is on, either ask Coordinator to send us
 /// the listening FD or open a listening socket directly.
-extern void StartListening(int sock_type, int proto, const Comm::ConnectionPointer &listenConn,
+void StartListening(int sock_type, int proto, const Comm::ConnectionPointer &listenConn,
                            FdNoteId fdNote, AsyncCall::Pointer &callback);
 
 } // namespace Ipc;
@@ -55,7 +55,7 @@ class UdsOp: public AsyncJob
 };
 
 /// converts human-readable filename path into UDS address
-extern struct sockaddr_un PathToAddress(const String &pathAddr);
+struct sockaddr_un PathToAddress(const String &pathAddr);
 
 // XXX: move UdsSender code to UdsSender.{cc,h}
 /// attempts to send an IPC message a few times, with a timeout
@@ -50,13 +50,13 @@ class Logfile
 };
 
 /* Legacy API */
-extern Logfile *logfileOpen(const char *path, size_t bufsz, int);
-extern void logfileClose(Logfile * lf);
-extern void logfileRotate(Logfile * lf);
-extern void logfileWrite(Logfile * lf, char *buf, size_t len);
-extern void logfileFlush(Logfile * lf);
-extern void logfilePrintf(Logfile * lf, const char *fmt,...) PRINTF_FORMAT_ARG2;
-extern void logfileLineStart(Logfile * lf);
-extern void logfileLineEnd(Logfile * lf);
+Logfile *logfileOpen(const char *path, size_t bufsz, int);
+void logfileClose(Logfile * lf);
+void logfileRotate(Logfile * lf);
+void logfileWrite(Logfile * lf, char *buf, size_t len);
+void logfileFlush(Logfile * lf);
+void logfilePrintf(Logfile * lf, const char *fmt,...) PRINTF_FORMAT_ARG2;
+void logfileLineStart(Logfile * lf);
+void logfileLineEnd(Logfile * lf);
 
 #endif /* SQUID_SRC_LOG_FILE_H */
@@ -34,6 +34,6 @@
 
 class Logfile;
 
-extern int logfile_mod_daemon_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
+int logfile_mod_daemon_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
 
 #endif /* _SQUID_SRC_LOG_MODDAEMON_H */
@@ -34,6 +34,6 @@
 
 class Logfile;
 
-extern int logfile_mod_stdio_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
+int logfile_mod_stdio_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
 
 #endif /* _SQUID_SRC_LOG_MODSTDIO_H */
@@ -34,6 +34,6 @@
 
 class Logfile;
 
-extern int logfile_mod_syslog_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
+int logfile_mod_syslog_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
 
 #endif /* _SQUID_SRC_LOG_MODSYSLOG_H */
@@ -35,6 +35,6 @@
 
 class Logfile;
 
-extern int logfile_mod_tcp_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
+int logfile_mod_tcp_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
 
 #endif /* _SQUID_SRC_LOG_MODTCP_H */
@@ -34,6 +34,6 @@
 
 class Logfile;
 
-extern int logfile_mod_udp_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
+int logfile_mod_udp_open(Logfile * lf, const char *path, size_t bufsz, int fatal_flag);
 
 #endif /* _SQUID_SRC_LOG_MODUDP_H */
@@ -33,13 +33,13 @@
 #ifndef SQUID_LOG_ACCESS_LOG_H_
 #define SQUID_LOG_ACCESS_LOG_H_
 
-extern int logTypeIsATcpHit(log_type);
-extern void fvdbCountVia(const char *key);
-extern void fvdbCountForw(const char *key);
+int logTypeIsATcpHit(log_type);
+void fvdbCountVia(const char *key);
+void fvdbCountForw(const char *key);
 
 #if HEADERS_LOG
 class HttpRequestMethod;
-extern void headersLog(int cs, int pq, const HttpRequestMethod& m, void *data);
+void headersLog(int cs, int pq, const HttpRequestMethod& m, void *data);
 #endif
 
 #endif /* SQUID_LOG_ACCESS_LOG_H_ */
@@ -160,7 +160,7 @@ static int opt_install_service = FALSE;
 static int opt_remove_service = FALSE;
 static int opt_signal_service = FALSE;
 static int opt_command_line = FALSE;
-extern void WIN32_svcstatusupdate(DWORD, DWORD);
+void WIN32_svcstatusupdate(DWORD, DWORD);
 void WINAPI WIN32_svcHandler(DWORD);
 
 #endif
@@ -196,8 +196,8 @@ static void serverConnectionsClose(void);
 static void watch_child(char **);
 static void setEffectiveUser(void);
 #if MEM_GEN_TRACE
-extern void log_trace_done();
-extern void log_trace_init(char *);
+void log_trace_done();
+void log_trace_init(char *);
 #endif
 static void SquidShutdown(void);
 static void mainSetCwd(void);
@@ -257,7 +257,6 @@ memAllocString(size_t net_size, size_t * gross_size)
     return pool ? pool->alloc() : xcalloc(1, net_size);
 }
 
-extern size_t memStringCount();
 size_t
 memStringCount()
 {
@@ -12,8 +12,8 @@
 #include "Store.h"
 #include "tools.h"
 
-extern void GetCountersStats(Mgr::CountersActionData& stats);
-extern void DumpCountersStats(Mgr::CountersActionData& stats, StoreEntry* sentry);
+void GetCountersStats(Mgr::CountersActionData& stats);
+void DumpCountersStats(Mgr::CountersActionData& stats, StoreEntry* sentry);
 
 Mgr::CountersActionData::CountersActionData()
 {
@@ -19,9 +19,9 @@
 #include "Store.h"
 #include "tools.h"
 
-extern void GetInfo(Mgr::InfoActionData& stats);
-extern void DumpInfo(Mgr::InfoActionData& stats, StoreEntry* sentry);
-extern void DumpMallocStatistics(StoreEntry* sentry);
+void GetInfo(Mgr::InfoActionData& stats);
+void DumpInfo(Mgr::InfoActionData& stats, StoreEntry* sentry);
+void DumpMallocStatistics(StoreEntry* sentry);
 
 Mgr::InfoActionData::InfoActionData()
 {
@@ -12,8 +12,8 @@
 #include "Store.h"
 #include "tools.h"
 
-extern void GetAvgStat(Mgr::IntervalActionData& stats, int minutes, int hours);
-extern void DumpAvgStat(Mgr::IntervalActionData& stats, StoreEntry* sentry);
+void GetAvgStat(Mgr::IntervalActionData& stats, int minutes, int hours);
+void DumpAvgStat(Mgr::IntervalActionData& stats, StoreEntry* sentry);
 
 Mgr::IntervalActionData::IntervalActionData()
 {
@@ -13,8 +13,8 @@
 #include "Store.h"
 #include "tools.h"
 
-extern void GetIoStats(Mgr::IoActionData& stats);
-extern void DumpIoStats(Mgr::IoActionData& stats, StoreEntry* sentry);
+void GetIoStats(Mgr::IoActionData& stats);
+void DumpIoStats(Mgr::IoActionData& stats, StoreEntry* sentry);
 
 Mgr::IoActionData::IoActionData()
 {
@@ -11,8 +11,8 @@
 #include "Store.h"
 #include "tools.h"
 
-extern void GetServiceTimesStats(Mgr::ServiceTimesActionData& stats);
-extern void DumpServiceTimesStats(Mgr::ServiceTimesActionData& stats, StoreEntry* sentry);
+void GetServiceTimesStats(Mgr::ServiceTimesActionData& stats);
+void DumpServiceTimesStats(Mgr::ServiceTimesActionData& stats, StoreEntry* sentry);
 
 Mgr::ServiceTimesActionData::ServiceTimesActionData()
 {
@@ -1,13 +1,10 @@
-/*
- * $Id$
- */
 #ifndef _SQUIDINC_STORE_HEAP_REPLACEMENT_H
 #define _SQUIDINC_STORE_HEAP_REPLACEMENT_H
 
 #include "heap.h"
 
-extern heap_key HeapKeyGen_StoreEntry_LFUDA(void *entry, double age);
-extern heap_key HeapKeyGen_StoreEntry_GDSF(void *entry, double age);
-extern heap_key HeapKeyGen_StoreEntry_LRU(void *entry, double age);
+heap_key HeapKeyGen_StoreEntry_LFUDA(void *entry, double age);
+heap_key HeapKeyGen_StoreEntry_GDSF(void *entry, double age);
+heap_key HeapKeyGen_StoreEntry_LRU(void *entry, double age);
 
 #endif /* _SQUIDINC_STORE_HEAP_REPLACEMENT_H */
@@ -42,7 +42,7 @@ class Forwarder: public Ipc::Forwarder
     CBDATA_CLASS2(Forwarder);
 };
 
-extern void SendResponse(unsigned int requestId, const Pdu& pdu);
+void SendResponse(unsigned int requestId, const Pdu& pdu);
 
 } // namespace Snmp
 
@@ -31,7 +31,7 @@ class Response: public Ipc::Response
     Pdu pdu; ///< SNMP protocol data unit
 };
 
-extern std::ostream& operator << (std::ostream& os, const Response& response);
+std::ostream& operator << (std::ostream& os, const Response& response);
 
 } // namespace Snmp
 
@@ -1936,7 +1936,7 @@ statCPUUsage(int minutes)
                                tvSubDsec(CountHist[minutes].timestamp, CountHist[0].timestamp));
 }
 
-extern double
+double
 statRequestHitRatio(int minutes)
 {
     assert(minutes < N_COUNT_HIST);
@@ -1946,7 +1946,7 @@ statRequestHitRatio(int minutes)
                                CountHist[minutes].client_http.requests);
 }
 
-extern double
+double
 statRequestHitMemoryRatio(int minutes)
 {
     assert(minutes < N_COUNT_HIST);
@@ -1956,7 +1956,7 @@ statRequestHitMemoryRatio(int minutes)
                                CountHist[minutes].client_http.hits);
 }
 
-extern double
+double
 statRequestHitDiskRatio(int minutes)
 {
     assert(minutes < N_COUNT_HIST);
@@ -1966,7 +1966,7 @@ statRequestHitDiskRatio(int minutes)
                                CountHist[minutes].client_http.hits);
 }
 
-extern double
+double
 statByteHitRatio(int minutes)
 {
     size_t s;
@@ -116,7 +116,7 @@ void storeEntryReplaceObject(StoreEntry *, HttpReply *) STUB
 StoreEntry *storeGetPublic(const char *uri, const HttpRequestMethod& method) STUB_RETVAL(NULL)
 StoreEntry *storeGetPublicByRequest(HttpRequest * request) STUB_RETVAL(NULL)
 StoreEntry *storeGetPublicByRequestMethod(HttpRequest * request, const HttpRequestMethod& method) STUB_RETVAL(NULL)
-extern StoreEntry *storeCreateEntry(const char *, const char *, const RequestFlags &, const HttpRequestMethod&) STUB_RETVAL(NULL)
+StoreEntry *storeCreateEntry(const char *, const char *, const RequestFlags &, const HttpRequestMethod&) STUB_RETVAL(NULL)
 void storeInit(void) STUB
 void storeConfigure(void) STUB
 void storeFreeMemory(void) STUB
@@ -82,8 +82,8 @@ static void fatal_common(const char *);
 static void fatalvf(const char *fmt, va_list args);
 static void mail_warranty(void);
 #if MEM_GEN_TRACE
-extern void log_trace_done();
-extern void log_trace_init(char *);
+void log_trace_done();
+void log_trace_init(char *);
 #endif
 static void restoreCapabilities(int keep);
 int DebugSignal = -1;
@@ -623,8 +623,8 @@ tunnelConnectDone(const Comm::ConnectionPointer &conn, comm_err_t status, int xe
     commSetConnTimeout(conn, Config.Timeout.read, timeoutCall);
 }
 
-extern tos_t GetTosToServer(HttpRequest * request);
-extern nfmark_t GetNfmarkToServer(HttpRequest * request);
+tos_t GetTosToServer(HttpRequest * request);
+nfmark_t GetNfmarkToServer(HttpRequest * request);
 
 void
 tunnelStart(ClientHttpRequest * http, int64_t * size_ptr, int *status_ptr)