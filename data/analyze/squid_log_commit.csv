url,date,title,changes,file_name
https://github.com/squid-cache/squid/commit/9a03c44bb897241473997e57d33656add9f8ee71,01 Mar 2018,"Use va_copy() on all platforms; fixed a dangerous low-level bug (#160)

To improve cross-compilation support and to simplify code, rely on C++11
cstdarg header instead of ./configure-time va_copy() detection.

Using ./configure-time detection for va_copy() is dangerous because when
it does not work (e.g., during a poorly configured cross-compilation
attempt), Squid may crash if va_copy() was needed but was not detected.

See also: Bug 4821 and bug 753.

Also found and fixed a low-level bug: StoreEntry::vappendf() was not
using va_copy() because store.cc lacked VA_COPY #defines. The affected
code (900+ callers!) is used for cache manager responses and Gopher
gateway response compilation. If any of those calls required a buffer
larger than 4KB, the lack of those va_copy() calls could lead to crashes
and/or data corruption issues on platforms where va_copy() is required.",114,data/crawl/squid/patch_0.diff
https://github.com/squid-cache/squid/commit/51e09c08a5e6c582e7d93af99a8f2cfcb14ea9e6,01 Feb 2018,"TLS: GnuTLS implementation for listening ports and client connections (#81)

Move the http_port cert= and key= options logic to libsecurity and add GnuTLS implementation for PEM file loading. Also adds some extra debugging to clarify listening port initialization problems with the PEM files.

Enable most of the http(s)_port listening socket logic to always build except where OpenSSL-specific dependency still exists. It may seem reasonable to leave it optionally excluded for minimal builds, however a minimal proxy that does not support HTTPS in any way is increasingly useless in the modern web so preference is given to building the generic TLS related code. This also simplifies the required testing to detect code portability issues.

GnuTLS implementation is added for https_port configured with static cert=/key= parameters and the resulting TLS handshake behaviour. Squid built with GnuTLS can now act as useful parent proxies behind a SSL-Bump'ing frontend or for other clients which require a TLS explicit proxy.

Also fixes the definitions for the CertPointer and PrivateKeyPointer.",769,data/crawl/squid/patch_1.diff
https://github.com/squid-cache/squid/commit/799b66d1964c2ad925f9e6cb71b1c287da3e16d7,18 Jan 2018,"ESI: remove custom parser (#128)


Alex Rousskov:
  let's consider removing the custom ESI parser from Squid. It is of
terrible quality and ""nobody"" is testing ESI code when things change. Is
the CVE risk worth supporting few platforms that do not have the right
parser libraries?

* Fixed configure.ac tests for ESI libraries",491,data/crawl/squid/patch_2.diff
https://github.com/squid-cache/squid/commit/4d27d0ab7be057352a6a5d552f85a4181f1153a5,17 Nov 2017,"Relay peer CONNECT error status line and headers to users (#80)

Automated agents and human users (or their support staff!) often benefit
from knowing what went wrong. Dropping such details is a bad default.
For example, automation may rely on receiving the original status code.

Our CVE-2015-5400 fix (74f35ca) was too aggressive -- it hid all peer
errors behind a generic 502 (Bad Gateway) response. Pass-through peer
authentication errors were later (971003b) exposed again, but our CVE
fix intent was _not_ to hide _any_ peer errors in the first place! The
intent was to close the connection after delivering the error response.
Hiding peer errors was an (unfortunate) implementation choice.

It could be argued that some peer errors should not be relayed, but
since Squid successfully relayed all peer errors prior to 74f35ca and
continues to relay all non-CONNECT peer errors today, discriminating
peer errors is a separate (and possibly unnecessary) feature.

Ideally, Squid should mangle and relay the whole error message (instead
of sending small original headers). Squid should also relay 1xx control
messages while waiting for the final response. Unfortunately, doing so
properly, without reopening CVE-2015-5400 or duplicating a lot of
complex code, is a huge project. This small change fixes the most acute
manifestation of the ""hiding errors from users"" problem. The rest is a
long-term TODO.",12,data/crawl/squid/patch_3.diff
https://github.com/squid-cache/squid/commit/cf487124163a9a460ad78f5a482a5fd90fcf9cce,02 Nov 2017,"Move TLS/SSL http_port config values to libsecurity (#51)

These are most of the minor shuffling prerequisite for the proposal to allow generate-host-certificates to set a CA filename. These are required in libsecurity in order to prevent circular dependencies between libsecurity, libssl and libanyp.

Also contains some improvements to how configuration errors are displayed for these affected settings and some bugs fixed where the configured values were handled incorrectly.",608,data/crawl/squid/patch_4.diff
https://github.com/squid-cache/squid/commit/4ec218d55249c6edd2a4fe4511212a721c98394b,22 Jul 2017,"Cleaned up net_db structures. Made Coverity happier? (#27)

Fixes false positive by Coverity Scan. Issue 1415048 (RESOURCE_LEAK)?

No runtime testing.",22,data/crawl/squid/patch_5.diff
https://github.com/squid-cache/squid/commit/fd9c47d1075b4b01e9a283c2fd67c5958b5060c5,12 Jul 2017,"Happy Eyeballs: Deliver DNS resolution results to peer selection ASAP.

To make eyeballs happy, DNS code must deliver each lookup result to the
IP cache and, ultimately, to upper layers of ipcache_nbgethostbyname()
callers. This requires changing two interfaces:

1. between the DNS and the IP cache (the IDNSCB callback);
2. between the IP cache and peer selection code (the IPH callback).

The IDNSCB callback is now called after every usable A and AAAA lookup
instead of waiting for both answers. The IPH callback now has a sister
API for incremental delivery: The Dns::IpReceiver class.

To safely handle incremental delivery of IP addresses to the IP cache, I
upgraded ipcache_addrs from an equivalent of a C POD to a C++ CachedIps
container. The encapsulation allowed me to clearly separate the two IP
cache iteration APIs:

* All IPs (used by, e.g., ACL matching and host verification code) and
* just the ""good"" IPs (used only for peer selection for now).

CachedIps stores IPs together with their good/bad status in a single
std::vector. Eventually, the CachedIp element may be extended to store
TTL. The following implementation alternatives were considered and
rejected (at least for now) while optimizing for the ""a few (and usually
just one), usually good IPs"" case:

* Using std::list or std::deque storage would consume more RAM[1] for
  the common case of one (or few) IPs per name and slowed down IPs
  iteration code.
  [1] http://info.prelert.com/blog/stl-container-memory-usage
* Separating IP from its status, like the old code did, would make it
  easier to mismatch IP and its status, make it harder to add more
  metadata like per-IP TTL, and only save memory when storing many IPs
  per name.

The drawback of the selected ""all IP-related info in one place"" approach
is that we need smart iterators (e.g., the added GoodIpsIterator) or a
visitor API.

I added a new interface class for the incremental notification about
newly found IP addresses (Dns::IpReceiver) instead of adding second
IPH-like function pointer because we cannot safely call cbdata-protected
functions multiple times for the same cbdata object -- only
cbdataReferenceValidDone() dereferences the opaque pointer properly, and
that function cannot be called repeatedly. CbcPointer solves that
problem (but requires a class). Class methods also allow for more
precise notifications, with fewer ifs in the recipient code.

The new IpCacheLookupForwarder class hides the differences between the
old C-style IPH callbacks and the new Dns::IpReceiver. Eventually, we
may be able to move all lookup-specific data/methods into
IpCacheLookupForwarder, away from the IP cache entries where that info
is useless at best.

mgr:ipcache no longer reports ""IPcache Entries In Use"" but that info is
now available as ""cbdata ipcache_entry"" row in mgr:mem.

Do not cache IPv6 /etc/hosts addresses when IPv6 support is disabled.
This change simplified code, made it more consistent (we did not cache
AAAA records), and fixed ipcacheCycleAddr() and ipcacheMarkAllGood()
that were clearing supposed-to-be-permanent ""bad (IPv6 disabled)"" marks.

Also fixed two DNS TTL bugs. Squid now uses minimum TTL among all used
DNS records[2]. Old ipcacheParse() was trying to do the same but:
* could overwrite a zero TTL with a positive value
* took into account TTLs from unused record types (e.g., CNAME).
[2] Subject to *_dns_ttl limits in squid.conf, as before.

Also fixed ""delete xstrdup"" (i.e., malloc()ed) pointer in bracketed IP
parsing code (now moved to Ip::Address::FromHost()).

Also prohibited duplicate addresses from entering the IP cache. Allowing
duplicates may be useful for various hacks, but the IP cache code
assumes that cached IPs are unique and fails to mark bad repeated IPs.

Also fixed sending Squid Announcements to unsupported/disabled IPv6
addresses discovered via /etc/hosts.

Also slightly optimized dstdomain when dealing with IP-based host names:
The code now skips unnecessary Ip::Address to ipcache_addrs conversion.
This simplification may also help remove the ipcacheCheckNumeric() hack.
The bracketed IP parsing code was moved to Ip::Address::fromHost(). It
still needs a lot of love.",1298,data/crawl/squid/patch_6.diff
https://github.com/squid-cache/squid/commit/621f4299cbf34e3daf591d314cf1c14496d5f0d1,10 Jul 2017,"TLS: move X509_NAME_STACK_Pointer to Security::ServerOptions

This Pointer is only used by the Server port options.

No GnuTLS support added in this patch, just a straight shuffle
of the OpenSSL code.",182,data/crawl/squid/patch_7.diff
https://github.com/squid-cache/squid/commit/72ed59794689bb3006d1ea6f20e060ed8259e3d3,08 Jul 2017,Cleanup: remove many unused-parameter warnings from tests and stubs,194,data/crawl/squid/patch_8.diff
https://github.com/squid-cache/squid/commit/37cb257b0ca7224c1b556c205f2a9c25a2acc1a3,08 Jul 2017,Validate mime icon URL before allocating store entries,10,data/crawl/squid/patch_9.diff
https://github.com/squid-cache/squid/commit/9e167fa2396d9469017d2ff4c5a3ded5a5b58317,18 Jun 2017,"Cleanup: remove many whitespace typos

... caught by astyle 2.06 but ignored by 2.04",158,data/crawl/squid/patch_10.diff
https://github.com/squid-cache/squid/commit/52af54dd4e55d9241339d3851c92191463ef4524,17 Jun 2017,SourceFormat Enforcement,160,data/crawl/squid/patch_11.diff
https://github.com/squid-cache/squid/commit/4eac3407573794dec7f40816dc1f1f3139c2e63e,12 Jun 2017,"Support for --long-acl-options

The old single-letter ACL ""flags"" code was refactored to support long option
names (with option-specific value types) without significant
per-ACL-object performance/RAM overheads and without creating a global
registry for all possible options. This refactoring (unexpectedly)
resulted in removal of a lot of unreliable static initialization code.

Refactoring fixed ACL flags parsing code that was dangerously misinterpreting
-i and +i flags in several contexts. For example, each of the three cases
below was misinterpreted as if three domains were configured (e.g., ""+i"",
""-z"", and ""example.com"") on each line instead of one domain (""example.com""):

        acl parsedAsThreeDomains dstdomain +i -i .example.com
        acl parsedAsThreeDomains dstdomain -i +i .example.com
        acl parsedAsThreeDomains dstdomain +i -z .example.com

TODO: Finish ACL::clone() removal. Then consider removing any unused
ACLData::clone() and associated ACL/ACLData copying methods.

This is a Measurement Factory project.",2858,data/crawl/squid/patch_12.diff
https://github.com/squid-cache/squid/commit/89d897e150e431e130d6e9710834b4e475411068,07 Jun 2017,"Improve config parsing of logformat definitions

Squid has for some time ignored custom definitions using the same name
as internally defined formats. And overwritten custom formats when there
was a repeated definition.

* Detect logformat duplicates and produce ERROR message indicating the
  format name, config line and action taken.

* Add some missing FATAL labels on parse abort when access_log has
  multiple logformat= options configured.

* Add missing FATAL error message when logformat lines has no name
  parameter (and thus no tokens either).

* Omit the default ""logformat=squid"" option from cachemgr config dumps.",26,data/crawl/squid/patch_13.diff
https://github.com/squid-cache/squid/commit/dcaa51f413ef42f3bad0504c91c15baa358f107d,29 May 2017,"Add OpenSSL library details to -v output

This is partially to meet the OpenSSL copyright requirement that binaries
mention when they are using the library, and partially for admin to see
which library their Squid is using when multiple are present in the system.",4,data/crawl/squid/patch_14.diff
https://github.com/squid-cache/squid/commit/e99fa721fc2a16026d284336fabe66db4518c3e5,23 May 2017,"Make PID file check/creation atomic to avoid associated race conditions.

After this change, if N Squid instances are concurrently started shortly
after time TS, then exactly one Squid instance (X) will run (and have
the corresponding PID file). If another Squid instance has already been
running (with the corresponding PID file) at TS, then X will be that
""old"" Squid instance. If no Squid instances were running at TS, then X
will be one of those new N Squids started after TS.

Lack of atomic PID file operations caused unexpected Squid behavior:
* Mismatch between started Squid instance and stored PID file.
* Unexpected crashes due to failed allocation of shared resources,
  such as listening TCP ports or shared memory segments.

A new File class guarantees atomic PID file operations using locks. We
tried to generalize/reuse Ssl::Lock from the certificate generation
helper, but that was a bad idea: Helpers cannot use a lot of Squid code
(e.g., debugs(), TextException, SBuf, and enter_suid()), and the old
Ssl::Lock class cannot support shared locking without a major rewrite.

File locks on Solaris cannot work well (see bug #4212 comment #14), but
those problems do not affect PID file management code. Solaris- and
Windows-specific File code has not been tested and may not build.

Failure to write a PID file is now fatal. It used to be fatal only when
Squid was started with the -C command line option. In the increasingly
SMP world, running without a PID file leads to difficult-to-triage
errors. An admin who does not care about PID files should disable them.

Squid now exits with a non-zero error code if another Squid is running.


Also removed PID file rewriting during reconfiguration in non-daemon
mode. Squid daemons do not support PID file reconfiguration since trunk
r13867, but that revision (accidentally?) left behind half-broken
reconfiguration code for non-daemon mode. Fixing that code is difficult,
and supporting PID reconfigure in non-daemons is probably unnecessary.

Also fixed ""is Squid running?"" check when kill(0) does not have
permissions to signal the other instance. This does happen when Squid is
started (e.g., on the command line) by a different user than the user
Squid normally runs as or, perhaps, when the other Squid instance enters
a privileged section at the time of the check (untested). The bug could
result in undelivered signals or multiple running Squid instances.

These changes do not alter partially broken enter/leave_suid() behavior
of main.cc. That old code will need to be fixed separately!

PID file-related cache.log messages have changed slightly to improve
consistency with other DBG_IMPORTANT messages and to simplify code.
Squid no longer lies about creating a non-configured PID file. TODO:
Consider lowering the importance of these benign/boring messages.


* Terminal errors should throw instead of calling exit()

Squid used to call exit() in many PID-related error cases. Using exit()
as an error handling mechanism creates several problems:

1. exit() does not unwind the stack, possibly executing atexit()
   handlers in the wrong (e.g., privileged) context, possibly leaving
   some RAII-controller resources in bad state, and complicating triage;
2. Using exit() complicates code by adding a yet another error handling
   mechanism to the (appropriate) exceptions and assertions.
3. Spreading exit() calls around the code obscures unreachable code
   areas, complicates unifying exit codes, and confuses code checkers.

Long-term, it is best to use exceptions for nearly all error handling.
Reaching that goal will take time, but we can and should move in that
direction: The adjusted SquidMainSafe() treats exceptions as fatal
errors, without dumping core or assuming that no exception can reach
SquidMainSafe() on purpose. This trivial-looking change significantly
simplified (and otherwise improved) PID-file handling code!

The fatal()-related code suffers from similar (and other) problems, but
we did not need to touch it.

TODO: Audit catch(...) and exit() cases [in main.cc] to take advantage
of the new SquidMainSafe() code supporting the throw-on-errors approach.",1038,data/crawl/squid/patch_15.diff
https://github.com/squid-cache/squid/commit/0ce8e93bd91ba176e1f27087a9e5ed6481e7d24a,12 Apr 2017,"Count failures and use peer-specific connect timeouts when tunneling.

Fixed two bugs with tunneling CONNECT requests (or equivalent traffic)
through a cache_peer:

1. Not detecting dead cache_peers due to missing code to count peer
   connect failures. TLS/SSL-level failures were detected (for ""tls""
   cache_peers) but TCP/IP connect(2) failures were not (for all peers).

2. Origin server connect_timeout used instead of peer_connect_timeout or
   a peer-specific connect-timeout=N (where configured).

The regular forwarding code path does not have the above bugs. This
change reduces code duplication across the two code paths (that
duplication probably caused these bugs in the first place), but a lot
more work is needed in that direction.

The 5-second forwarding timeout hack has been in Squid since
forward_timeout inception (r6733). It is not without problems (now
marked with an XXX), but I left it as is to avoid opening another
Pandora box. The hack now applies to the tunneling code path as well.",194,data/crawl/squid/patch_16.diff
https://github.com/squid-cache/squid/commit/90be6ff518647d4980ad6b725b1279da082cc7ee,23 Mar 2017,"Fix appending Http::HdrType::VIA code duplication

... resolving Via header truncation at 1024 bytes.

Also fixes the generated Via values for non-HTTP protocols.",63,data/crawl/squid/patch_17.diff
https://github.com/squid-cache/squid/commit/5d3aafbed3edd9d4cc50d9f276010c51c6b942fe,20 Feb 2017,Sync with v5 rev.15058,1995,data/crawl/squid/patch_18.diff
https://github.com/squid-cache/squid/commit/b27668ec6cfce0b56ca6d8ef4b887207f4ecc6b7,19 Feb 2017,"Add response delay pools feature for Squid-to-client speed limiting.

The feature restricts Squid-to-client bandwidth only.  It applies to
both cache hits and misses.

  * Rationale *

  This may be useful for specific response(s) bandwidth limiting.
  There are situations when doing this is hardly possible
  (or impossible) by means of netfilter/iptables operating with
  TCP/IP packets and IP addresses information for filtering. In other
  words, sometimes it is problematic to 'extract' a single response from
  TCP/IP data flow at system level. For example, a single Squid-to-client
  TCP connection can transmit multiple responses (persistent connections,
  pipelining or HTTP/2 connection multiplexing) or be encrypted
  (HTTPS proxy mode).

  * Description *

  When Squid starts delivering the final HTTP response to a client,
  Squid checks response_delay_pool_access rules (supporting fast ACLs
  only), in the order they were declared. The first rule with a
  matching ACL wins.  If (and only if) an ""allow"" rule won, Squid
  assigns the response to the corresponding named delay pool.

  If a response is assigned to a delay pool, the response becomes
  subject to the configured bucket and aggregate bandwidth limits of
  that pool, similar to the current ""class 2"" server-side delay pools,
  but with a brand new, dedicated ""individual"" filled bucket assigned to
  the matched response.

  The new feature serves the same purpose as the existing client-side
  pools: both features limit Squid-to-client bandwidth. Their common
  interface was placed into a new base BandwidthBucket class.  The
  difference is that client-side pools do not aggregate clients and
  always use one bucket per client IP. It is possible that a response
  becomes a subject of both these pools. In such situations only matched
  response delay pool will be used for Squid-to-client speed limiting.

  * Limitations *

  The accurate SMP support (with the aggregate bucket shared among
  workers) is outside this patch scope. In SMP configurations,
  Squid should automatically divide the aggregate_speed_limit and
  max_aggregate_size values among the configured number of Squid
  workers. 

  * Also: *

  Fixed ClientDelayConfig which did not perform cleanup on
  destruction, causing memory problems detected by Valgrind. It was not
  possible to fix this with minimal changes because of linker problems
  with SquidConfig while checking with test-builds.sh. So I had
  to refactor ClientDelayConfig module, separating configuration code
  (old ClientDelayConfig class) from configured data (a new
  ClientDelayPools class) and minimizing dependencies with SquidConfig.",1109,data/crawl/squid/patch_19.diff
https://github.com/squid-cache/squid/commit/b5db97e7aa415bd1630a7d47d59d7ea88aa0d17b,14 Feb 2017,"Fix memory leak and parse handling error introduced by r15024.

* Do not leak Note::Value::Value::valueFormat.
* Throw if annotation value parsing failures.

Detected by Coverity Scan:
 * CID 1399758:  Error handling issues (CHECKED_RETURN)
 * CID 1399759:  Resource leaks (CTOR_DTOR_LEAK)",8,data/crawl/squid/patch_20.diff
https://github.com/squid-cache/squid/commit/46e791c629e44630fe6e1df32bb0d73f10b1299d,08 Feb 2017,"digest_ldap_auth: Add -r option to clamp the realm to a fixed value

Some historic Digest Auth implementations do not include the realm in the
digest password attribute. The password is effectively stored as ""HA1""
instead of ""REALM:HA1"".

The realm cannot simply be ignored due to:
 1) the realm is both the salting value used within the hash and the
scope limitation on what inputs from HTTP are used to compare against
the A1, and
 2) Squid does not itself verify the realm received was the one offered
and leaves the comparison to the backend system. There is some
possibility the authentication system is using multiple security realms
and Squids realm string is just an offer.


Not having realm tied to the credentials in the backend storage leaves
this particular helper with no other option but to trust the realm sent
(probably) over clear-text by any client/attacker actually matches the
salting. That allows remote senders to manipulate the realm string they
send to perform a collision attack against the stored password.
 They no longer have to find and prove knowledge of the password. But
just find a collision for its hash vs arbitrary realm strings.

Old Digest systems are not the safest things to begin with. They also
tend to use MD5 hashing which was the only one available for many years
and relatively easy to find collisions for.


To resolve all these problems allow the -l parameter to accept an empty
string ('-l """" ') when the -r option provides a fixed realm.

Also, fix several typos in the help text.",25,data/crawl/squid/patch_21.diff
https://github.com/squid-cache/squid/commit/40fc161851f5809741ddb4774e7c366d23323a97,05 Feb 2017,Sync from v5 r15034,2231,data/crawl/squid/patch_22.diff
https://github.com/squid-cache/squid/commit/3f5b28fe18637452647d7000a0ac21103f8b660e,05 Feb 2017,"Crypto-NG: initial GnuTLS support for encrypted server connections

Make significant changes to how the options= config settings are
handled internally since GnuTLS does not expose the priority_t
implementation details like OpenSSL. They are also applied to the
session object instead of to the context.

The Security::SessionPointer is converted to std::shared_ptr. This is
required because GnuTLS does not expose the locking like OpenSSL. Since
we store the SessionPointer to fde::Table::ssl we can always access it
from there one way or another and there is actually no need for OpenSSL
locking sessions now.

Most of the remaining session lifecycle logic is moved to
security/Session.* and given a generic API. Only some client-connection
and SSL-Bump related setup remains in ssl/.

A fair amount more debug is added along with some text changes doing
s/SSL/TLS/ in code comments and debug outputs.",780,data/crawl/squid/patch_23.diff
https://github.com/squid-cache/squid/commit/6f9a30f86fd6046d371dbdeab23a2781219f0a04,30 Jan 2017,"Fix Auth::UserRequest::denyMessage() misuse.

This method was improperly used in contexts where actually
Auth::UserRequest::setDenyMessage() expected. Probably the reason was
that both denyMessage() and getDenyMessage() were not constant,
provoking such 'misuse'.

Also placed some common code into UserRequest::denyMessageFromHelper(),
eliminating code duplication. Though there are still many places
where code is duplicated inside auth/ntlm/UserRequest.cc and
auth/negotiate/UserRequest.cc.",69,data/crawl/squid/patch_24.diff
https://github.com/squid-cache/squid/commit/75d473407acdbf2d79f7a49b4d98083b95b83b9a,30 Jan 2017,"author: Eduard Bagdasaryan <eduard.bagdasaryan@measurement-factory.com>
Two new ACLs implemented: annotate_transaction and annotate_client.

Both ACLs always match and are useful for their side effect, immediately
adding a key-value pair to the current transaction annotation
(annotate_transaction) or to the current client-to-Squid connection
annotation (annotate_client).  Connection annotations are propagated to
the current and all future master transactions on the annotated
connection. Before this patch only 'clt_conn_tag' annotation tag could
be used for a connection annotation.

To reuse the existing notes parsing code, I had to refactor Note, Notes
and NotePairs classes:

* Made data members private and adjusted to follow 'rule of three'.
  Having public assess to containers with pointers may cause memory
  problems: for example ExternalACLEntry::update() called directly
  notes.entries.clear() without deleting the pointers.
* None-fatal check for 'special' characters inside note name.
* Used SBufs instead of Strings and const char* where possible.
* Adjusted ACLNoteStrategy::matchNotes() to avoid 'expanding quoted values'
  code duplication inside

Also fixed acl quoted flag parameters syntax. The old code improperly
required quoting both flag and its parameter, e.g., ""-m= ,"" whereas
only parameter should be quoted: -m="" ,"".

Also moved UpdateRequestNotes() from Notes.cc to HttpRequest.cc to
resolve dependency problems while bulding unit tests.

TODO: transaction annotation matching code (ACLNoteData) performs
parsing in its own way, using ACLStringData::parse(), lacking special
characters/reserved keywords checks. Consider reusing the existing
Notes parsing code instead.",999,data/crawl/squid/patch_25.diff
https://github.com/squid-cache/squid/commit/b58d2a22b31ec12c7070dfca849359bb726a1f12,24 Jan 2017,Cleanup: convert Delay Pool classes to MEMPROXY,328,data/crawl/squid/patch_26.diff
https://github.com/squid-cache/squid/commit/194ccc9c4c16a5a2f282aa47ed8b4b6060ebb0f8,11 Jan 2017,"External ACL helpers error handling & caching

The helper protocol for external ACLs [1] defines three possible return values:
   OK - Success. ACL test matches.
   ERR - Success. ACL test fails to match.
   BH - Failure. The helper encountered a problem.

The external acl helpers distributed with squid currently doesn't follow this
definition. For example, upon connection error, ERR is returned:

   $ ext_ldap_group_acl ... -d
   ext_ldap_group_acl: WARNING: could not bind to binddn 'Can't contact LDAP server'
   ERR

 This is does not allow to distinguish ""no match"" and ""error"" either and
therefore negative caches ""ERR"", also in the case of an error.

Moreover there are multiple problems inside squid when trying to handle BH
responses:
  - Squid-5 and squid-4 retries requests for BH responses but crashes after the
    maximum retry number (currently 2) is reached.
  - If an external acl helper return always BH (eg because the LDAP server is
    down) squid sends infinitely new request to the helper.

This is a Measurement Factory project",173,data/crawl/squid/patch_27.diff
https://github.com/squid-cache/squid/commit/9d52ba1165dfa797b4fe688b49f0c10dc98e25a5,11 Jan 2017,"Reduce crashes due to unexpected ClientHttpRequest termination.

The underlying problem has been known since r13480: If a
ClientHttpRequest job ends without Http::Stream (and ConnStateData)
knowledge, then Squid is likely to segfault or assert. This patch does
not resolve the underlying issue (a proper fix would require
architectural changes in a consensus-lacking area) but makes an
unexpected ClientHttpRequest job destruction less likely.

BodyPipe and Adaptation-related exceptions are the major causes of
unexpected ClientHttpRequest job destruction. This patch handles them by
closing the client connection. Connection closure should trigger an
orderly top-down cleanup, including Http::Stream, ConnStateData, and
ClientHttpRequest destruction.

If there is no connection to close, then the exception is essentially
ignored with a level-1 error message disclosing the problem. The side
effects of ignoring such exceptions are unknown, but without a client
connection, it is our hope that they would be relatively benign.

This is a Measurement Factory project.",16,data/crawl/squid/patch_28.diff
https://github.com/squid-cache/squid/commit/912864c28eac63534ad0d0615cac8f665f219b94,08 Jan 2017,"Cleanup: remove ip/Qos.cci file

... moving its content to ip/QosConfig.cc

Also, move the stub file to src/tests/stub_libip.cc and update to use
tests/STUB.h interface.",404,data/crawl/squid/patch_29.diff
https://github.com/squid-cache/squid/commit/11e14d639b6979de936aad35a04be4cf82c6519b,03 Jan 2017,"Tests: shuffle libmem Pool unit test to src/

Refactor for cppunit framework instead of custom code.

Duplicate the basic create-free-realloc cycle test for both Pool and MemProxy
but do not add missing tests for other API calls at this time.",190,data/crawl/squid/patch_30.diff
https://github.com/squid-cache/squid/commit/cc488ec94560163ed6ee80f11077ee234cad657c,24 Dec 2016,"GnuTLS support for options= parameters

Use new Pointer to store PeerOptions::parsedOptions.

Migrate OpenSSL options= logic into libsecurity

Also, some API polishing for PeerOptions API.",166,data/crawl/squid/patch_31.diff
https://github.com/squid-cache/squid/commit/c9902d22e2c2d0df3c70a9d4f72c3d14a472c18b,22 Dec 2016,Merged from v5 r14984,1701,data/crawl/squid/patch_32.diff
https://github.com/squid-cache/squid/commit/50ad1e256824307b27dae0fbb078d65df8e2f816,21 Dec 2016,"Cleanup: Refactor libauth Config object(s)

Refactoring the Auth::Config objects to get v5 building again.

The object storing auth_param settings is renamed to SchemeConfig.

A new Auth::Config object is added. The objects holding auth_param,
auth_schemes and other authenticate_* directives settings are stored
there instead of just auth_params.

Lots of outdated doxygen docs that have more up to date copies elsewhere
are removed. The ""\ingroup AuthAPI"" are left for now since some auth
things are not yet in the Auth:: namespace, but other auth related
groups are dropped completely.

Code parsing and dumping auth_param lines has been de-duplicated. Along
with the keep_alive and utf8 settings, which are shared by multiple
schemes. This allows dropping several virtual methods from NTLM and
Negotiate scheme objects.

An auth/forward.h file is added for predefines. Some initial Auth::
symbols are listed there. It is not complete, but others can be added as
needed later.

Some unnecessary includes have been removed. There are probably more. I
just did the obvious ones related to the new auth/forward.h and
auth/Config.h files at this time.",1335,data/crawl/squid/patch_33.diff
https://github.com/squid-cache/squid/commit/644b0587cc6495cfabfcba76243a71dca0e1a20c,20 Dec 2016,Fix shadowing of member 'type' in SchemeConfig,14,data/crawl/squid/patch_34.diff
https://github.com/squid-cache/squid/commit/b2b09838674dab260d6727026697da81afee70b4,20 Dec 2016,De-duplicate shared auth parameters keep_alive and utf8,144,data/crawl/squid/patch_35.diff
https://github.com/squid-cache/squid/commit/5bfc3dbd3b2f44d27b807a36ae94e063778e018a,10 Dec 2016,"Added auth_schemes to control schemes presence and order in 401s/407s.

The new squid.conf directive may be used to customize authentication
schemes presence and order in Squid's HTTP 401 (Unauthorized) and 407
(Proxy Authentication Required) responses. The defaults remain the same.",235,data/crawl/squid/patch_36.diff
https://github.com/squid-cache/squid/commit/ba6fffba7bbad6c0efcb9613b16aa97573ee7ef0,08 Dec 2016,"Cleanup: Refactor custom ACL-controlled actions configuration code.

* Reduced parsing code duplication by adding ParseAclWithAction().

* Used functors for generic action-to-string conversions. It is possible
  now to perform such conversions providing lambda expressions.

* Used vectors of strings instead of C-style arrays for storing
  conversion tables and check against bounds with vector::at().",159,data/crawl/squid/patch_37.diff
https://github.com/squid-cache/squid/commit/566186f36ece0c1d05bfbb459e36751487453522,03 Dec 2016,Merged from v5.0.0-r14964,5537,data/crawl/squid/patch_38.diff
https://github.com/squid-cache/squid/commit/10f906a16b4c82ce2d0711af8b961145c51b5493,30 Nov 2016,Merge from trunk,501,data/crawl/squid/patch_39.diff
https://github.com/squid-cache/squid/commit/c2afddd8f98c17c7a9e03d504b97847065d744e1,30 Nov 2016,"Revert C++11 std::regex changes

CentOS 7 (and thus probably also RHEL 7) still have difficulty using
GCC 5+ compiler necessary for this C++11 code to be used reliably.

see http://lists.squid-cache.org/pipermail/squid-dev/2015-July/002884.html",5399,data/crawl/squid/patch_40.diff
https://github.com/squid-cache/squid/commit/e0cf4700c8534f5b0d8787bc8159921a4f0a9a83,26 Nov 2016,Merged from v5 r14954,7617,data/crawl/squid/patch_41.diff
https://github.com/squid-cache/squid/commit/c438bcf10742e773a8e602a398c884ea54080336,20 Nov 2016,"C++11: Remove GnuRegex and all -lregex related code

Squid is now exclusively using the STL std::regex API provided on all
operating systems in a portable manner.

We no longer have any need of detecting if the system is providing a
libregex, or user has configured one, or if it actually works, or how
to call it, or use the GnuRegex code as a backup when one of those
complex details goes wrong.",5393,data/crawl/squid/patch_42.diff
https://github.com/squid-cache/squid/commit/ea5746353c1e72f8f59c0d08906a3d90400b0dac,18 Nov 2016,"TLS: Add ErrorString() function to libsecurity API

To convert library error codes to strings in a library agnostic way.",108,data/crawl/squid/patch_43.diff
https://github.com/squid-cache/squid/commit/ef143ddc67151d2f8e7b466bbf091fc837701027,11 Nov 2016,"Segfault via Ftp::Client::readControlReply.

Added nil dereference checks for Ftp::Client::ctrl.conn, including:
- Ftp::Client::handlePasvReply() and handleEpsvReply() that dereference
  ctrl.conn in DBG_IMPORTANT messages.
- Many functions inside FtpClient.cc and FtpGateway.cc files.

TODO: We need to find a better way to handle nil ctrl.conn. It is only
a matter of time when we forget to add another dereference check or
discover a place we missed during this change.

Also disabled forwarding of EPRT and PORT commands to origin servers.
Squid support for those commands is broken and their forwarding may
cause segfaults (bug #4004). Active FTP is still supported, of course.

This is a Measurement Factory project",53,data/crawl/squid/patch_44.diff
https://github.com/squid-cache/squid/commit/28e1d824b2709692b463f590f8e3fd4d6b944652,08 Nov 2016,Make key= before cert= a fatal error instead of quietly hiding the issue,2,data/crawl/squid/patch_45.diff
https://github.com/squid-cache/squid/commit/6b2b6cfe1e9e1f1fbf2b310f9c28532f1c70e00c,04 Nov 2016,"Support tunneling of bumped non-HTTP traffic. Other SslBump fixes.

Use case: Skype groups appear to use TLS-encrypted MSNP protocol instead
of HTTPS. This change allows Squid admins using SslBump to tunnel Skype
groups and similar non-HTTP traffic bytes via ""on_unsupported_protocol
tunnel all"". Previously, the combination resulted in encrypted HTTP 400
(Bad Request) messages sent to the client (that does not speak HTTP).

Also this patch:
 * fixes bug 4529: !EBIT_TEST(entry->flags, ENTRY_FWD_HDR_WAIT)
   assertion in FwdState.cc.

 * when splicing transparent connections during SslBump step1, avoid
   access-logging an extra record and log %ssl::bump_mode as the expected
   ""splice"" not ""none"".

 * handles an XXX comment inside clientTunnelOnError for possible memory
   leak of client streams related objects

 * fixes TunnelStateData logging in the case of splicing after peek.

This is a Measurement Factory project.",574,data/crawl/squid/patch_46.diff
https://github.com/squid-cache/squid/commit/a5f27c62b2b25ba7e492f0148e199d91984a8861,01 Nov 2016,"Cleanup: replace cachemgr_passwd with SBufList

Remove one more use of wordlist in favour of SBufList

Also, updates the debug warning during config parse to
use the quieter PARSE_NOTE macro.",71,data/crawl/squid/patch_47.diff
https://github.com/squid-cache/squid/commit/65308288f0c865498ea5c729b2137bc2216faca9,30 Oct 2016,"Bug 4627: fix generate-host-certificates and dynamic_cert_mem_cache_size defaults

For Squid-4 and later make these options actually do what has been documented.
Which is to generate by default with a 4MB cache.",12,data/crawl/squid/patch_48.diff
https://github.com/squid-cache/squid/commit/83f8d8f97118e1cae98c2c434e6643e04d1be113,11 Sep 2016,"Move Ssl::Errors to libsecurity

Convert to an STL set instead of CBDATA list:
* The list is not passed as a callback parameter, so CBDATA overheads are
  unnecessary.
* STL set has built-in unique entry protection, so special
  push_back_unique handling is not required. Just emplace() entries.
* STL unorderd_set is used for fast lookup property. This should operate
  faster on medium or larger sized ACL lists than CbDataList type could.",110,data/crawl/squid/patch_49.diff
https://github.com/squid-cache/squid/commit/fc10bc7dfd9d86e25804dbe9c90146054465b218,19 Aug 2016,"Do not log error:transaction-end-before-headers after invalid requests.

Squid was not consuming read leftovers after failing to parse a request.
Starting with r14752, those leftovers were misinterpreted as another
unparsed request, creating an extra error:transaction-end-before-headers
access.log line after every error:invalid-request line (and probably
after every error:request-too-large line).

To stop Squid from accidentally reading new bytes and misinterpreting
them as another request, I was tempted to also clear flags.readMore
after consuming unparsable leftovers. In my tests, the flag is cleared
in ConnStateData::quitAfterError() called from clientTunnelOnError(),
but that logic looks rather fragile. I resisted the temptation to
improve it because controlling reads is a complicated matter (especially
in on_unsupported_protocol context) outside this logging fix scope.",12,data/crawl/squid/patch_50.diff
https://github.com/squid-cache/squid/commit/d31d59d80a8ef8a2b85058fe6504188e43cee5ce,17 Aug 2016,"Better support for unknown URL schemes

Squid already contains AnyP::PROTO_UNKNOWN support for unknown protocols
but currently does not preserve the actual string value received for them.

This adds a textual representation ('image') to the UriScheme object to
fill that gap and ensure that all URL representations (ie cache keys,
logs and outgoing messages) are generated with the scheme string as it
was received rather than implicitly via a registered protocol type.

Future work:
* add ACL support for arbitrary scheme names
* support for comparisons of unknown schemes",194,data/crawl/squid/patch_51.diff
https://github.com/squid-cache/squid/commit/6082a0e2e301e4d4a731fe82948eb196585499b2,13 Aug 2016,"Make Squid death due to overloaded helpers optional.

Added on-persistent-overload=action option to helpers. Helper overload
is defined as running with an overflowing queue. Persistent helper
overload is [still] defined as being overloaded for more than 3 minutes.

The default behavior is unchanged(*) -- Squid worker dies with a fatal
error at the attempt to submit a new request to a persistenly overloaded
helper. This default behavior can also be configured explicitly using
on-persistent-overload=die.

With on-persistent-overload=ERR, when dealing with a persistently
overloaded helper, Squid immediately skips the helper request and sends
an ERR response to the caller. Squid informs the admin when it starts
and when it stops skipping helper requests due to persistent overload.

The code had conflicting notions of an ""overloaded helper"". The external
ACL helper, the URL rewriter, and the store ID code used queueFull() to
test whether the new request would overflow the queue (and, hence,
overload the helper), but queueFull() itself did not check whether the
queue was full! It checked whether the queue was already overflowing.
This confusion resulted in that code scheduling one extra helper request
before enabling bypass. The code and its documentation are now more
consistent (and better match the ""overload"" terminology used by the new
configuration option, which also feels better than calling the helper
""full"").

(*) Resolving the above confusion resulted in minor (one request)
differences in the number of helper requests queued by Squid for
external ACL, URL rewriting, and store ID helpers, with the adjusted
behavior [better] matching the documentation.",327,data/crawl/squid/patch_52.diff
https://github.com/squid-cache/squid/commit/6f9f8f9d10ce1fedbd52f4362c6982d5308a9c4d,01 Aug 2016,"Fetch missing certificates

Many web servers do not have complete certificate chains. Many browsers use
certificate extensions of the server certificate and download the missing
intermediate certificates automatically from the Internet.
This patch add this feature to Squid.

The information for missing issuer certificates provided by the Authority
Information Access X509 extension. This describes the format and the location
of additional information provided by the issuer of the certificate.

This patch:
  - Implements a class Downloader as an independet AsyncJob class. This new
    class can be used by internal squid subsystems to download objects from
    the network.
  - Modify Ssl::PeerConnector class to use new Downloader class to
    retrieve missing certificates from the net. The URIs of missing
    certificates from the Authority Information Access X509 extension.
  - Implements a new basic certificates parser based on openSSL for the
    TLS handshake messages parser.
  - Modify the Ssl::ServerBio class to:
     * Buffer the Server Hello message and not pass it to the openSSL library
       until downloading missing certificates, if any, is finished.
     * Extract server certificates from server hello message.
       This is required to check if there are missing certificates, and if yes
       give the chance to squid to download missing certificates and complete
       certificate chains before pass them for processing to openSSL

TODO:
  - Add support for certs-only CMS message.
    From  RFC 4325:
    ""Where the information is available via HTTP or FTP, accessLocation
    MUST be a uniformResourceIdentifier and the URI MUST point to either
    a single DER encoded certificate as specified in [RFC2585] or a
    collection of certificates in a BER or DER encoded ""certs-only"" CMS
    message as specified in [RFC2797]. ""
    ...
    ""Conforming applications that support HTTP or FTP for accessing
    certificates MUST be able to accept individual DER encoded
    certificates and SHOULD be able to accept ""certs-only"" CMS messages.""

This is a Measurement Factory project",808,data/crawl/squid/patch_53.diff
https://github.com/squid-cache/squid/commit/212e5aee4a29820cbdb0cab6dc98ba4e8b4ba3c4,01 Aug 2016,merge from trunk-r14768,3260,data/crawl/squid/patch_54.diff
https://github.com/squid-cache/squid/commit/ae3ac744d5c7682da3cae796ba2f0fa204cc494d,27 Jul 2016,TLS: do not hang when 'connector' fails,2,data/crawl/squid/patch_55.diff
https://github.com/squid-cache/squid/commit/1a210de4cfe348c315f1334f4303ee73a45ef7cf,23 Jul 2016,"Collapse internal revalidation requests (SMP-unaware caches).

... also address Bug 4311 and partially address Bug 2833 and Bug 4471.

Extend collapsed_forwarding functionality to internal revalidation
requests. This implementation does not support Vary-controlled cache
objects and is limited to SMP-unaware caching environments, where each
Squid worker knows nothing about requests and caches handled by other
workers. However, it also lays critical groundwork for future SMP-aware
collapsed revalidation support.

Prior to these changes, multiple concurrent HTTP requests for the same
stale cached object always resulted in multiple internal revalidation
requests sent by Squid to the origin server. Those internal requests
were likely to result in multiple competing Squid cache updates, causing
cache misses and/or more internal revalidation requests, negating
collapsed forwarding savings.

Internal cache revalidation requests are collapsed if and only if
collapsed_forwarding is enabled. There is no option to control just
revalidation collapsing because there is no known use case for it.

* Public revalidation keys

Each Store entry has a unique key. Keys are used to find entries in the
Store (both already cached/swapped_out entries and not). Public keys are
normally tied to the request method and target URI. Same request
properties normally lead to the same public key, making cache hits
possible. If we were to calculate a public key for an internal
revalidation request, it would have been the same as the public key of
the stale cache entry being revalidated. Adding a revalidation response
to Store would have purged that being-revalidated cached entry, even if
the revalidation response itself was not cachable.

To avoid purging being-revalidated cached entries, the old code used
private keys for internal revalidation requests. Private keys are always
unique and cannot accidentally purge a public entry. On the other hand,
for concurrent [revalidation] requests to find the store entry to
collapse on, that store entry has to have a public key!

We resolved this conflict by adding ""scope"" to public keys:

* Regular/old public keys have default empty scope (that does not affect
  key generation). The code not dealing with collapsed revalidation
  continues to work as before. All entries stored in caches continue to
  have the same keys (with an empty scope).

* When collapsed forwarding is enabled, collapsable internal
  revalidation requests get public keys with a ""revalidation"" scope
  (that is fed to the MD5 hash when the key is generated). Such a
  revalidation request can find a matching store entry created by
  another revalidation request (and collapse on it), but cannot clash
  with the entry being revalidated (because that entry key is using a
  different [empty] scope).

This change not only enables collapsing of internal revalidation
requests within one worker, but opens the way for SMP-aware workers to
share information about collapsed revalidation requests, similar to how
those workers already share information about being-swapped-out cache
entries.


After receiving the revalidation response, each collapsed revalidation
request may call updateOnNotModified() to update the stale entry [with
the same revalidation response!]. Concurrent entry updates would have
wasted many resources, especially for disk-cached entries that support
header updates, and may have purged being-revalidated entries due to
locking conflicts among updating transactions. To minimize these
problems, we adjusted header and entry metadata updating logic to skip
the update if nothing have changed since the last update.


Also fixed Bug 4311: Collapsed forwarding deadlocks for SMP Squids using
SMP-unaware caches. Collapsed transactions stalled without getting a
response because they were waiting for the shared ""transients"" table
updates. The table was created by Store::Controller but then abandoned (not
updated) by SMP-unaware caches. Now, the transients table is not created
at all unless SMP-aware caches are present. This fix should also address
complaints about shared memory being used for Squid instances without
SMP-aware caches.

A combination of SMP-aware and SMP-unaware caches is still not supported
and is likely to stall collapsed transactions if they are enabled. Note
that, by default, the memory cache is SMP-aware in SMP environments.",437,data/crawl/squid/patch_56.diff
https://github.com/squid-cache/squid/commit/7b2b7ef6c34410187888add4f9cb1cb0b530d001,22 Jul 2016,Add stub for log/liblog symbols,94,data/crawl/squid/patch_57.diff
https://github.com/squid-cache/squid/commit/831e953c433124a8e8313e3fc585fee186f742bd,12 Jul 2016,Bug 4534: assertion failure in xcalloc when using many cache_dir,183,data/crawl/squid/patch_58.diff
https://github.com/squid-cache/squid/commit/e054c12658b290b2983db7551ae9a2ea1046460b,07 Jul 2016,Merged from trunk rev.14734,291,data/crawl/squid/patch_59.diff
https://github.com/squid-cache/squid/commit/6041eef8b5ce201e1e4795834f364953198642a0,07 Jul 2016,Sync with trunk r14734,1405,data/crawl/squid/patch_60.diff
https://github.com/squid-cache/squid/commit/942b1c39a7fa75d6d440d2550c00ea0213f54f25,02 Jul 2016,Bug 4540: revert r14720 buffer update,58,data/crawl/squid/patch_61.diff
https://github.com/squid-cache/squid/commit/49b3227bb88a0860f1589322cc5f8c05256a6015,26 Jun 2016,Merged from trunk rev.14721,202,data/crawl/squid/patch_62.diff
https://github.com/squid-cache/squid/commit/4dc4090b6f49b4f85f9edb27c550f7341f1f966e,24 Jun 2016,"Convert Http::Stream::reqbuf to a MemBlob, making it configurable at runtime.

This also makes many other auxilary changes:

 * Increases the size of Http::Stream::requestBuffer to match that of
   read_ahead_gap. Previously this was a 4kb fixed size buffer. As a result,
   the overhead for a single client connection has been increased by 12 KB in
   the default configuration, but Squid will no longer artifically slow down
   client responses in this situation by fragmenting the read(2)/write(2)
   calls.

 * Improves the performance of large uncacheable replies. This was achieved by
   increasing the buffer size to 16 KB as mentioned above, but it is worth
   mentioning separately. Specifically, for a server, client and proxy all
   running on my local machine, this patch increases throughput on a 5 GB file
   from ~110 MB/s to ~340 MB/s.

 * Documents the influence that read_ahead_gap had on the size of read(2) calls
   for HTTP, and now the size of write(2) calls.

 * Prevent read_ahead_gap from being set to 0. Previously this would result in
   hung requests.

This work is submitted on behalf of Bloomberg L.P.",58,data/crawl/squid/patch_63.diff
https://github.com/squid-cache/squid/commit/35e4c35ab49740eb5500336e2146ed9be3f69e93,23 Jun 2016,Sync with trunk rev.14719,1054,data/crawl/squid/patch_64.diff
https://github.com/squid-cache/squid/commit/c75aba0236b968dc5d4c60597f3351b0704a2b69,02 Jun 2016,"CryptoNG: cleanup TLS/SSL context initialization sequence

The libsecurity ServerOptions and PeerOptions class methods are now
supposed to be the API for creating SSL contexts for https_port,
cache_peer and outgoing connections.

Continue the API transition by making the callers of sslCreate*Context()
functions use the libsecurity API instead and repurpose the now obsolete
functions into the Ssl:: namespace to initialize the keying material and
other not-yet-converted OpenSSL state details of an existing context.

A side effect of this is that GnuTLS contexts are now actually created
and initialized as far as they can be.

SSL-Bump context initialization is not altered by this.",83,data/crawl/squid/patch_65.diff
https://github.com/squid-cache/squid/commit/f71f64024ca83eeb24db9ef0dc2204a093fcb7b4,26 May 2016,Merge from trunk rev.14687,4513,data/crawl/squid/patch_66.diff
https://github.com/squid-cache/squid/commit/0bffe3cec1400f4d69724552e77e77878defd8a3,23 May 2016,"Sync with trunk-r14686

- Replaces with newer versions of BinaryTokenizer and HandshakeParser classes
- Modifications to use latest Handshake parser from trunk.
- Get HandshakeParser::serverCertificates, HandshakeParser::parseServerCertificates and HandshakeParser::ParseCertificate implementation from lp:fast-sni branch",6170,data/crawl/squid/patch_67.diff
https://github.com/squid-cache/squid/commit/014adac1c52c2f7dabee4cf6361dec4f4207f41a,20 May 2016,"Do not allow low-level debugging to hide important/critical messages.

Removed debugs() side effects that inadvertently resulted in some
important/critical messages logged at the wrong debugging level and,
hence, becoming invisible to the admin. The removed side effects set the
""current"" debugging level when a debugs() parameter called a function
that also called debugs(). The last nested debugs() called affected the
level of all debugs() still in progress!

Related changes:

* Reentrant debugging messages no longer clobber parent messages. Each
  debugging message is logged separately, in the natural order of
  debugs() calls that would have happened if debugs() were a function
  (that gets already evaluated arguments) and not a macro (that
  evaluates its arguments in the middle of the call). This order is
  ""natural"" because good macros work like functions from the caller
  point of view.

* Assertions hit while evaluating debugs() parameters are now logged
  instead of being lost with the being-built debugs() log line.

* 10-20% faster debugs() performance because we no longer allocate a new
  std::ostringstream buffer for the vast majority of debugs() calls.
  Only reentrant calls get a new buffer.

* Removed old_debug(), addressing an old ""needs to die"" to-do.

* Removed do_debug() that changed debugging level while testing whether
  debugging is needed. Use side-effect-free Debug::Enabled() instead.

Also removed the OutStream wrapper class. The wrapper was added in trunk
revision 13767 that promised to (but did not?) MemPool the debug output
buffers. We no longer ""new"" the buffer stream so a custom new() method
would be unused. Besides, the r13767 explanation implied that providing
a Child::new() method would somehow overwrite Parent::allocator_type,
which did not compute for me. Finally, Squid ""new""s other allocator-
enabled STL objects without overriding their new methods so either the
same problem is still there or it did not exist (or was different?).

Also removed Debug::xassert() because the debugs() assertions now work
OK without that hack.",321,data/crawl/squid/patch_68.diff
https://github.com/squid-cache/squid/commit/bea1ea3533abec08dee56cddf204a6da62052c48,18 May 2016,"Fast SNI peek

Currently, bumping peek mode at step2 and splice at step2, after the SNI is 
received is slow.
The most of the performance overhead comes from openSSL. However Squid does not
need openSSL to peek at SNI. It needs only to get client TLS Hello message
analyze it to retrieve SNI and then splice at step2.

This patch:
  - Postpone creation of the OpenSSL connection (i.e. SSL) object for the
    accepted TCP connection until after we peek at SNI (after step2).
  - Implements the Parser::BinaryTokenizer parser for extracting byte-oriented
    fields from raw input
  - Reimplement a new SSL/TLS handshake messages parser using the
    BinaryTokenizer, and remove old buggy parsing code from ssl/bio.cc
  - Adjust ConnStateData, Ssl::Bio, Ssl::PeerConnector classes to use the
    new parsers and parsing results.

This is a Measurement Factory project",2623,data/crawl/squid/patch_69.diff
https://github.com/squid-cache/squid/commit/39f6946553d9da5d2ee174448b05b8603c57006a,13 May 2016,merge from trunk-r14667,3158,data/crawl/squid/patch_70.diff
https://github.com/squid-cache/squid/commit/a804b6fe5d810d415289226ad10ef80289e83062,02 May 2016,"Finalized BinaryTokenizer context handling. Polished.

No more funny context fields inside TLS structures. Context is handled
by the parsing code without needlessly storing it long-term.

Hid TLS structures/parsers used exclusively by
Security::HandshakeParser inside security/Handshake.cc to simplify API.

Also skipped unused ServerHello.random (instead of storing it in
TlsDetails::clientRandom) and replaced SQUID_TLS_RANDOM_SIZE macro
with a regular C++ constant.",420,data/crawl/squid/patch_71.diff
https://github.com/squid-cache/squid/commit/b35bf4e58ca28895b4783eb950abc02f31e51db4,02 May 2016,"HTTP/1.1: normalize Host header

When absolute-URI is provided Host header should be ignored. However some
code still uses Host directly so normalize it using the previously
sanitized URL authority value before doing any further request processing.

For now preserve the case where Host is completely absent. That matters
to the CVE-2009-0801 protection.

This also has the desirable side effect of removing multiple or duplicate
Host header entries.",10,data/crawl/squid/patch_72.diff
https://github.com/squid-cache/squid/commit/793b1bfb48e5bd84205414497c7680c22ce0087b,30 Apr 2016,"Stop parsing SSL records after a fatal SSL Alert. 

The fatal alert sender should close the connection. Waiting for the next
record is pointless and will obscure the problem when we eventually read
the EOF on the socket.",4,data/crawl/squid/patch_73.diff
https://github.com/squid-cache/squid/commit/c3149111e45340cb60a8f3c28a418ae96e9b67e8,30 Apr 2016,"Separated BinaryTokenizer commits from context debugging. Polished.

Commits are relatively rare events specific to incremental parsing. Most
parsers are not incremental and do not commit/rollback. However, all
parsers need to debug what they parse. Thus, it was wrong to combine
commits with context debugging.

BinaryTokenizer single-context debugging did not support nested contexts
(such as Hello.version.major) and reported wrong FieldGroup sizes for
some parsed structures. The new BinaryTokenizerContext does not have
these problems and is more general (but still needs more polishing
work).

Also polished many field names, comments, debug messages, and some code.",293,data/crawl/squid/patch_74.diff
https://github.com/squid-cache/squid/commit/1f1eee3f84f3874ea982b10c6186c20d373ac6fc,16 Apr 2016,"cachemgr.cgi: use dynamic MemBuf for internal content generation

Using a fixed size buffer limits how big content lines can be. Modern
HTTP is fast reaching the point where such limits are problematic.
Also fixes incorrect uses of snprintf() by removing them.",95,data/crawl/squid/patch_75.diff
https://github.com/squid-cache/squid/commit/3bab24c08998e373d6969edfc671727f662e85ae,05 Apr 2016,Merged from trunk rev.14625,12424,data/crawl/squid/patch_76.diff
https://github.com/squid-cache/squid/commit/b69e9ffa9e2a148e2abc08511ebc5378697a7b6c,03 Apr 2016,Cleanup: remove xstrerror(),1093,data/crawl/squid/patch_77.diff
https://github.com/squid-cache/squid/commit/8f7dbf74048f3950f8931e5ea38480b5d35b641e,30 Mar 2016,Bug 4312: Support disabling collapsed forwarding SMP cooperation,46,data/crawl/squid/patch_78.diff
https://github.com/squid-cache/squid/commit/81d4498afc9e7d7d58794538ac610c1b4f3438cf,29 Mar 2016,Merged from trunk rev.14612,264,data/crawl/squid/patch_79.diff
https://github.com/squid-cache/squid/commit/f57ae909fef52f5088b8304a4eb21d0c3978f533,25 Mar 2016,"Fix memory leak of AccessLogentry::url

 ... created by ACLFilledChecklist::syncAle().

::syncAle() is the only place in the codebase that assigns a URL that
AccessLogEntry is expected to free(), which AccessLogEntry doesn't do.
This results in a memory leak.

  This is submitted on behalf of Bloomberg L.P.",44,data/crawl/squid/patch_80.diff
https://github.com/squid-cache/squid/commit/c756d517bc402e8a228f8ff38088d055943677f3,24 Mar 2016,"Added shared_memory_locking configuration directive to control mlock(2).

Locking shared memory at startup avoids SIGBUS crashes when kernel runs
out of RAM during runtime. Why not enable it by default? Unfortunately,
locking requires privileges and/or much-higher-than-default
RLIMIT_MEMLOCK limits. Thus, requiring locked memory by default is
likely to cause too many complaints, especially since Squid has not
required that before. The default is off, at least for now.

As we gain more experience, we may try to enable locking by default
while making default locking failures non-fatal and warning about
significant [accumulated] locking delays.",72,data/crawl/squid/patch_81.diff
https://github.com/squid-cache/squid/commit/6821c276c85dae4a3872501898ab31b675569280,19 Mar 2016,merge new SSL messages parser from lp:fetch-cert branch,996,data/crawl/squid/patch_82.diff
https://github.com/squid-cache/squid/commit/9210f5ec6219282bfea46e56f9003d9cff4f1622,19 Mar 2016,"add forgotten Handshake.{cc,h} files",405,data/crawl/squid/patch_83.diff
https://github.com/squid-cache/squid/commit/7c8ee6885f9702ff30dfdfe3edce25c7dd3b3fd6,19 Mar 2016,"Move BinaryTokenizer, Ssl::HandshakeParser and Ssl::Rfc5246::* classes to
their own *.cc,*.h files

-Move the BinaryTokenizer from ssl/bio.* files to parser/BinaryTokenizer.{cc,h}
-Move the Ssl::Handshake and related structures and declarations from ssl/bio.*
 to security/Handshake.{c,h}, and under the   Security namespace
 (Security::Handshake)
-Move the Ssl::Rfc5246::* classes from ssl/bio.* to security/Handshake.{c,h},
 under the Security namespace.",852,data/crawl/squid/patch_84.diff
https://github.com/squid-cache/squid/commit/54fb1cbf85fff8de784dd1fb2aa6f3c274664590,18 Mar 2016,merge from trunk r14590,16178,data/crawl/squid/patch_85.diff
https://github.com/squid-cache/squid/commit/abf396ecb7fcdc3e156c73d3eb221c5576627689,11 Mar 2016,"Bug 7: Update cached entries on 304 responses.

New Store API to update entry metadata and headers on 304s.
Support entry updates in shared memory cache and rock cache_dirs.
No changes to ufs-based cache_dirs: Their entries are still not updated.

* Atomic StoreEntry metadata updating

   StoreEntry metadata (swap_file_sz, timestamps, etc.) is used
   throughout Squid code. Metadata cannot be updated atomically because
   it has many fields, but a partial update to those fields causes
   assertions. Still, we must update metadata when updating HTTP
   headers. Locking the entire entry for a rewrite does not work well
   because concurrent requests will attempt to download a new entry
   copy, defeating the very HTTP 304 optimization we want to support.

   Ipc::StoreMap index now uses an extra level of indirection (the
   StoreMap::fileNos index) which allows StoreMap control which
   anchor/fileno is associated with a given StoreEntry key. The entry
   updating code creates a disassociated (i.e., entry/key-less) anchor,
   writes new metadata and headers using that new anchor, and then
   _atomically_ switches the map to use that new anchor. This allows old
   readers to continue reading using the stale anchor/fileno as if
   nothing happened while a new reader gets the new anchor/fileno.

   Shared memory usage increase: 8 additional bytes per cache entry: 4
   for the extra level of indirection (StoreMapFileNos) plus 4 for
   splicing fresh chain prefix with the stale chain suffix
   (StoreMapAnchor::splicingPoint). However, if the updated headers are
   larger than the stale ones, Squid will allocate shared memory pages
   to accommodate for the increase, leading to shared memory
   fragmentation/waste for small increases.

* Revamped rock index rebuild process

   The index rebuild process had to be completely revamped because
   splicing fresh and stale entry slot chain segments implies tolerating
   multiple entry versions in a single chain and the old code was based
   on the assumption that different slot versions are incompatible. We
   were also uncomfortable with the old cavalier approach to accessing
   two differently indexed layers of information (entry vs. slot) using
   the same set of class fields, making it trivial to accidentally
   access entry data while using slot index.

   During the rewrite of the index rebuilding code, we also discovered a
   way to significantly reduce RAM usage for the index build map (a
   temporary object that is allocated in the beginning and freed at the
   end of the index build process). The savings depend on the cache
   size: A small cache saves about 30% (17 vs 24 bytes per entry/slot)
   while a 1TB cache_dir with 32KB slots (which implies uneven
   entry/slot indexes) saves more than 50% (~370MB vs. ~800MB).

   Adjusted how invalid slots are counted. The code was sometimes
   counting invalid entries and sometimes invalid entry slots. We should
   always count _slots_ now because progress is measured in the number
   of slots scanned, not entries loaded. This accounting change may
   surprise users with much higher ""Invalid entries"" count in cache.log
   upon startup, but at least the new reports are meaningful.

   This rewrite does not attempt to solve all rock index build problems.
   For example, the code still assumes that StoreEntry metadata fits a
   single slot which is not always true for very small slots.",1838,data/crawl/squid/patch_86.diff
https://github.com/squid-cache/squid/commit/7b1607c2eb702800c00e7aeb51439424b866ef8f,11 Mar 2016,Documented some of the Packable API problems.,9,data/crawl/squid/patch_87.diff
https://github.com/squid-cache/squid/commit/96dac49d0f40683999851e7b6ac68729e4f84580,01 Mar 2016,Merged from trunk,48,data/crawl/squid/patch_88.diff
https://github.com/squid-cache/squid/commit/398bc06602eb8e7ab32170d6216aa6ddd32e33c4,29 Feb 2016,"Bug 4447:FwdState.cc:447 ""serverConnection() == conn"" assertion

After certain failures, FwdState::retryOrBail() may be called twice,
once from FwdState::unregisterdServerEnd() [called from
HttpStateData::swanSong()] and once from the FwdState's own connection
close handler. This may result in two concurrent connections to the
remote server, followed by an assertion upon a connection closure.

This patch:

 - After HttpStateData failures, instead of closing the squid-to-peer
   connection directly (and, hence, triggering closure handlers), calls
   HttpStateData::closeServer() and mustStop() for a cleaner exit with
   fewer wasteful side effects and better debugging.

 - Creates and remembers a FwdState close handler AsyncCall so that
   comm_remove_close_handler() can cancel an already scheduled callback.
   The conversion to the AsyncCall was necessary because legacy [close
   handler callbacks] cannot be canceled once scheduled.

This is a Measurement Factory project.",41,data/crawl/squid/patch_89.diff
https://github.com/squid-cache/squid/commit/70df76e30151bb5fd2070a275e2489ee6bdaaea9,19 Feb 2016,"Throw instead of asserting on some String overflows.

Note that Client-caught exceptions result in HTTP 500 (Internal Server
Error) responses with X-Squid-Error set to ""ERR_CANNOT_FORWARD 0"".


Also avoid stuck Client jobs on exceptions. See trunk r8266 for a
similar fix with a detailed discussion. Here, I added doneWithFwd
instead of setting fwd to NULL because we dereference fwd (and store
pointers to things stored in fwd!) in many places. I think it is too
risky to just clear refcounted FwdState pointer (except in the
destructor where doing so is pointless).

Using doneWithFwd correctly is difficult because there are many ways we
can be ""done"" with FwdState, including:

    * calling fwd->complete(),
    * calling fwd->handleUnregisteredServerEnd(), and
    * closing the connection that FwdState monitors for closures.

The latter is especially tricky case because the closing is initiated in
many places, the process is asynchronous, and not all control
connections are monitored by FwdState.

For example, the updated control connection closure handler assumes that
it is being used for either external closures or internal closures
incorrectly used instead of mustStop()/abortAll(). In both cases, either
FwdState is still monitoring the connection (OK) or we forgot to call
one of its ""done"" methods listed above before closing. The latter would
be a bug, but I did not find any signs of it and fixing it would be
outside this change scope anyway.


Also unified String size limit checks [that I could find].",70,data/crawl/squid/patch_90.diff
https://github.com/squid-cache/squid/commit/989393f2f64c36cb3ef2e0872604e952067d5a08,18 Feb 2016,"Bug 4111: leave_suid() does not properly handle error codes returned by setuid

... this will cause privilege escalation in the rare case that setuid fails.
So far there are no known cases of this happening when downgrading from root.

Also fixes several incorrect uses of errno which may have been obscuring
error message details if it did happen.",27,data/crawl/squid/patch_91.diff
https://github.com/squid-cache/squid/commit/2266451a8ff6a6f61ad012a6d38b78474d94674a,05 Feb 2016,Cleanup: remove several C-style casts from libcompat,45,data/crawl/squid/patch_92.diff
https://github.com/squid-cache/squid/commit/898d1a09e1d9e8f39de5d34df6793197c0fc8dc4,31 Jan 2016,"SourceLayout: rename ClientSocketContext to Http::Stream

 ... and provided through http/libsquid-http.la.

The name is chosen to match the RFC7540 HTTP/2 ""stream"" terminology.
Which defines a stream as a bi-directional transaction, including request,
reply and all related 1xx informational and/or control messages.

That same word ""stream"" is also used in RFC7230 briefly to describe the
same ""transaction"" scope and details. But not formalized until RFC7540.

Http::Stream's may be initiated by a client HTTP request, Squid internally,
or in HTTP/2 a server PUSH_PROMISE frame.

There are no logic changes in this. Just symbol renaming and move.",1958,data/crawl/squid/patch_93.diff
https://github.com/squid-cache/squid/commit/48c5f8e9d92304dad9caa0322c0b583408b346a3,30 Jan 2016,"SourceLayout: merge helpers/ into src/

* Move helpers/basic_auth/ into src/auth/basic/

* Move helpers/digest_auth/ into src/auth/digest/

* Move helpers/external_acl/ into src/acl/external/

* Move helpers/log_daemon/ into src/log/

* Move helpers/negotiate_auth/ into src/auth/negotiate/

* Move helpers/ntlm_auth/ into src/auth/ntlm/

* Move helpers/storeid_rewrite/ into src/store/id_rewriters/

* Move helpers/url_rewrite/ into src/http/url_rewriters/

* Rename helpers/defines.h to src/helper/protocol_defines.h",2256,data/crawl/squid/patch_94.diff
https://github.com/squid-cache/squid/commit/03901cf8c887266fcb6ff9604ea09da1db0857fc,30 Jan 2016,SourceLayout: move Basic auth helpers to src/auth/basic/,233,data/crawl/squid/patch_95.diff
https://github.com/squid-cache/squid/commit/92cfc72f72e0dfd7509337fdee2104d15cb4000f,25 Jan 2016,"Invalid FTP connection handling on blocked content.

FTP client gets stuck after the following chain of events:
 * Client requests a file that will be blocked by ICAP.
 * Squid starts downloading the file from the FTP server
   and sends ""150 Opening..."" to the FTP client.
 * Squid aborts the data connection with the FTP server
   as soon as the ICAP service blocks it.
 * Squid sends ""451 Forbidden"" to the FTP client.
 * The FTP server sends ""500 OOPS: setsockopt: linger"" to Squid.
 * Squid terminates the control connection to the FTP server.
 * Squid establishes a new control connection to the FTP server
   but does not authenticate itself.
 * Further commands from the FTP client do not work any more.

The above and many similar problems exist because Squid handles
FTP client-to-squid and squid-to-FTP server data connections
independently from each other. In many cases, one connection does
not get notified about the problems with the other connection.

This patch:
  - Add Ftp::MasterState::userDataDone to record received
    the FTP client final response status code to sent (or to be send)
    to the client.
  - The Ftp::MasterState::waitForOriginData flag to hold status of the
    squid-to-server side. If the squid-to-server side is not finishes
    yet this is true.
  - Send a control reply to the FTP client only after the data transfered
    on both server and client sides.
  - Split Client::abortTransaction to Client::abortOnData and to
    Client::abortAll()
  - Implement the Ftp::Relay::abortOnData() and Ftp::Relay::Abort()
    (i.e., StoreEntry abort handler) to avoid closing the control
    connection when the data connection is closed unexpectedly.

This is a Measurement Factory project.",221,data/crawl/squid/patch_96.diff
https://github.com/squid-cache/squid/commit/d3dddfb5729fe221bd0fc81ba7fd6dea3a5f2f1c,24 Jan 2016,Rename Http::StreamContext to Http::Stream,334,data/crawl/squid/patch_97.diff
https://github.com/squid-cache/squid/commit/435c72b07c5b7ebf782049cd2b50abe79a6f7db5,15 Jan 2016,"Bug 4005: Dynamic certificate cache exceeds dynamic_cert_mem_cache_size

* disable the use of system CA by default to verify client connection
  certificates. Since the use of client certificates is rare.

* no change to verification of upstream server or peer certificates.
  Since the use of system CA to sign server certificates is common.

* the new ""default-ca"" configuration option and its documentation are
  updated to make the situation more obvious amongst the other TLS options
  changes in Squid-4.

* the action of the sslflags=NO_DEFAULT_CA is already deprecated, so no
  change when it is used. On port lines it now merely sets the default.

It may be a good idea to also disable system CA use for cache_peer and
ICAPS connections. For now they are left unchanged.",75,data/crawl/squid/patch_98.diff
https://github.com/squid-cache/squid/commit/88df846be1405a88271bb2d29bd33708438ddac8,13 Jan 2016,"Add connections_encrypted ACL

The new connections_encrypted ACL matches transactions where all HTTP
messages were received over TLS transport connections, including messages
received from ICAP servers.

Some ICAP/eCAP services receive data from unencrypted sources. Some ICAP/eCAP
services are ""secure"". By default we assume that all eCAP services and all
ICAP services on TLS transport connections  are ""secure"" unless the user
uses the ""connection_encryption"" option in service configuration line.

This is a Measurement Factory project.",148,data/crawl/squid/patch_99.diff
https://github.com/squid-cache/squid/commit/9e61d113cda196ee868fc29e03be35cca36b8f11,09 Jan 2016,update client_side.h stub file,67,data/crawl/squid/patch_100.diff
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/patch_101.diff
https://github.com/squid-cache/squid/commit/8d664cb0f2b9e74117395fe8323c584afd92c99e,07 Jan 2016,Shuffle ClientSocketContext to Http::StreamContext,580,data/crawl/squid/patch_102.diff
https://github.com/squid-cache/squid/commit/d75ae82cb49639ca397bd23e4c8e368c52973604,28 Dec 2015,Migrate basic_ncsa_auth from squid has to std:: containers,70,data/crawl/squid/patch_103.diff
https://github.com/squid-cache/squid/commit/40bc593b55982402f8bc4a0dbab53d16d9de108b,21 Dec 2015,Fix typo in rev.14350,26,data/crawl/squid/patch_104.diff
https://github.com/squid-cache/squid/commit/900809ea458a449aec1b18387addc2f82d41b444,21 Dec 2015,C++-ify basic_fake_auth,60,data/crawl/squid/patch_105.diff
https://github.com/squid-cache/squid/commit/332c979d0522f7d4aa68b952188d4249a2c10dc7,18 Dec 2015,Fix segfault after rev.14439,50,data/crawl/squid/patch_106.diff
https://github.com/squid-cache/squid/commit/d3b1bee6fff7792f482ff280e8400c6a3e83560f,14 Dec 2015,merge from trunk r14444,9318,data/crawl/squid/patch_107.diff
https://github.com/squid-cache/squid/commit/21cd322727eaea02c573b2f5727e2e6ee6aba614,08 Dec 2015,"Refactor ClientSocketContext write(2) using Server:: write methods

Writing to the client connection is scoped as an action for class Server
and its child classes. There is no need for ClientSocketContext to be
providing the callback handlers and performing I/O error handling.

With Server providing the current write handler we can move from
CBDATA callbacks to AsyncCall. Initial testing indicates this has some
minor performance benefit.",127,data/crawl/squid/patch_108.diff
https://github.com/squid-cache/squid/commit/42a5dae8b02fdd0925abfe982d5345110463275d,07 Dec 2015,"Cleanup: pass PeerOptions to sslCreateClientContext()

... to reduce context creation code and simplify upcoming libsecurity
migration steps.",24,data/crawl/squid/patch_109.diff
https://github.com/squid-cache/squid/commit/0a28c16ad4e23e382f74090134e19c72be7e02da,06 Dec 2015,"Cleanup: Expose SSL initialization function to libsecurity

SSL initialize needs to be performed before any security context
objects are generated. Expose the function so that the new blank
context methods can use it.",30,data/crawl/squid/patch_110.diff
https://github.com/squid-cache/squid/commit/885f0ecf9b7d028ee78a680b25ecd73712ffe53c,05 Dec 2015,Cleanup TLS: shuffle context creation to libsecurity,83,data/crawl/squid/patch_111.diff
https://github.com/squid-cache/squid/commit/80b5995a4c0f4b51bace0cc6f3343177348dfbdf,04 Dec 2015,"Cleanup TLS: shuffle AnyP::PortCfg::staticSslContext into libsecurity

There are no logic changes in this patch. Only symbol moves and debugs
documentation polish.",38,data/crawl/squid/patch_112.diff
https://github.com/squid-cache/squid/commit/83b40f50d8bd32363c7c43d0260b23e3206fbdc1,25 Nov 2015,"Cleanup: Refactor ConnStateData pipeline handling

This refactors the request pipeline management API to use std::list
instead of a custom linked-list with accessors spread over both
ConnStateData and ClientSocketContext.

To do this a new class Pipeline is created with methods wrapping
std::list API and extending it slightly to meet the HTTP/1.1 pipeline
behaviours and perform basic stats gathering. The pipeline management
methods and state variables are moved inside this class.

ClientSocketContext was performing several layering violations in
relation to ConnStateData when one transaction ended and the next needed
starting. Treating the pipeline properly as a std::list forced removal
of that violation.

* actions for starting or resuming a transaction on the connection are
now moved to ConnStateData::kick(). Which gets called after each
transaction completes.
 - with some further cleanup it can be called at any point the
ConnStateData needs to resume processing. However, that is left out of
scope for this patch.

* the ClientSocketContext scope now ends when the finished() method is
used to mark completion of these contexts transactions. Which will mark
itself done and de-register from the Pipeline queue. The ConnStateData
kick() method still needs to be called to resume other transactions
processing.

* the queue is now holding RefCounted Pointers. So that the
ClientSocketContext destructor no longer needs to be careful of
registrations, and the queue entries are guaranteed to still exist while
queued.

* The old freeAllContexts() and notifyAllContexts(int) members of
ConnStateData have been combined into Pipeline::terminateAll(int).



The ClientSocketContext and ConnStateData documentation is updated to
describe what they do in regards to connection and transaction processing.


Initial testing revealed CONNECT tunnels always being logged as ABORTED.
This turns out to be techincally correct, since the only way a tunnel
can finish is for client or server to just close the connection.
However, it is not right to log these as abnormal aborts. Instead, I
have now made the context be finished() just prior to the
TunnelStateData being destroyed. That way normal closure should show up
only as TUNNEL, but timeouts and I/O errors should still be recorded as
abnormal.


Two potential bugs have been highlighted:

* The on_unsupported_protocol handling function appears to be a bit
broken. It pop()'s contexts off the pipeline directly without going
through the proper finished() process to release their state data. I
have highlighted that with an XXX and comment.

* The ssl-bump handling logic switching to TLS begins with a terminateAll(0)
run on all active contexts. It does not check whether there is any existing
pipeline of requests waiting to be processed. And the action prematurely
purges the bumped CONNECT message context, which should be closed properly
and logged as successful.",582,data/crawl/squid/patch_113.diff
https://github.com/squid-cache/squid/commit/dc12e84bcedce7d225212499ed6299bc74132b78,19 Nov 2015,"Store API and layout polishing. No functionality changes intended.

Fixes ""any Store is a Root"" API that forced us to bloat the base
Store class with methods needed only in Store::Root() Controller.
Unblocks bug #7 (cached headers update) fixes.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

Please see merged branch commits for details.",4808,data/crawl/squid/patch_114.diff
https://github.com/squid-cache/squid/commit/e02f963ce8082f66bc3656e16112f91d5b937d06,18 Nov 2015,"Bug 4368: A simpler and more robust HTTP request line parser.

The primary changes are: Removed incremental parsing and revised parsing
sequence to accept virtually any URI (by default and also configurable
as before).

Also doubled hard-coded 16-character method length limit.

No changes to parsing HTTP header fields (a.k.a. the MIME block) were
intended.

Known side effects:

* Drastically simpler code.
* Some unit test case adjustments.
* The new parser no longer treats some request lines ending with
  ""HTTP/1.1"" as HTTP/0.9 requests for URIs that end with ""HTTP/1.1"".
* The new parser no longer re-allocates character sets while parsing
  each request.

Intentional Changes:

* Removal of incremental request line parsing.

Squid parsed the request line incrementally. That optimization was
unnecessary:
  - most request lines are short enough to fit into one network I/O,
  - the long lines contain only a single long field (the URI), and
  - the user code must not use incomplete parsing results anyway.

Incremental parsing made code much more complex and possibly slower than
necessary.

The only place where incremental parsing of request lines potentially
makes sense is the URI field itself, and only if we want to accept URIs
exceeding request buffer capacity. Neither the old code, nor the
simplified one do that right now.


* Accept virtually any request-target (when allowed).

1. relaxed_header_parser allows whitespace in request-target.
2. relaxed_header_parser combined with USE_HTTP_VIOLATIONS now allows
   any characters except non-whitespace CTL characters (see RFC 5234
   appendix B.1) in the message request-target (aka URI).

#2 being the default build and configuration situation allows virtually
any URI that Squid can isolate by stripping method (prefix) and
HTTP/version (suffix) off the request line. This approach allows Squid to
forward slightly malformed (in numerous ways) URIs instead of misplacing
on the Squid admin the burden of explaining why something does not work
going through Squid but works fine when going directly or through another
popular proxy (or through an older version of Squid!).

URIs in what Squid considers an HTTP/0.9 request obey the same rules.
Whether the rules should differ for HTTP/0 is debatable, but the current
implementation is the simplest possible one, and the code makes it easy
to add complex rules.


* Code simplification.

RequestParser::parseRequestFirstLine() is now a simple sequence of
sequential if statements. There is no longer a path dedicated for the
strict parser. The decisions about parsing individual fields and
delimiters are mostly isolated to the corresponding methods.


* Unit test cases adjustments.

Removal of incremental request line parsing means that we should not
check parsed fields when parsing fails or has not completed yet.

Some test cases made arguably weird decisions apparently to accommodate
the old parser. The expectations of those test cases are more natural now.

Also, added optional (and disabled by default) debugging, to help pin-point
failures to test sub-cases that CPPUNIT cannot see.

Changing request methods to ""none"" in test sub-cases with invalid input
was not technically necessary because the new code ignores the method
when parsing fails, but it may help whoever would decide to reduce test
code duplication (by replacing hand-written expected outcomes for failed
test cases with a constant assignment or function call).",687,data/crawl/squid/patch_115.diff
https://github.com/squid-cache/squid/commit/795401ab9b9efae3668675c6b3c7f48479a5ed94,18 Nov 2015,Merged from trunk rev.14404,1518,data/crawl/squid/patch_116.diff
https://github.com/squid-cache/squid/commit/94c86ca4ced2078f739c0c74a31f5bad9fa8f858,18 Nov 2015,ext_unix_group_acl: Add support via -r flag to strip @REALM from usernames,13,data/crawl/squid/patch_117.diff
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/patch_118.diff
https://github.com/squid-cache/squid/commit/3a0ace1d91cd018400f0c3bf48f6488397f08b6e,18 Nov 2015,"Use ""standard"" STUB macros/API. Also marked the file as unused.",12,data/crawl/squid/patch_119.diff
https://github.com/squid-cache/squid/commit/434fe01480e773c9439314f0c96368d4ed0e3f91,17 Nov 2015,Docs: Update ConnStateData and ClientServerContext descriptions,67,data/crawl/squid/patch_120.diff
https://github.com/squid-cache/squid/commit/4a4fbcef8ac37505a571b2b3a6c17d39ced5a801,17 Nov 2015,"Use connIsFinished() when a transaction is completed successfully

initiateClose() may sound okay, but it actually is the error handling logic.
It will terminate the ConnStateData with an erro rmessage, leaving the completed
request in the pipeline which in turn will result in *_ABORTED being logged for
all requests with Connection:close headers even if they are cleanly finished.

connIsFinished() is (now) the clean way to finish ClientSocketContext objects
lifetime regardless of whether keep-alive is needed. The ConnStateData::kick()
will now handle that so we do not even need to call keepaliveNextRequest().

Remove the now unused ClientSocketContext::keepaliveNextRequest().",31,data/crawl/squid/patch_121.diff
https://github.com/squid-cache/squid/commit/9dde3c2a8c8d0ebc8a4065814d68ab1534534a35,15 Nov 2015,Use pipeline stats in cachemgr reports,3,data/crawl/squid/patch_122.diff
https://github.com/squid-cache/squid/commit/fcc444e3db9ac978f7ab74d77f56dfe2c499652b,07 Nov 2015,"Split core Server operations from ConnStateData

This improves the servers/libserver.la class hierarchy in
preparation for HTTP/2 and other non-HTTP/1.1 protocol support.

The basic I/O functionality of ConnStateData is moved to Server
class and a set of virtual methods designed to allow for child
class implementation of data processing operations.

No logic is changed in this patch, just symbol renaming and
moving of method logics as-is into libservers.la",647,data/crawl/squid/patch_123.diff
https://github.com/squid-cache/squid/commit/37c7518a41d2426542b3bda94d32986c79c03837,06 Nov 2015,"Allow unlimited LDAP search filter for ext_ldap_group_acl helper.

The LDAP search filter in ext_ldap_group_acl is limited to 256 characters.
In some environments the user DN or group filter can be larger than this
limitation.
This patch uses dynamic allocated buffers for LDAP search filters.

This is a Measurement Factory project",225,data/crawl/squid/patch_124.diff
https://github.com/squid-cache/squid/commit/39441513efc377f3db64e763667a93c1a6d12862,30 Oct 2015,"Add Locker friend class to SBuf for protection against memory issues

When appending or otherwise modifying an SBuf based on a SBuf& or char*
the parameter used may be pointing at the MemBlob memory buffer
indirectly without holding a separate ref-count lock to it.

If 'this' SBuf then requires reallocation for any reason the char* or
buffer pointer taken from the SBuf&, which is being manipulated may in
fact be left pointing at invalid memory.

Utilize a private Locker class to create relatively cheap ref-count locks
on the store_ MemBlob when this problem MAY occur. This Locker needs to
be used on all non-const SBuf methods accepting char* or SBuf& argument.",35,data/crawl/squid/patch_125.diff
https://github.com/squid-cache/squid/commit/eaa5d9b367f44861a9fb55799c960ad4be74ca38,29 Oct 2015,Audit updates,37,data/crawl/squid/patch_126.diff
https://github.com/squid-cache/squid/commit/4a0fcd9b61eb72639e3f72dc4b3a0b4b977ff995,29 Oct 2015,"Add Locker friend class to SBuf for protection against memory issues

When appending or otherwise modifying an SBuf based on a SBuf& or char*
the parameter used may be pointing at the MemBlob memory buffer
indirectly without holding a separate ref-count lock to it.

If 'this' SBuf then requires reallocation for any reason the char* or
buffer pointer taken from the SBuf&, which is being manipulated may in
fact be left pointing at invalid memory.

Utilize a private Locker class to create relatively cheap ref-count locks
on the store_ MemBlob when this problem MAY occur. This Locker needs to
be used on all non-const SBuf methods accepting char* or SBuf& argument.",24,data/crawl/squid/patch_127.diff
https://github.com/squid-cache/squid/commit/2e198b84671ea61455bf48c266a8c1742ce46dcf,29 Oct 2015,"Rewrote ServerHello parsing using a [binary] tokenizer approach.

Added nearly-protocol-agnostic BinaryTokenizer that can extract numbers
(in the commonplace network byte order or big-endian format) and opaque
fixed-size areas. The new tokenizer supports incremental parsing via
commit points and rollbacks. It is meant to be ""safe"" and provide
helpful debugging of parsed [packet] fields.

Declare a few RFC 5246 structures (that we need to parse) as C++ structs
in a new Rfc5246 namespace. These structures know how to ""load""
themselves atomically using a BinaryTokenizer object.

Fixed SSL server parsing by separating record and ""higher-level"" layers.
Each layer has to be parsed using a dedicated tokenizer because
higher-level messages may be split across multiple record layer frames.

Parse and accumulate server certificates as we receive Certificate
messages.

This code is not fully polished and has several important XXXs and
TODOs.  Eventually, all SSL parsing code (at least) should be converted
to use BinaryTokenizer or equivalent.",788,data/crawl/squid/patch_128.diff
https://github.com/squid-cache/squid/commit/55369ae649646901d3038c63217386174d01eb7b,22 Oct 2015,"Fetch missing certificates.

Many web servers do not have complete certificate chains. Many browsers
use certificate extensions of the server certificate and download the
missing intermediate certificates automatically from the Internet.

This patch adds a similar feature to Squid:
   - Parse Server Hello messages and extract certificates chain.
   - Check whether the issuers of each certificate exist in the chain.
   - If not, retrieve the issuer certificate URI from Authority Info
     extension of the certificate (if it is provided) and download the
     certificate.
   - Store downloaded certificates in Squid object cache, just like any
     other HTTP object.

Implementation highlights:
  - A new Downloader class allows Squid subsystems to download objects
    via HTTP. These downloads are not backed by a proxy user.
  - Add support for an internal database of intermediate pre-loaded
    certificates to be used to complete incomplete chains.
  - Ssl::HandshakeParser parses TLS records and TLS Handshake messages.
  - Ssl::PeerConnector now uses the Downloader objects to download
    missing certificates.",1181,data/crawl/squid/patch_129.diff
https://github.com/squid-cache/squid/commit/cd6b1fd1bd9fc68574035857d649b85ba8713e3f,11 Oct 2015,"Support logformat %macros in external_acl_type format

Update the external_acl_type helper interface to use libformat and thus
make any logformat token valid in its format parameter field.

As a result much of the logic surrounding format code parsing, display
and helper query generation has been completely dropped. What remains is
a basic parse loop handling backward compatibility for the unusual
%CERT_* token syntax, space delimiter and field default encodings.


Extensions to logformat resulting from the merger:

* adds \-escape encoding of output fields

* allows {arg} field to be placed before or after the format code.

* extended to accept the old external_acl_type %macros. But not
  documented, these are deprecated and only for backward compatibility.

* extended to support outputting formats without a format-name prefix
  as was required by the original logformat config lines.


The major side effect of this change is that these ACLs now require
AccessLogEntry to be filled out with state data, rather than just the
ACLChecklist object members.

The requires*() mechanism of ACLChecklist has been extended to catch
some cases resulting from missing the ALE entirely. But it cannot catch
the more subtle problem of data members inside the ALE being unset.
To try and catch those a syncAle() mechanism has been added that fills
out missing ALE members and prints out debug warnings about the action.",993,data/crawl/squid/patch_130.diff
https://github.com/squid-cache/squid/commit/a87b56f3c1acc2ffdd35d60a82abf64ccfc30e7b,11 Oct 2015,"TLS: shuffle EECDH configuration to libsecurity

* add class ServerOptions to libsecurity to manage server specific
  configuration options. Based on class PeerOptions.

* shuffle the DH config parse and dump logics to ServerOptions

* shuffle the DH params pre-loading logic to ServerOptions

* add configuration warning when tls-dh= is used and overrides
  dhparams= logacy configuration. Also, auto-upgrade the config
  settings when dhparams= is dumped in mgr:config report.",357,data/crawl/squid/patch_131.diff
https://github.com/squid-cache/squid/commit/474f076ef246eb4c9acab986180d82dcafd3e583,10 Oct 2015,"Shuffle tls-dh= options to libsecurity

* create class ServerOptions derived from class PeerOptions to hold
  server-specific configuration settings.

* split DH, ECDH, and DH params settings during configuration instead of
  on every context initialization.",258,data/crawl/squid/patch_132.diff
https://github.com/squid-cache/squid/commit/45f8e01e0a639f21e097a8d02b22c5a95a45919a,03 Oct 2015,Merge from trunk,56,data/crawl/squid/patch_133.diff
https://github.com/squid-cache/squid/commit/c28b4cf272cb059254aa7159fc2c1f3e99f783f9,03 Oct 2015,Merge from trunk,766,data/crawl/squid/patch_134.diff
https://github.com/squid-cache/squid/commit/fbdf945d33765c02929795b8354c6cdd55d67ba4,02 Oct 2015,Cleanup various spelling errors,22,data/crawl/squid/patch_135.diff
https://github.com/squid-cache/squid/commit/d8c21a8a70e8cc727a238c0a89de15b82ab27d88,01 Oct 2015,Merged from trunk rev.14335,710,data/crawl/squid/patch_136.diff
https://github.com/squid-cache/squid/commit/d1c95ddadcd9ee36e53af7edd6099a8c078ba2cf,01 Oct 2015,"Bug 4190: assertion 'hash_remove_link' from Auth::User::cacheCleanup

The hash_link based cache depends on raw-ptr key comparisons to store
hash entries. This does not work at all well with SBuf as the key,
since the backing MemBlob behind SBuf can change its memory location.

* replace the implementation of User credentials caching with an STL
  based container class that can handle SBuf.

* revert the global Auth::User cache design to per-scheme caches
  which get combined only when reporting statistics.

* add a RunnersRegistry helper class to control Squid startup,
  reconfigure, and shutdown events activity in regards to the caches.

* suppress useless cache garbage collection events when auth has no
  credentials to cleanup.

* make the cache key dynamic at the caller codes discretion.",670,data/crawl/squid/patch_137.diff
https://github.com/squid-cache/squid/commit/9f5ef3a2ac303cb9ffa009f658090e7d4a0ca5f4,28 Sep 2015,Merge from trunk,6446,data/crawl/squid/patch_138.diff
https://github.com/squid-cache/squid/commit/8c9fcdf42dd3d0a6a35d4a067cbf12eab99fd82b,27 Sep 2015,Merge from trunk rev.14325,194,data/crawl/squid/patch_139.diff
https://github.com/squid-cache/squid/commit/971003b0b122cfb0b48c21202e7b3cdd8374c785,26 Sep 2015,"Fix cache_peer login=PASS(THRU) after CVE-2015-5400

The patch for CVE-2015-5400 converts all non-200 peer responses
into 502 Bad Gateway responses when relaying a CONNECT to a peer.

This happens to break login=PASS and login=PASSTHRU behaviour
which relies on the 401 and 407 status being relayed transparently.

We need to relay the auth server responses as-is when login= is
set to PASS or PASSTHRU but then unconditionally close the
connections to prevent CVE-2015-5400 from occuring.",42,data/crawl/squid/patch_140.diff
https://github.com/squid-cache/squid/commit/342e1833d765f62dc4db17c8be4245477a9afd2c,25 Sep 2015,Bug 4208: more than one port in wccp2_service_info line causes error,9,data/crawl/squid/patch_141.diff
https://github.com/squid-cache/squid/commit/890cb4d2b7ed01d200759e7cf9608494d5b3f742,25 Sep 2015,Merge from trunk,1022,data/crawl/squid/patch_142.diff
https://github.com/squid-cache/squid/commit/0caa282007102ca0fd2ee97178e222fadc1b3f8c,25 Sep 2015,Display username cache key in cache manager report,9,data/crawl/squid/patch_143.diff
https://github.com/squid-cache/squid/commit/53ae090f2fea326f8e1bd43dde79a45fddfc6d86,17 Sep 2015,ntlm_smb_lm_auth: ignore empty NTresponse field,37,data/crawl/squid/patch_144.diff
https://github.com/squid-cache/squid/commit/a53b10ac8f38e02ef02bb07d5be9203688d64fcd,12 Sep 2015,Merged from trunk rev.14291,343,data/crawl/squid/patch_145.diff
https://github.com/squid-cache/squid/commit/af845cee67e3dc2a58f93a9ac7d9ce091ea4fa00,11 Sep 2015,"Bug 4292: negotiate_wrapper: Unreleased Resources

FILE* handles need to be closed on exit. Shuffle the processing loop logics
to a static function to avoid code duplication from all the requires close
points.

Also, use the available global flag debug_enabled instead of local variable
to avoid having to pass it down explicitly.",337,data/crawl/squid/patch_146.diff
https://github.com/squid-cache/squid/commit/7f7004fe74a509c2d74dbdc6bfcaeb2cf7563f71,09 Sep 2015,Merge from trunk rev.14289,1947,data/crawl/squid/patch_147.diff
https://github.com/squid-cache/squid/commit/47567b73f7a2f951a1834bcb47cd72664374d8a5,07 Sep 2015,Bug 3618: ntlm_smb_lm_auth rejects correct passwords,40,data/crawl/squid/patch_148.diff
https://github.com/squid-cache/squid/commit/d21237557c861059520981bb99b42f54bc9d7ff7,03 Sep 2015,Migrate cachemgr action to UserNameCache,46,data/crawl/squid/patch_149.diff
https://github.com/squid-cache/squid/commit/4c3a8826adf1cd1d860caf534cc96c9b0389d12e,28 Aug 2015,Merged from trunk,265,data/crawl/squid/patch_150.diff
https://github.com/squid-cache/squid/commit/9663db1c5b4d55566b19f220004aad2b0ee6c594,27 Aug 2015,"SourceLayout: shuffle MemMeter into libmem and Mem:: namespace

* move the memMeter.h file to src/mem/Meter.h

* move the helper #define macros logic to class members

* provide accessors to make all class members private

There are no logic changes in this patch.",265,data/crawl/squid/patch_151.diff
https://github.com/squid-cache/squid/commit/7224ca5ac5a4eda002c30089f9a461069aeb122d,24 Aug 2015,"When a RESPMOD service aborts, mark the body it produced as truncated.

Without these changes, the recipient of the truncated body often
cannot tell that the body was actually truncated (e.g., when Squid
uses chunked encoding for body delivery). Lying about truncation
may result in rather serious user-level problems.",61,data/crawl/squid/patch_152.diff
https://github.com/squid-cache/squid/commit/79ff80236e09df13be0d12a375704c753c313e85,22 Aug 2015,"TLS: failure of https:// context non-fatal for non-OpenSSL builds

Only OpenSSL library is 'guaranteed' to produce a TLS context at this point
in the conversion to library-agnostic security. Any others may produce
nothing.

Match the DBG_IMPORTANT used for debug level of the 'initializing' message.",7,data/crawl/squid/patch_153.diff
https://github.com/squid-cache/squid/commit/ce810e3390cfb83d47b8c4815b665280e19be396,09 Aug 2015,Merge from trunk,3915,data/crawl/squid/patch_154.diff
https://github.com/squid-cache/squid/commit/ca5bfb4cd440f97669e200df0f195a87549fa1cb,06 Aug 2015,Merge coverity-fixes - HttpHeader refactor,2567,data/crawl/squid/patch_155.diff
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/patch_156.diff
https://github.com/squid-cache/squid/commit/3d8ac9df111fc10164f436048aea85845eca80d1,31 Jul 2015,"Removed HeadersAttrs table, moved header statistics to headerStatsTable.",184,data/crawl/squid/patch_157.diff
https://github.com/squid-cache/squid/commit/fda6d769ab8fe2cc3dc01a5d52138428e5e1504f,31 Jul 2015,Migrate Http Header Fields stats to headerStatsTable,23,data/crawl/squid/patch_158.diff
https://github.com/squid-cache/squid/commit/1317aea1e55502e8080cdbd2e280d12acde8879c,28 Jul 2015,Merged from trunk rev.14181,8440,data/crawl/squid/patch_159.diff
https://github.com/squid-cache/squid/commit/597504bff07370f493d7150333cde579c9ee8b27,27 Jul 2015,"purge: convert metadata matching to std::regex

* converting the REList class to inline methods.
 - constructor now throws as a side effect of rexp member construction.

NOTE: uses std::regex_match for matching, which will only succeed if the
  pattern(s) given are designed to match the entire URL TLV data field.
  If this causes problems, move to regex_search which does not require
  prefix or suffix to match.",99,data/crawl/squid/patch_160.diff
https://github.com/squid-cache/squid/commit/2056c6a6b3b59f54afb222f73bcf9486ab6051ff,27 Jul 2015,purge: Convert squid.conf parser to std::regex,140,data/crawl/squid/patch_161.diff
https://github.com/squid-cache/squid/commit/ddd3fbb47f669355d9a261499d18bdd282b04708,27 Jul 2015,Merged from trunk,20170,data/crawl/squid/patch_162.diff
https://github.com/squid-cache/squid/commit/4f5549784225a548610e56927afda096fe4d3553,26 Jul 2015,Merged from trunk,859,data/crawl/squid/patch_163.diff
https://github.com/squid-cache/squid/commit/cfd861ab1795a49dd64b715af3f92642fec68c32,25 Jul 2015,"Cleanup: refactor to remove various dead code

... detected by or confusing Coverity Scan.

These have been marked False Positive / Intentional earlier.
But long term the best fix is to simply clean out the dead code.",111,data/crawl/squid/patch_164.diff
https://github.com/squid-cache/squid/commit/0f6c22fbd904ef4841036fffc5eab2a5b4e94828,21 Jul 2015,Merged from trunk,2106,data/crawl/squid/patch_165.diff
https://github.com/squid-cache/squid/commit/ea2df80b51e1b7ff2dc1787ef7a89903efe086d7,17 Jul 2015,Merge fixes for some issues reported by Coverity,133,data/crawl/squid/patch_166.diff
https://github.com/squid-cache/squid/commit/858c5afb99c9594aaf3169f905da635ef8d74f96,13 Jul 2015,"Cleanup: Shuffle Squid result codes (aka log tags) into class LogTags

This begins the migration of result codes from enumeration to a
set of flags whih can combine into much more flexible logging of
transation activity than hard-coded labels enumerating every
individual code path.

The existing ABORTED and TIMEDOUT state flags are also moved into
the new class as an example of how such flags would operate.",284,data/crawl/squid/patch_167.diff
https://github.com/squid-cache/squid/commit/a7dec7abb2236d4fce5f6ecd571b27ca804596e9,12 Jul 2015,Merge from trunk,2842,data/crawl/squid/patch_168.diff
https://github.com/squid-cache/squid/commit/a981b36082d0a0da4ac819c3cc4430c137250ae3,12 Jul 2015,Shuffle _TIMEOUT and _ABORTED flags into class LogTags,66,data/crawl/squid/patch_169.diff
https://github.com/squid-cache/squid/commit/eaba9273ca0d18a75d12c1055b7ed12b8eb2e3df,10 Jul 2015,"Crypto-NG: Use Security::PeerOptions for listening port TLS settings

The bulk of this patch is symbol shuffling to de-duplicate the TLS
settings storage and parsing code.

* Shuffle relevant AnyP::PortCfg settings into a Security::PeerOptions
  member object.
 - removes a lot of duplicate config parsing code.

* Remove the now obsolete and unused Ssl::OpenSSLtoSquidSSLVersion()


The actual logic changes are relatively small:

* Shuffle flags= and options= parsing code from Ssl:: to
  Security::PeerOptions and update to use Tokenizer,
 - fixes performance regression using c_str() on the stored SBuf,
 - fixes performance issue with xstrdup() for option tokens,
 - removes several calls to c-string manipulation.

* Add cachemgr 'config' report dumper of Security::PeerOptions for use
  by all directives using it to dump tls-* parameter names. The old
  parameter names are still accepted, and deprecation will follow in a
  separate patch.
 - fixes bug where cache_peer was not dumping out its SSL/TLS config
  settings at all.

* Change the tls_outgoing_options default value from ""disable"" to setting
  TLS/1.0 minimum version.
  - fixes squid.conf parsing error on default value ""disable"".

* Fix tls-min-version=1.N handling not to alter stored options= config
  string. Now updates the binary representation in parsedOptions directly.

* Expose the TLS context creation and configuration to non-OpenSSL builds.
 - fixes bug where context creation by OpenSSL failed silently.",1036,data/crawl/squid/patch_170.diff
https://github.com/squid-cache/squid/commit/ee74db84d2cf476c8f4a1d4942eae9f94c677678,09 Jul 2015,c++-ize unlinkd,22,data/crawl/squid/patch_171.diff
https://github.com/squid-cache/squid/commit/4ac1880a33a31144592a93d95fff715d67a6bf05,09 Jul 2015,make dump_peer_options clearer (and address CID 740350),26,data/crawl/squid/patch_172.diff
https://github.com/squid-cache/squid/commit/c62717bdac6c981fd58c07ed38b49cd3852613f0,30 Jun 2015,"Move tls-options= parser into Security::PeerOptions

It no longer needs to be called by the SSL code, so can be a private
member without OpenSSL library dependency.

Also, remove c_str() performance regression by upgrading to use
::Parser::Tokenizer.",93,data/crawl/squid/patch_173.diff
https://github.com/squid-cache/squid/commit/8250ca31a53cf976d81e79834bbab85b76358398,30 Jun 2015,"Fix cachemgr 'config' report output for TLS options

Adds Security::PeerOptions::dumpCfg() method to output config
details for the peer TLS settings stored. Takes an optional
prefix string for the option parameters.
- uses prefix """" for tls_outgoing_options
- uses prefix ""tls-"" for https_port, http_port, and cache_peer
- displays ""tls-disable"" for directives without TLS settings.

Fixes missing cache_peer config output for TLS settings.

Fixes display of http(s)_port TLS settings 'ssl' prefix.

Fixes tls-min-version= internal operation to avoid polluting
tls-options= config settings.

Also, updates documentation mentions of ""SSL"" in debugs().",91,data/crawl/squid/patch_174.diff
https://github.com/squid-cache/squid/commit/585c27ebf5f73381e605273c3b22a232f2f8f7f8,28 Jun 2015,Merged from trunk rev.14126,14357,data/crawl/squid/patch_175.diff
https://github.com/squid-cache/squid/commit/74f35ca845c00f3b7a5bf97b23f19ce363fede25,28 Jun 2015,"Do not blindly forward cache peer CONNECT responses.

Squid blindly forwards cache peer CONNECT responses to clients. This
may break things if the peer responds with something like HTTP 403
(Forbidden) and keeps the connection with Squid open:
  -  The client application issues a CONNECT request.
  -  Squid forwards this request to a cache peer.
  -  Cache peer correctly responds back with a ""403 Forbidden"".
  -  Squid does not parse cache peer response and
     just forwards it as if it was a Squid response to the client.
  -  The TCP connections are not closed.

At this stage, Squid is unaware that the CONNECT request has failed. All
subsequent requests on the user agent TCP connection are treated as
tunnelled traffic. Squid is forwarding these requests to the peer on the
TCP connection previously used for the 403-ed CONNECT request, without
proper processing. The additional headers which should have been applied
by Squid to these requests are not applied, and the requests are being
forwarded to the cache peer even though the Squid configuration may
state that these requests must go directly to the origin server.

This fixes Squid to parse cache peer responses, and if an error response
found, respond with ""502 Bad Gateway"" to the client and close the
connections.",101,data/crawl/squid/patch_176.diff
https://github.com/squid-cache/squid/commit/ddd4edb743d82be97fc651d529e04bf55329a50d,22 Jun 2015,"Replace GNU atomics and related hacks with C++11 std::atomic

With C++11 atomic support by the stdlib is not optional. This
resolves issues determining whether GNU atomics are available,
operational 32-bit vs 64-bit, or cross-compiling (bug 4224).",283,data/crawl/squid/patch_177.diff
https://github.com/squid-cache/squid/commit/a36cbad8addcb7eb068bf2594a588aa67fa8ad74,22 Jun 2015,Merged from trunk,2351,data/crawl/squid/patch_178.diff
https://github.com/squid-cache/squid/commit/064679ea374d2f58ae4660d9a2af213b9be24bba,19 Jun 2015,"Bug 4269: ignore-must-revalidate broken

ignore-must-revalidate appears to prevent revalidation by disabling
storage of objects with must-revalidate/proxy-revalidate header.

However it was also preventing revalidation of objects cached due to
ignore-private, or the presence of no-cache, s-maxage, and use of auth
credentials.

Remove the violation option entirely.

Also cleanup the documentation of ignore-auth which was removed earlier.",58,data/crawl/squid/patch_179.diff
https://github.com/squid-cache/squid/commit/54fbe371a5e2b1ab6a78ea60b72581842817c969,19 Jun 2015,"Support Ephemeral Elliptic Curve Diffie-Hellman (EECDH) key exchange

Which allows for forward secrecy with better performance than traditional
ephemeral DH.

Also replaces http(s)_port dhparams= option with tls-dh= that takes a
curve name as well as filename for curve parameters.",109,data/crawl/squid/patch_180.diff
https://github.com/squid-cache/squid/commit/9136993377e9decfef076b4fa8b14ee03f4c8a09,11 Jun 2015,"Convert enum LogTags into class LogTags

- enum sequence re-typed to LogTags_ot
- logTagsIsATcpHit() function converted to method LogTags::isTcpHit()
- strings array lookup converted to method LogTags::c_str()
- constructors and assignment assure valid values, no more need for
  external asserts before logging.",173,data/crawl/squid/patch_181.diff
https://github.com/squid-cache/squid/commit/5c51bffba7a4fba9ef7b39f381d991e4e02ee490,09 Jun 2015,"Bug 1961 partial: Move HttpRequest host:port to class URL

Moves the host:port authority details into class URL for more
modular URI management. Add URL::authority() member to generate
authority-form URIs from the class URL stored details.

Also, shuffle urlDefaultPort() to AnyP::UriScheme::defaultPort()",626,data/crawl/squid/patch_182.diff
https://github.com/squid-cache/squid/commit/6bcc2790b5bff6f5c047c65be39e37f8edd8e20f,09 Jun 2015,Merge from trunk rev.14108,11986,data/crawl/squid/patch_183.diff
https://github.com/squid-cache/squid/commit/bf3e8d5a0de0f6f59996d1a8fb88402ba2273ede,05 Jun 2015,"SourceLayout: convert helper stats display to Packable API

Requires unifying the classes Helper::Request queues which incidentally
also brings stateful helpers closer to concurrency support",192,data/crawl/squid/patch_184.diff
https://github.com/squid-cache/squid/commit/9671c6b15fa50b5acb24c63c80c29eac88b347bd,02 Jun 2015,"Bug 3875: bad mimeLoadIconFile error handling

Improve the MimeIcon reliability when filesystem I/O errors or others
cause the icon data to not be loadable.

The loading process is re-worked to guarantee that once the
MimeIon::created callback occurs it will result in a valid StoreEntry in
the cache representing the wanted icon.

* If the image can be loaded without any issues it will be placed in
the cache as a 200 response.

* If errors prevent the image being loaded or necessary parameters
(size and mtime) being known a 204 object will be placed into the cache.


NP: There is no clear agreement on 204 being 'the best' status for this
case. 500 Internal Error is also appropriate. I have use 204 since:

* the bug is not in the clients request (eliminating 400, 404, etc),
* a 500 would be revealing details about server internals unnecessarily
   often and incur extra complexity creating the error page.
* 204 also avoids needing to send Content-Length, Cache-Control header
  and body object (bandwidth saving over 500 status).


NP: This started with just correcting the errno usage, but other bugs
promptly started appearing once I got to seriously testing this load
process. So far it fixes:
* several assertions resulting from StoreEntry being left invalid in
  cache limbo beween created hash entries and valid mem_obj data.
* repeated attempts on startup to load absent icons files which dont
  exist in the filesystem.
* buffer overfow on misconfigured or corrupt mime.conf file entries
* incorrect debugs messages about file I/O errors
* large error pages delivered when icons not installed (when it does
  not assert from the StoreEntry)",68,data/crawl/squid/patch_185.diff
https://github.com/squid-cache/squid/commit/75777642f21a186519599a5f62c4dae3df984c00,02 Jun 2015,Remove unused Atomic::Word and GNU atomics,171,data/crawl/squid/patch_186.diff
https://github.com/squid-cache/squid/commit/8c4e719630ca46689df134999dce6ba1de4bed16,01 Jun 2015,Merged from trunk rev.14096,11140,data/crawl/squid/patch_187.diff
https://github.com/squid-cache/squid/commit/4e56d7f6084e46d23cee970286ea57b01b04b4d4,29 May 2015,"Convert external_acl_type directive format tokens

Use libformat tokenizer and string assembler mechanisms instead of
custom code for external helpers. This allows any logformat code and
transaction data to be used by the external ACL helper.

The old helper format tokens are added to the libformat for backward
compatibility.

Known issue:
  all access lists which use an exetrnal_acl_type helper now require
  setting up the ACL Checklist with an AccessLogEntry referencing any
  special token data the old format tokens needed.",733,data/crawl/squid/patch_188.diff
https://github.com/squid-cache/squid/commit/721dcff0234670725c0d081aae71fa333d463006,29 May 2015,Fix eCAP issues after rev.14093,6,data/crawl/squid/patch_189.diff
https://github.com/squid-cache/squid/commit/1071ffed56172406d771265af76d8273ffcdb89e,26 May 2015,"Replace Packer object API with Packable API

Majority of thost patch is symbol renaming to unify the
class method names to the Packable API names.

There is effectively no logical change in this patch
despite appearances because it replaces the Packer object
which provides methods which are just wrappers pointing
to static functions which are in turn wrappers pointing
to storage buffer object methods. With direct calls to
those storage object methods (renamed).

We can now interchangebly use MemBuf or StoreEntry objects
with the packInto(Packable *) functions. Or any other
object which inherits and implements the Packable API.

We also gain 0.1% in performance (+2 RPS) by avoiding the
layers of wrapper funcions and Packer object allocate / 
deallocate cycles.",1141,data/crawl/squid/patch_190.diff
https://github.com/squid-cache/squid/commit/0a647ffb7aae884369aeba0f1701a3b67a9b028c,26 May 2015,"Cleanu: Remove dead Packer API

Also includes some Packable API polishing. No logical changes.",164,data/crawl/squid/patch_191.diff
https://github.com/squid-cache/squid/commit/1bc61a2cf419fc483e8ef890fdf8d58545306948,22 May 2015,Merged from trunk rev.14084,14473,data/crawl/squid/patch_192.diff
https://github.com/squid-cache/squid/commit/1cc44095e2effe69bd74291090c1b7b16cc33426,22 May 2015,"Replacement of sslversion=N by tls-min-version=1.N

Overall the default behaviour is changed from enumerating the protocols
wanted. To enumerating and eliminating the unwanted.


* sslversion= / version= parameter is removed from documentation.

* sslversion= code logics is converted from setting the SSL_*_method()
  function to setting the ssloptions= masking parameters.

Yes this will open a hole for future libraries use of TLSv1.3. However
that is kind of desirable and if it becomes a problem the
ssloptions=NO_TLSv1_3 should be made available.


* The SSL_*_method() logic is all converted to using the flexible
  TLS_*_Method() API when available (OpenSSL 1.1.0) otherwise the
  equivalent SSLv23_*_method() API is used.

That API follows the latest specification behaviour: to send a protocol
frame type that any recipient should be able to parse (library decides
which), while only negotiating the protocol type permitted.


* A new option tls-min-version=1.N is added to server connection
  directives. It controls *only* the TLS version range.

 - http(s)_port directives are not (yet) implemented using
   Security::PeerOptions. For now they are left with options= masking to
   select protocol support.

 - bug in http(s)_port directives version= parameter is fixed. The new
   backward compatibility code accepts version=4|5|6 where the existing
   code did not despite documentation saying it did.

 - SSLv3 is left at the library default unless ssloptions=NO_SSLv3 is used.


* ssloptions= is left alone so anyone can still set the library options
  masks to control SSLv3 enable/disable or specific TLS versions higher
  than the configured minimum.",390,data/crawl/squid/patch_193.diff
https://github.com/squid-cache/squid/commit/1fab834457cac20a8dd64038d0d5aa97dcff0ac9,18 May 2015,Fix build errors in rev.14057 and rev.14058,6,data/crawl/squid/patch_194.diff
https://github.com/squid-cache/squid/commit/154df539359ad4bd9bb3f0e32bb7ef90e9c68543,08 May 2015,"CacheMgr: display 'client_db off' instead of 0 clients accessing cache

... to clarify why there is no record of even the mgr request happening.
The cleint_db mechanism needs to be enabled and measuring traffci for
any useful client counter value to exist.",6,data/crawl/squid/patch_195.diff
https://github.com/squid-cache/squid/commit/bd74680720ec985b36a531a2a1cad2fd5fe26f1f,27 Apr 2015,Add vsnprintf() protection for vargs,15,data/crawl/squid/patch_196.diff
https://github.com/squid-cache/squid/commit/0f33a01dca1796a4d73eff791a911bb1fb709cc0,27 Apr 2015,"Make StoreEntry provide Packable interface

Preparation for removal of C-style storeAppendPrintf()
functions and Packer wrapper class.",57,data/crawl/squid/patch_197.diff
https://github.com/squid-cache/squid/commit/07e6d76ea0db1d2376afa03d7c487aacf08a4354,27 Apr 2015,Update libsquidssl.la MemBuf use,8,data/crawl/squid/patch_198.diff
https://github.com/squid-cache/squid/commit/07721490c3ad87e49ef952c07c6bbb0aa323b09b,27 Apr 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/patch_199.diff
https://github.com/squid-cache/squid/commit/f0be997f655ca85aac6aa4952d3d9fb15426a180,27 Apr 2015,"MemBuf implements Packable interface

... detatch it from Packer wrapper class",191,data/crawl/squid/patch_200.diff
https://github.com/squid-cache/squid/commit/7bf7db6d64ed65e25cd9ad5fd6014af05a59f7d7,27 Apr 2015,"Rename MemBuf::vPrintf to MemBuf::vappendf

... inline with the Packable API method name",16,data/crawl/squid/patch_201.diff
https://github.com/squid-cache/squid/commit/98ded0a1a8dc138cb83601afcbc8afd3090c42a2,27 Apr 2015,"Update Packable API to implement vappendf() method

The backend classes actually implement the vappendf()
base function receiving va_list args object.

The Printf() implementations are all duplicate code. So
provide that function in terms of a virtual vappendf().

vappendf() is incidentally the name used by SBuf API for
this operation and avoids the global vprintf() libc
definition.",23,data/crawl/squid/patch_202.diff
https://github.com/squid-cache/squid/commit/52d2fdc0183bf6f26b146e965c1e5f3b543a641c,26 Apr 2015,"Create Packable interface class

Packer class model used C-style function pointers and a standalone
object to perform C-style trampoline for function/method calls.

C++ virtual methods offer to inline all that directly in the data store
objects and enforces type safety on the child object methods instead of
forcing manual type casting on developers.

Re-implement Packer as a wrapper class providing the Packable interface
for backward compatibility with Packer* code. Future code should inherit
objects directly from Packable and implement the interface.",109,data/crawl/squid/patch_203.diff
https://github.com/squid-cache/squid/commit/47429c5a7a28ea74a659a6e37f4f174728b4a857,26 Apr 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/patch_204.diff
https://github.com/squid-cache/squid/commit/20148bf2fb019708e44acd7f0670818eb6535ede,22 Apr 2015,Revert rev.14029,44,data/crawl/squid/patch_205.diff
https://github.com/squid-cache/squid/commit/a9423eea589bc093dfb0e32deb5f34d2c635b89f,21 Apr 2015,CBDATA: use class Lock for reference counting,44,data/crawl/squid/patch_206.diff
https://github.com/squid-cache/squid/commit/4a5c0d330569db3da593ddcc2665823a4f91e1a7,28 Mar 2015,Merged ICAP changes from trunk rev.13995,256,data/crawl/squid/patch_207.diff
https://github.com/squid-cache/squid/commit/b97421d24bb568febfcd9f7d78909e3fc435f131,28 Mar 2015,"Parser-NG: Convert the ICAP read buffer to an SBuf.

* Remove the double-buffering hack used to comm_read() ICAP responses as
  c-string then convert to MemBuf for parsing.

* Revert the HttpMsg parser API from MemBuf to c-string parameters.
  The internals did not make much use of the MemBuf abilities and it is
  simpler to retrieve c-string values directly from an SBuf than to go
  via a MemBuf conversion.",256,data/crawl/squid/patch_208.diff
https://github.com/squid-cache/squid/commit/26423ede408c18f847707a06e252972025b04a28,28 Mar 2015,Merge from trunk rev.13994,572,data/crawl/squid/patch_209.diff
https://github.com/squid-cache/squid/commit/9a622f3eb79658cde733cdecf2aa6419a64fcf86,27 Mar 2015,Use Security::PeerOptions in AnyP::PortCfg for basic TLS config,207,data/crawl/squid/patch_210.diff
https://github.com/squid-cache/squid/commit/b24e9ae70856a19ae8b79c764d456518ae0cf4fb,26 Mar 2015,"Move Ssl::parse_flags to Security::ParseFlags

... in preparation for making PeerOptions used by both server and client
configuation.",153,data/crawl/squid/patch_211.diff
https://github.com/squid-cache/squid/commit/52ba2948d72109726b47c34470a4334151766aa1,26 Mar 2015,"Fix Squid crash while an error page generated

When squid generated an error page which contains the ""%m"" formating code
but the authentication information is not available squid dies with
segfault.

This is a Measurement Factory project",5,data/crawl/squid/patch_212.diff
https://github.com/squid-cache/squid/commit/6bd62757606d944e54904bfc8555fcbece9958a6,21 Mar 2015,"Shuffle Ssl::parse_options to Security::ParseOptions

The function itself is generic, the options array entries are all
conditional so library agnostic.

Adjust the context creation functions to receive pre-parsed options
instead of the string to avoid circular dependency between libsquidssl
and libsecurity.",444,data/crawl/squid/patch_213.diff
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/patch_214.diff
https://github.com/squid-cache/squid/commit/10201568d9c80bb89cbe628c07dd043d72d20b50,04 Mar 2015,"MemBuf implements Packable interface

... detatch it from Packer wrapper class",191,data/crawl/squid/patch_215.diff
https://github.com/squid-cache/squid/commit/8ed3716ac1fe69ffcb051ff0972daa4ac2aba954,03 Mar 2015,"Rename MemBuf::vPrintf to MemBuf::vappendf

... inline with the Packable API method name",16,data/crawl/squid/patch_216.diff
https://github.com/squid-cache/squid/commit/7ea88f0a88ed01623e2ef6ce608adc6701d590c4,03 Mar 2015,"Update Packable API to implement vappendf() method

The backend classes actually implement the vappendf()
base function receiving va_list args object.

The Printf() implementations are all duplicate code. So
provide that function in terms of a virtual vappendf().

vappendf() is incidentally the name used by SBuf API for
this operation and avoids the global vprintf() libc
definition.",23,data/crawl/squid/patch_217.diff
https://github.com/squid-cache/squid/commit/d570dc5327a14de7349facb96f0b3217ee98b4ac,03 Mar 2015,"Create Packable interface class

Packer class model used C-style function pointers and a standalone
object to perform C-style trampoline for function/method calls.

C++ virtual methods offer to inline all that directly in the data store
objects and enforces type safety on the child object methods instead of
forcing manual type casting on developers.

Re-implement Packer as a wrapper class providing the Packable interface
for backward compatibility with Packer* code. Future code should inherit
objects directly from Packable and implement the interface.",109,data/crawl/squid/patch_218.diff
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/patch_219.diff
https://github.com/squid-cache/squid/commit/6147e648c1afa450324ca0b5437e6774c22075ff,28 Feb 2015,Merged from trunk rev.13957,6550,data/crawl/squid/patch_220.diff
https://github.com/squid-cache/squid/commit/9db9b92cd9c0c3711f86769502c06012fa500d12,26 Feb 2015,Merge from trunk rev.13952,994,data/crawl/squid/patch_221.diff
https://github.com/squid-cache/squid/commit/3609274174d8a46a72a2ab7e86bde1cdc38cb257,26 Feb 2015,Merged from trunk,6538,data/crawl/squid/patch_222.diff
https://github.com/squid-cache/squid/commit/fa38ceab52e190a9a790b8dc33a2346c2d9908fa,23 Feb 2015,Merged from trunk,197,data/crawl/squid/patch_223.diff
https://github.com/squid-cache/squid/commit/f1a5d07184dcb26486e83590f9993d16b5de05fa,23 Feb 2015,"Remove cache_peer_domain directive

Identical functionality is provided through cache_peer_access.

While this check appears at face value to be simpler than ACLs, the
reality is that:
* the difference is simply the time it takes to initialize and destruct
  an on-stack Checklist,
* processing the checks may take longer than ACLs (linked-list of string
  comparisons vs single tree lookup),
* ACLs are the common case due to their extra flexibility, and
* extra work is being done per-transaction just to check which of the
  two features is in use.

By removing we gain less code and configuration directives to work
around in the long term.",163,data/crawl/squid/patch_224.diff
https://github.com/squid-cache/squid/commit/de158bf5c04370ce9c5303a959f01b35373280b2,20 Feb 2015,Merge from trunk rev.13939,4740,data/crawl/squid/patch_225.diff
https://github.com/squid-cache/squid/commit/8eb0681ab8a53e87a9d397f03798ae90ef5b1e4d,19 Feb 2015,Merged from trunk,2125,data/crawl/squid/patch_226.diff
https://github.com/squid-cache/squid/commit/03714d23847ca8af08fa88c8f342b56269f0ca0f,19 Feb 2015,Implemented selective debugs() output for unit tests,44,data/crawl/squid/patch_227.diff
https://github.com/squid-cache/squid/commit/1ea677a6251194950bf0d82901fc87e1be5e6a38,19 Feb 2015,"basic_nis_auth: fail authentication on crypt() failures

... instead of crashing the helper.

""
Starting with glibc 2.17 (eglibc 2.17), crypt() fails with EINVAL (w/
NULL return) if the salt violates specifications. Additionally, on
FIPS-140 enabled Linux systems, DES or MD5 encrypted passwords passed to
crypt() fail with EPERM (w/ NULL return).
""",14,data/crawl/squid/patch_228.diff
https://github.com/squid-cache/squid/commit/d94cbaa8133459501d384c03f2fdc266704a4b34,12 Feb 2015,"HTTP/1.1: Remove refresh_pattern ignore-auth violation

The original intent for this option was to improve caching. However
HTTP/1.1 permits caching of authenticated messages under conditions
which Squid does check for and obey already.

The legacy popularity of this option from old Squid without the HTTP/1.1
compliant behaviour is now just forming a security and privacy abuse.",30,data/crawl/squid/patch_229.diff
https://github.com/squid-cache/squid/commit/163ae26957d4e781050b8234d13fe82bc0870e35,09 Feb 2015,Merge from trynk rev.13918,244,data/crawl/squid/patch_230.diff
https://github.com/squid-cache/squid/commit/0203ae29639d7be6eae2a316131174019c6fcfee,08 Feb 2015,Bug 4176: Digest auth too many helper lookups,15,data/crawl/squid/patch_231.diff
https://github.com/squid-cache/squid/commit/056577f16b7fd613635702a1bac91ddcb42ec8e6,04 Feb 2015,Merge from trunk rev.13907,2332,data/crawl/squid/patch_232.diff
https://github.com/squid-cache/squid/commit/719815a0a35087094f0254e9c5b77fc1ca6ac297,01 Feb 2015,"Cleanup: migrate CachePeer to CBDATA_CLASS API

Replace the alloc/free for CachePeer with new/delete from
the CBDATA_CLASS API.

Shuffle class member default values to constructor.

Shuffle class cleanup code from the (3!) different mechanisms
where it was being done to the class destructor. Also
releasing some memory which was previously leaked on
reconfigure.

Drop the now unused CBDUNL type definition and peerDestroy()
cleanup handler for CachePeer.",222,data/crawl/squid/patch_233.diff
https://github.com/squid-cache/squid/commit/a5ea775169885e224f977702e8a759c4044b868a,31 Jan 2015,"Per-rule refresh_pattern matching statistics

.. to make it blindingly obvious from the cachemgr report which rules
are completely useless. Such as when the global dot pattern (.) is
placed ahead of custom rules, or one rules pattern is always a subset
of an earlier pattern.

This also allows sysadmin to tune refresh_pattern ordering so most
commonly matching rules are first.",26,data/crawl/squid/patch_234.diff
https://github.com/squid-cache/squid/commit/e8fd04de7b757db01f11b2ba8aa7d091e287b7b0,31 Jan 2015,"Stop emitting (Proxy-)Authentication-Info for Negotiate

This header is not defined for use by RFC 4559, and there seem to
be no clients actually using it.

The syntax Squid was using to emit the details was also clashing
with the syntax defined for use in Digest which is becoming the
standardized ABNF syntax for the header in general.",22,data/crawl/squid/patch_235.diff
https://github.com/squid-cache/squid/commit/84ae6223b79d41ce4918928b6374baccc72c4e80,25 Jan 2015,"Revert HttpMsg::parse API from MemBuf to c-string

It is simpler and more performant to incrementally convert the I/O
buffers to SBuf using c-string export to legacy code than MemBuf.

HttpMsg::parse API did not really make much use of MemBuf, so we can
remove that and avoid performance regressions later in ICAP I/O buffer
conversion.",263,data/crawl/squid/patch_236.diff
https://github.com/squid-cache/squid/commit/bf1934c0d97e1baf628bd566f5b73a9251e56194,23 Jan 2015,Merge from trunk rev.13875,451,data/crawl/squid/patch_237.diff
https://github.com/squid-cache/squid/commit/dbf55289570fd9d516da2324993e4bceea73eeaa,21 Jan 2015,"Moved PID file management from Coordinator to Master.

This move is the first step necessary to avoid the following race condition
among PID file deletion and shared segment creation/destruction in SMP Squid:

  O1) The old Squid Coordinator removes its PID file and quits.
  N1) The system script notices Coordinator death and starts the new Squid.
  N2) Shared segments are created by the new Master process.
  O2) Shared segments are removed by the old Master process.
  N3) New worker/disker processes fail due to missing segments.

TODO: The second step (not a part of this change) is to delete shared memory
segments before PID file is deleted (all in the Master process after this
change).


Now the Master process receives signals and is responsible for forwarding them
to the kids.

The kids does not install default signal handler for shudown signals (SIGINT,
SIGTERM) after a signal received. If a second shutdown signal is received then
squid imediatelly terminates the event loop and exits.

When the ""kill-parent-hack"" is enabled the kids are sending the kill signal
to master process and master process forward it to other kids too.

Also a small regression added: The PID file can no longer be renamed using
hot reconfiguration. A full Squid restart is now required for that.

This is a Measurement Factory project.",424,data/crawl/squid/patch_238.diff
https://github.com/squid-cache/squid/commit/093c6381470c901deafe53742b7b7126ea1d0581,20 Jan 2015,Merge from trunk rev.13866,29431,data/crawl/squid/patch_239.diff
https://github.com/squid-cache/squid/commit/6b634dc323fdfd75bac737a38faeb171fce705df,20 Jan 2015,Bug 4066: Digest auth nonce indefinite rollover,19,data/crawl/squid/patch_240.diff
https://github.com/squid-cache/squid/commit/32d3025c499ae188ac8cc3e67175356b1c5aee54,19 Jan 2015,Portability: Make strict compilers happier with rev.13860,2,data/crawl/squid/patch_241.diff
https://github.com/squid-cache/squid/commit/efc238716eb68db2888faac60423184a894f5483,18 Jan 2015,"Support rotate=N option on access_log

Add a rotate=N option to access_log directive to set per-log what the
retained log count will be. At present it is only used by the stdio:
logging module, which is also the only one to use logfile_rotate
directive.

If this option is absent (as will be the common case) the log rotation
defaults to using the value of logfile_rotate directive.

Also, add missing dump output of other access_log options if they differ
from the defaults.

The use-cases for this are:

1) Unix fifo logging requires all the stdio: module operations except
that the normal rotate/rename operation is NOT performed on the fifo
socket. It makes more sense to add this option which can also meet case
#2 than to create a whole new module just for fifo.

2) managing only some access_log files with a third-party log manager.
Those specific logs need rotate=0, but the Squid managed logs may
require non-0 values.",88,data/crawl/squid/patch_242.diff
https://github.com/squid-cache/squid/commit/3248e962c06e59482489d3b903064ab9ff732ad4,16 Jan 2015,"Non-HTTP bypass

Intercepting proxies often receive non-HTTP connections. Squid cannot currently
deal with such connections well because it assumes that a given port receives
HTTP, FTP, or HTTPS traffic exclusively. This patch allows Squid to tunnel
unexpected connections instead of terminating them with an error.

In this project, we define an unexpected connection as a connection that
resulted in a Squid error during first request parsing. Which errors trigger
tunneling behavior is configurable by the admin using ACLs.

Here is a configuration sketch:

  # define what Squid errors indicate receiving non-HTTP traffic:
  acl foreignProtocol squid_error ERR_PROTOCOL_UNKNOWN ERR_TOO_BIG

  # define what Squid errors indicate receiving nothing:
  acl serverTalksFirstProtocol squid_error ERR_REQUEST_START_TIMEOUT

  # tunnel everything that does not look like HTTP:
  on_first_request_error tunnel foreignProtocol

  # tunnel if we think the client waits for the server to talk first:
  on_first_request_error tunnel serverTalksFirstProtocol

  # in all other error cases, just send an HTTP ""error page"" response:
  on_first_request_error respond all

  # Configure how long to wait for the first byte on the incoming
  # connection before raising an ERR_REQUEST_START_TIMEOUT error.
  request_start_timeout 5 seconds

The overall intent of this TCP tunnel is to get Squid out of the communication
loop to the extent possible. Once the decision to tunnel is made, no Squid
errors are going to be sent to the client and tunneled traffic is not going to
be sent to Squid adaptation services or logged to access.log (except for a
single summary line at the end of the transaction). Connection closure at the
server (or client) end of the tunnel is propagated to the other end by closing
the corresponding connection.

This patch also:

 Add ""on_first_request_error"", a new ACL-driven squid.conf directive that can
be used to establish a blind TCP tunnel which relays all bytes from/to the
intercepted connection to/from the intended destination address. See the sketch
above.
The on_first_request_error directive supports fast ACLs only.

 Add ""squid_error"", a new ACL type to match transactions that triggered a given
Squid error. Squid error IDs are used to configure one or more errors to match.
This is similar to the existing ssl_error ACL type but works with
Squid-generated errors rather than SSL library errors.

 Add ""ERR_PROTOCOL_UNKNOWN"", a Squid error triggered for http_port connections
that start with something that lacks even basic HTTP request structure. This
error is triggered by the HTTP request parser, and probably only when/after the
current parsing code detects an error. That is, we do not want to introduce
new error conditions, but we want to treat some of the currently triggered
parsing errors as a ""wrong protocol"" error, possibly after checking the parsing
state or the input buffer for some clues. There is no known way to reliably
distinguish malformed HTTP requests from non-HTTP traffic so the parser has
to use some imprecise heuristics to make a decision in some cases.
In the future, it would be possible to add code to reliably detect some popular
non-HTTP protocols, but adding such code is outside this project scope.

 Add ""request_start_timeout"", a new squid.conf directive to trigger a new
Squid ERR_REQUEST_START_TIMEOUT error if no bytes are received from the
client on a newly established http_port connection during the configured
time period. Applies to all http_ports (for now).

No support for tunneling through cache_peers is included. Configurations
that direct outgoing traffic through a peer may break Squid.

This is a Measurement Factory project",819,data/crawl/squid/patch_243.diff
https://github.com/squid-cache/squid/commit/7dcca85b904e395fd71ddb45ba20d22d77e7bfdd,14 Jan 2015,Merge from trunk,37059,data/crawl/squid/patch_244.diff
https://github.com/squid-cache/squid/commit/7eb91e0780507c473659d3f5daf0397398097b17,02 Jan 2015,Merged from trunk,928,data/crawl/squid/patch_245.diff
https://github.com/squid-cache/squid/commit/ced8def38409d2e3f76af4428a823678e46d24eb,01 Jan 2015,"Cleanup: fix most 'unused parameter' warnings

... and several bugs hidden by lack of this check:

* url_rewrite_timeout parser/dumper using wrong cf.data.pre
  parameter definition.

* url_rewrite_timeout parser/dumper using wrong object for
  state data.
  Global a Config object instead of parameter object.
  Preventing future use of multiple Config objects. There is
  more to be done as the Timeout value itself is not stored
  as part of the object apparently detailing the timeout.

* request_header_add directive dump() omitting directive
  name in mgr:config output.

* dead code as HTCP packet handlers for NOP, MON, SET

* mime icons download operation incorrectly initialized.
  was using the 'view' access parameter to set download
  access permission.

* peerCountHandleIcpReply() assertions testing validity
  after pointers already used. This would lead to segfault
  on errors, now leading to assertion logging.


Only the default built code was checked and updated at this
time. There are 62 known warnings still appearing due to
parameters being only used inside conditional code, possibly
more issues in code not enabled in this build and certainly
a lot more in the stubs and unit tests which were not checked.",786,data/crawl/squid/patch_246.diff
https://github.com/squid-cache/squid/commit/a47eb4777fd9ca9b6bbaa907a2fc28304e26af88,31 Dec 2014,Merged from trunk,196,data/crawl/squid/patch_247.diff
https://github.com/squid-cache/squid/commit/836a7ffc27f7934243c8f54aaf95f157d99b1898,31 Dec 2014,ntlm_sspi_auth: convert to new base64 API,40,data/crawl/squid/patch_248.diff
https://github.com/squid-cache/squid/commit/24804af2c9929f4bda4281d36dfdfacfd20cbb6b,31 Dec 2014,"negotiate_sspi_auth: fix various build errors

* fix convenience library dependency detection

* convert to new base64 coding API

* remove goto's",81,data/crawl/squid/patch_249.diff
https://github.com/squid-cache/squid/commit/4b13a7ceb1ad15eef5951625dfe6592bc4ebc93a,30 Dec 2014,Merged from trunk,17675,data/crawl/squid/patch_250.diff
https://github.com/squid-cache/squid/commit/bb64d87960915b8f4e5ba159049d5c9d5e545e01,30 Dec 2014,Fix 'field precision specifier '.*' expects argument of type 'int',20,data/crawl/squid/patch_251.diff
https://github.com/squid-cache/squid/commit/af31a408c4a907380323bc81b31790fbdebb4f6b,30 Dec 2014,ntlm_fake_auth: fix compile errors after rev.13785,6,data/crawl/squid/patch_252.diff
https://github.com/squid-cache/squid/commit/aadbbd7d080ef1662bfd7ea568edbb29f25fdd72,30 Dec 2014,"Crypto-NG: Base64 crypto replacement

The existing Squid base64 code had ambiguous copyright licensing. In
particular it only referenced a dead URL for source copyright
ownership details. In all likelihood this was for an Open Source
implementation, but we dont have sufficient record of the original
license terms to be certain without a long investigation.

It has also been heavily modified and customized over the decades
since importing whih complicates the issue a lot.

It also does not match any of the common industry context-based API
patterns for encoders/decoders.


This patch replaces that logic with GPLv2 licensed code from the
Nettle crypto library. Either linking the library dynamically or in
its absence embedding the logic via our libmiscencoding library.

It also updates all code to the new API, and as a byproduct removes
several layers of deprecated wrapper functions which have grown in
over the years.",839,data/crawl/squid/patch_253.diff
https://github.com/squid-cache/squid/commit/44ad873e32fc005ee66dbc96828dc5e4301f449a,30 Dec 2014,Simplified MSNT basic auth helper,1113,data/crawl/squid/patch_254.diff
https://github.com/squid-cache/squid/commit/f53969cc1ff3aecd36eeb25487e8f668862ed49e,20 Dec 2014,SourceFormat Enforcement,14329,data/crawl/squid/patch_255.diff
https://github.com/squid-cache/squid/commit/1de9145cbe289e2883c184ca6799be8be097207a,20 Dec 2014,Rip out most of the configuration file logic,230,data/crawl/squid/patch_256.diff
https://github.com/squid-cache/squid/commit/685277d8fcb4ba6b1f1a66a634937764c31744d4,19 Dec 2014,"negotiate_kerberos_auth: MEMORY keytab and replay cache support

1) Checks for MEMORY: keytab support and reads the keytab from disk into
   MEMORY to improve performance (i.e. read keytab only at startup and
   nerver again)

2) Add option for replay cache type. Allows to set replay cache to none
   to improve performance ( may reduce security a bit )

3) Add option for replay cache directory.  If /var/tmp is not the best
   location you can choose a different location.",492,data/crawl/squid/patch_257.diff
https://github.com/squid-cache/squid/commit/98340a7b8aeafac88486185909cb35d8e12830f8,16 Dec 2014,"Bug 4164: SEGFAULT when %W formating code used in errorpages

Squid will crash inside ErrorState::Dump if not authentication configured for 
squid. In this case ErrorState::auth_user_request is NULL and trying to access
a method of this object will cause segfault to squid.",2,data/crawl/squid/patch_258.diff
https://github.com/squid-cache/squid/commit/5de5c2d0686b91fabccbdab4a612a7db2e325037,05 Dec 2014,"HTTP/2: handle 'PRI' method found in HTTP/1.x traffic

draft-ietf-httpbis-http2-16 section 11.6 registers the method PRI.
""
  This method is never used by an actual client.
  This method will appear to be used when an HTTP/1.1 server or
  intermediary attempts to parse an HTTP/2 connection preface.
""

If seen with a non-2.0 version number it means some client or proxy has
mishandled an HTTP/2.0 connection preface and corrupted the traffic.",11,data/crawl/squid/patch_259.diff
https://github.com/squid-cache/squid/commit/32fd6d8a226663eb89ddd797ab6c5f3dc2e2d9dd,04 Dec 2014,"url_rewrite_timeout directive

This patch adds the url_rewrite_timeout directive.

When configured, Squid keeps track of active requests and treats timed out
requests to redirector as failed requests. 

url_rewrite_timeout format:

  url_rewrite_timeout timeout time-units on_timeout=<fail|bypass|retry|use_configured_response> [response=<quoted-string>]

The url_rewrite_timeout directive can accept the on_timeout argument to allow
user configure the action when the helper request times out.
The available actions are:

     fail: squid return a ERR_GATEWAY_FAILURE error page
     bypass: the url is not rewritten.
     retry: retry the request to helper
     use_configured_response: use a response which can be configured using the
         the response= option

Example usage:
    url_rewrite_timeout 30 seconds \
        on_timeout=use_configured_response \
        response=""OK url=http://example.com/support""

This is a Measurement Factory project",535,data/crawl/squid/patch_260.diff
https://github.com/squid-cache/squid/commit/f0174f5b12ac8b7f51baefffac9bea21e2a6196a,01 Dec 2014,"FTP FEAT error handling

Some FTP severs respond to a FEAT command with 5xx status code. Squid sends 
an invalid response in these cases which can confuse the client.

This patch fixes Squid to always send a valid 211 reply to client which
lists at least the EPSV and EPRT ftp commands which supported by Squid
regardless of the origin server support.

This patch also fixes a memory leak when FEAT replies processed.

This is a Measurement Factory project",84,data/crawl/squid/patch_261.diff
https://github.com/squid-cache/squid/commit/d48fa91ca3ac6e2fecbdf0aaabac1bfc5a29722e,01 Dec 2014,Add statistics couting for missing mem_obj (bug 4131),5,data/crawl/squid/patch_262.diff
https://github.com/squid-cache/squid/commit/01bd87d861361032aeb9f8bfda938581bfa43101,20 Nov 2014,"Logging fast things

In many cases HITs logged with zero response times. The logging entries are
correct, those transaction took less than a millisecond. However, to better
monitor Squid performance and to optimize things further, a user may want to
see more precise response time measurements logged.

Squid already computes response times with microsecond resolution
(timeval::tv_usec), which would be enough for any modern measurement, but
Squid loses that precision due to tvSubMs conversion.

This patch add configurable ""precision"" for time-related fields such as %tr,
using a .n syntax similar to the syntax used by the well-known printf(3) API
to mean ""maximum field width"".

Examples:
  %tr   -- 0 -- millisecond precision (no change compared to today)
  %.3tr -- 0.123 -- microsecond precision (after this project)
  %.6tr -- 0.123456 -- nanosecond precision (year 2050 trading platform??)

This is a Measurement Factory project",238,data/crawl/squid/patch_263.diff
https://github.com/squid-cache/squid/commit/204d529bd7a197e0e846daaeb07d88b9f6236054,13 Nov 2014,Merge from trunk rev.13702,813,data/crawl/squid/patch_264.diff
https://github.com/squid-cache/squid/commit/6825b101b1773a3f5abcdc00010cdbce03cb5d63,09 Nov 2014,"Make helper queue size configurable, with consistent defaults and better overflow handling.

This patch adds a queue-size=N option to helpers configuration. This
option allows users to configure the maximum number of queued requests
to busy helpers. We also adjusted the default queue size limits to be
more consistent across all helpers and made Squid more robust on some
queue overflows:

- external_acl helpers
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows, then the ACL returns ACCESS_DUNNO.

    Unpatched code uses the number of running children as the maximum
    queue size. If the queue is overloaded, then the ACL returns ACCESS_DUNNO.

-redirector/storeID helpers
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows and redirector_bypass configuration option
    is set, then redirector is bypassed. Otherwise, if overloading
    persists for more than 3 minutes squid quits with a FATAL message.
    If the redirector_bypass/storeID_bypass is set then the default queue_size
    is set to 0 for backward compatibility.

    Unpatched code uses 2*number-of-running-children as the maximum queue size.
    If the redirector_bypass/storeID_bypass is set then helper bypassed if all
    of the children are busy.
    If the queue is overloaded and redirector_bypass/storeID_bypass is not set
    then squid quits with a FATAL message.

- ssl_crtd/ssl_crtd_validator helpers.
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows, then helpers are bypassed. If overloading persists
    for more than 3 minutes squid quits with a FATAL message.

    The default size limit and overflow behavior has not changed.

- Authentication helpers
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows and overloading persists for more than 3 minutes,
    then squid quits with a FATAL message.

    The default size limit and overflow behavior has not changed.

This is a Measurement Factory project",321,data/crawl/squid/patch_265.diff
https://github.com/squid-cache/squid/commit/c7a9b22c5af49f4f398d3924d0842d59c886790b,07 Nov 2014,"Parser-NG: HTTP Parser structural redesign

This update is to lay the groundwork for several planned future projects
implementing protocol specific parsers, seperating the currently
intertwinned client connection management and HTTP protocol parsing
logics, and for zero-copy processing of transactions using SBuf.


This patch renames the HttpParser class as RequestParser and moves it
into the Http::One:: namespace as child of an Http::Parser class with
generic API accessors for shared use by other HTTP message parsers.

The class API
 - is updated to process both the request-line and HTTP mime headers,
returning an incomplete parse result until the entire headers parts of
the message have been received.
 - now contains accessor methods for retrieving the method, URI,
protocol, mime headers block (as an SBuf) and some metrics about those.
 - the old request_offsets structure and similar offset details are no
longer exposed.
 - now emits 414 and 431 HTTP status codes as appropriate.

The parser is made partially incremental and some use of Tokenizer is
added for faster parsing. There is more that can be done to further
speed up parsing of slow or very large requests.

Much of the code from client_side.cc parseHttpRequest() and also the
header-field code from mime_headers.cc has been moved into the parser
class. The client_side.cc code now simply runs the main
Http1::RequestParser::parse() method then uses accessors to retrieve
and process the parse results.

A unit test for incremental parsing has been added to testHttpParser.

Also, the HttpRequestMethod class is moved into the Http:: namespace and
library to reduce dependencies on the parser class outside the library.


The gains made so far from incremental parse, reducing parser passes and
zero-copy SBuf are offset by several temporary performance regressions
added converting SBuf for legacy code use. These are marked for later
removal.",4803,data/crawl/squid/patch_266.diff
https://github.com/squid-cache/squid/commit/de95413f57b25f362022b41a4df024e27393a932,05 Nov 2014,Merge from trunk rev.13687,5079,data/crawl/squid/patch_267.diff
https://github.com/squid-cache/squid/commit/92d6986ddb6efce85370f6bcf446cdfc53046e9f,04 Nov 2014,"Bug 1961 part 2: redesign of URL handling.

Move the HttpRequest::login detail into class URL. Renaming to userInfo
as per the RFC 3986 defined name for this URI piece.

Convert the details to SBuf gaining several minor str*() removals in
the process and a simpler FTP login parser based on SBuf capabilities.

Also, updated the base64 encoder API used for converting between URI
userInfo and Basic authentication header token. Gaining better control
over the length of maximum token size and a small speedup from pre-known
input length.",188,data/crawl/squid/patch_268.diff
https://github.com/squid-cache/squid/commit/7451e5ad6ac9da02c6325c81faaaa7a0d2e4d6a7,29 Oct 2014,"ext_kerberos_ldap_group_acl: -n option to disable automated SASL/GSSAPI

The -n option disables the automated Kerberos authentication
(SASL/GSSAPI) to AD and requires username/password (SASL/SIMPLE)
instead.

Also, improvements in caching Kerberos credentials for setup with low
Squid cache TTL.",670,data/crawl/squid/patch_269.diff
https://github.com/squid-cache/squid/commit/2eb6054faf2503474cb500cdc4cb87aed073744b,29 Oct 2014,"negotiate_kerberos_auth: output group= kv-pair

Output group= if negotiate_kerberos_auth can retrieve AD groups from
Kerberos ticket for further processing by squid to external helpers.",24,data/crawl/squid/patch_270.diff
https://github.com/squid-cache/squid/commit/3637c7dfe6c370b1459a0a444ed5036dce9ec274,10 Oct 2014,Merge from trunk rev.13638,578,data/crawl/squid/patch_271.diff
https://github.com/squid-cache/squid/commit/3c26b00aa3a2d8b515af363d289113d5f4726049,07 Oct 2014,"sslproxy_cert_sign_hash configuration option

Browser vendors will get rid of SSL certificates that use SHA-1 to generate
the hash that is then signed by the CA. For example, Google Chrome will start
to show an ""insecure"" sign for certificates that are valid after 1.1.2016 and
will generate a warning page for certificates that are valid after 1.1.2017 [1],
[2],[4]. Microsoft will block certificates with SHA-1 after 1.1.2017 [3].

This patch:
  1) Add a new configuration option to select the signing hash for
     generated certificates: sslproxy_cert_sign_hash.

  2) If sslproxy_cert_sign_hash is not set, then use the sha256 hash.

[1] https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/2-R4XziFc7A/YO0ZSrX_X4wJ
[2] https://code.google.com/p/chromium/issues/detail?id=401365
[3] http://blogs.technet.com/b/pki/archive/2013/11/12/sha1-deprecation-policy.aspx
[4] http://googleonlinesecurity.blogspot.ch/2014/09/gradually-sunsetting-sha-1.html 

This is a Measurement Factory project",68,data/crawl/squid/patch_272.diff
https://github.com/squid-cache/squid/commit/309bd365235cd34e58b88727c9d9a21b685147fb,05 Oct 2014,Merged from trunk rev.13627,2653,data/crawl/squid/patch_273.diff
https://github.com/squid-cache/squid/commit/a74922b5dae83c00ec62fa9b3fafad4af432f4f4,03 Oct 2014,"Windows: remove alternative main()

As a side effect this causes Windows builds to use the wrapper function
for handling exceptions.",63,data/crawl/squid/patch_274.diff
https://github.com/squid-cache/squid/commit/fccd4a86cb1e76445cac533fe0ef10aa55273189,22 Sep 2014,"Cleanup: rename ServerStateData to Client

* rename class

* move Server.* to clients/Client.*",194,data/crawl/squid/patch_275.diff
https://github.com/squid-cache/squid/commit/bbc27441269e19c5308f829a7656d52ee6b7cfef,13 Sep 2014,Boilerplate: update copyright blurbs on src/,23490,data/crawl/squid/patch_276.diff
https://github.com/squid-cache/squid/commit/6e96d41538a60ced489d2d3e226117768d0ceaba,02 Sep 2014,"Support receiving PROXY protocol version 1 and 2.

PROXY protocol has been developed by Willy Tarreau of HAProxy for
communicating original src and dst IP:port details between proxies and
load balancers in a protocol-agnostic way.

stunnel, HAProxy and some other HTTP proxying software are already
enabled and by adding support to Squid we can effectively chain these
proxies without having to rely on X-Forwarded-For headers.

This patch adds http_port mode flag (require-proxy-header) to signal the
protocol is in use, parsing and processing logics for the PROXY protocol
headers on new connections, and the proxy_protocol_access control to
manage inbound connections.
 The indirect client security/trust model remains unchanged. As do all
HTTP related logics on the connection once PROXY protocol header has
been received.


Furture Work:
 * support sending PROXY protocol to cache_peers
 * support receiving PROXY protocol on https_port
 * rework the PROXY parse logics as a Parser-NG child parser.",1337,data/crawl/squid/patch_277.diff
https://github.com/squid-cache/squid/commit/091c880dd2237fd4f0bc7f549736bd1caf0a580b,27 Aug 2014,"SSL Peek and Splice

The goal of this patch is to make SSL bumping decision after the origin server
name is known.

Peek and Splice peeks at the SSL client Hello message and SNI info if any 
(bumping step 1), sends identical or a similar Hello message to the SSL server
 and peeks at the SSL server Hello message (bumping step 2), and finally
decides to proceed with splicing or bumping the connection (bumping step 3).

After the step 1 bumping step completes the SNI information is available and
after the step 2 bumping step completes the server certificate is available.

The ssl_bump access list evaluated on every bumping step to select the bumping
mode to use. The new acl ""at_step"" can be used to match the current bumping
step.

In most cases:
 - if the user select ""peek"" bumping mode at step2 then at step3 can select
   one of the ""splice"" or ""terminate"" modes.
 - If the user select ""stare"" bumping mode at step2 then at step 3 can select
   one of the ""bump"" or ""terminate"" modes.

If the squid built with the SQUID_USE_OPENSSL_HELLO_OVERWRITE_HACK and the 
client uses openSSL library similar to the library used by squid then bumping 
is possible after ""peek"" bumping mode selection and ""splice"" after ""stare""
bumping mode selection.

The bump, terminate and splice are final decisions.

Example configurations:

acl step1 at_step  SslBump1
acl step2 at_step  SslBump2
acl step3 at_step  SslBump3

ssl_bump peek step1 all
ssl_bump splice step2 BANKS
ssl_bump peek step2 all
ssl_bump terminate step3 BLACKLIST
ssl_bump splice step3 all

This is a Measurement Factory project",2317,data/crawl/squid/patch_278.diff
https://github.com/squid-cache/squid/commit/c6649f6c62f90053f0bf0f162918a94f1d763b3d,26 Aug 2014,merge from trunk,14018,data/crawl/squid/patch_279.diff
https://github.com/squid-cache/squid/commit/22473932f193f6b98c0fff16f1d24159c844275d,23 Aug 2014,Cleanup: remove goto from logformat token parser,197,data/crawl/squid/patch_280.diff
https://github.com/squid-cache/squid/commit/3ac5bd881bf4eda91a239a9db7734be91d360822,23 Aug 2014,Sync with trunk rev.13542,101061,data/crawl/squid/patch_281.diff
https://github.com/squid-cache/squid/commit/943cdf6debefcbd851743a52088bc08aa5b7abe7,21 Aug 2014,Merge from trunk rev.13539,1994,data/crawl/squid/patch_282.diff
https://github.com/squid-cache/squid/commit/eacfca83ef8fa0e610644539cee10dbdc150bcff,19 Aug 2014,"Do not assert on native FTP ERR_TOO_BIG. Do not check for ERR_TOO_BIG twice.

The assertion occurred because both the FTP request parser and the generic
ConnStateData::checkHeaderLimits() code would try to write their own error
message to the user. Reworked all error reporting code in the FTP parser to
avoid writing early responses (that were bypassing the overall transaction
flow with various negative side effects such as lack of logging).

Removed ConnStateData::checkHeaderLimits(): We already have protocol-specific
checks for huge HTTP and FTP requests. There is no point in duplicating them.
Centralizing them sounds like a good idea, but a general checkHeaderLimits()
cannot produce protocol-specific errors messages that we need, so it hurts
more than it helps. Moreover, checkHeaderLimits() was handling errors
differently than protocol parsing code, making the code more complex overall.

All that remains from the checkHeaderLimits() code now is a single Must(),
checking that the protocol parsers did what they were supposed to do: Return
NULL to request more data after checking any applicable limits. If parsers do
not (a Squid bug!), the ConnStateData job gets killed (and connection gets
closed) as the last resort.

Added clientReplyContext::setReplyToReply() and
StoreEntry::storeErrorResponse() to handle storing of a response to an FTP
command parsing error. The old code was using ErrorState to store parsing
errors, but ErrorState is still HTTP-specific and cannot relay the right FTP
codes/reasons to the user. The setReplyToReply() sounds silly but it matches
the existing setReplyTo*() naming scheme well.

Make sure parsed native FTP command tokens are not even close to the String
buffer limit. These checks are not a firm guarantee, but are better than
nothing until we replace String.

Handle ClientSocketContext registration centrally because all parsers need it.

Call quitAfterError() on fatal native FTP errors. Probably not necessary due
to fssError handling code that closes the FTP control connection, but adds
helpful debugging and brings us closer to the HTTP error handling code.

Described ConnStateData::clientParseRequests().",305,data/crawl/squid/patch_283.diff
https://github.com/squid-cache/squid/commit/17437edfeb65511798e1c6956cacac4484c2be7b,19 Aug 2014,Merged from trunk rev.13534,7516,data/crawl/squid/patch_284.diff
https://github.com/squid-cache/squid/commit/154ea56667e82cf7217580817f9088397a86a694,13 Aug 2014,"Rearrange PROXY/1.0 parser

Add a first pass to confirm LF line terminator and wait for more bytes if
missing.",46,data/crawl/squid/patch_285.diff
https://github.com/squid-cache/squid/commit/a07a354fd0c528b6ce429fd39fdf2f8ae1283f17,12 Aug 2014,Merge from trunk rev.13532,7338,data/crawl/squid/patch_286.diff
https://github.com/squid-cache/squid/commit/1689cdbc1355cd1281cd3bdc791c1b13cec462fe,12 Aug 2014,Performance optimizations and polish,92,data/crawl/squid/patch_287.diff
https://github.com/squid-cache/squid/commit/8cb327e93a064e9886ccb57a4a85088976fe86c2,11 Aug 2014,"Fixed reporting of malformed -n values on the command line.

Test case: $ squid -n ' '
FATAL: Expected alphanumeric service name for the -n option but got: squid",6,data/crawl/squid/patch_288.diff
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/patch_289.diff
https://github.com/squid-cache/squid/commit/8f5ad4487a052db1dddea37d5867b8844e69dce4,10 Aug 2014,"Changes in response to Amos' squid-dev review dated 2014/08/08.

See inner commit messages for details.",312,data/crawl/squid/patch_290.diff
https://github.com/squid-cache/squid/commit/3cc0f4e721ce7550b008a4a9c410883eaa600c2a,10 Aug 2014,"Polishing in response to Amos' squid-dev review dated 2014/08/08.

The PASS value masking code in HttpHeader::packInto() is currently unused
because Squid does not (and cannot) use errorpages for native FTP errors.

It is [still] possible to configure ftp_port with transport=HTTP but it is
not clear what the exact effects of that configuration are, if any.

The ftp_port ftp-track-dirs option no longer accepts on|off values. Off is
still the default. Turn on using a valueless ""ftp-track-dirs"" option.

Other minor polishing touches.",249,data/crawl/squid/patch_291.diff
https://github.com/squid-cache/squid/commit/ecb19f1a0380320db5b2e82505f4c9cfdc3625b3,09 Aug 2014,"Centralized and documented FTP protocol ""version"" (1.1) definition.

Moved AnyP::PortCfg::setTransport() to the cache_cf.cc parsing code where it
currently belongs. AnyP code should not have protocol-specific pieces as it is
code shared among (or used by) many (ideally, all transfer) protocols.

TODO: Convert Http::ProtocolVersion from class into a function.",83,data/crawl/squid/patch_292.diff
https://github.com/squid-cache/squid/commit/43446566e3092dc7969e72f22b6c1362a4701784,07 Aug 2014,"Fixed HttpHdr::Private/NoCache(v) implementations and optimized their API.

These calls now avoid assertions and extra trailing commas when called with
empty names. The API now allows calling with a String() object, but still
needs more polishing work.


Moved common code from Ftp::Server::setReply and Ftp::Relay::createHttpReply()
into Ftp::HttpReplyWrapper().


Also removed the last non-job callbak from Ftp::Client, polished and synced
new FTP comments with the modern client/server/gateway/relay terminology, as
well as minimized changes compared to trunk.",152,data/crawl/squid/patch_293.diff
https://github.com/squid-cache/squid/commit/1ab04517e705e2aaa2afc9d45bb3dcb45e6030da,07 Aug 2014,"Converted some of the new FTP code to use SBuf and Tokenizer
instead of MemBuf, String, and c-string manipulations.",496,data/crawl/squid/patch_294.diff
https://github.com/squid-cache/squid/commit/d1f3d8f885784c89a822c35ddf6537aab3a3b925,06 Aug 2014,merge from trunk r13526,34418,data/crawl/squid/patch_295.diff
https://github.com/squid-cache/squid/commit/e7ce227f301a8f1ab73487d19da899fde7c18858,05 Aug 2014,"Polished for the official review, addressing several TODOs.

Use 1.1 version for FTP ports because FTP commands are sent on a
""persistent by default"" connection, just like HTTP/1.1.

Cleaned up Ftp::CtrlChannel, Ftp::DataChannel, and Ftp::Client object
construction and destruction.

Do not insist on USER command when intercepting FTP. Interception support
may still not work for other reasons, but USER does not seem to be required
since Squid gets request destination from the intercepted connection info.",695,data/crawl/squid/patch_296.diff
https://github.com/squid-cache/squid/commit/d3d92daafd6ebda0b0969b0f715af49e6b399d92,05 Aug 2014,"Updated configuration options

* Replace proxy-surrogate fag with require-proxy-header

* Revert follow_x_forwarded_for linkage with PROXY protocol.
  Add proxy_protocol_access directive for PROXY ACLs instead.

* set fast default for proxy_protocol_access when none configured.",102,data/crawl/squid/patch_297.diff
https://github.com/squid-cache/squid/commit/5517260ac271f3b217a1d7f8e955221ba4c1156a,05 Aug 2014,"Done moving FTP code around. Polished moved code to match new locations.

src/clients/FtpNative is now src/clients/FtpRelay. It was awkward to use a
non-noun ""Native"" as a class name, and the class was already described as
""relaying FTP"".",687,data/crawl/squid/patch_298.diff
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/patch_299.diff
https://github.com/squid-cache/squid/commit/8ea0d84754ce24036c43f6df893e667ae6d52b6d,30 Jul 2014,"Merged from trunk (r13515).
Needs more work to handle FTP adaptation failures better.",34061,data/crawl/squid/patch_300.diff
https://github.com/squid-cache/squid/commit/1b2ae44e445db019b4350710b8d07ad7c09559b9,30 Jul 2014,Merged from trunk rev.13515,31288,data/crawl/squid/patch_301.diff
https://github.com/squid-cache/squid/commit/48d63967418da187ba505d5cd60dd038d7ee3073,25 Jul 2014,Merged from trunk,1039,data/crawl/squid/patch_302.diff
https://github.com/squid-cache/squid/commit/3c082dbe95e628bdd403e9c9c7cdee189e88b019,25 Jul 2014,Log PROXY errors to cache.log,6,data/crawl/squid/patch_303.diff
https://github.com/squid-cache/squid/commit/36378e1216aff1897c3a186c3383087858a13b49,22 Jul 2014,"Fix unit test linker issues in testHttpReply and testStore

Also, update STUB files for comm.cc, event.cc, and libssl-squid.la",147,data/crawl/squid/patch_304.diff
https://github.com/squid-cache/squid/commit/8b505ba9bf9270634f5d414b54ee472fbc3d3ff8,18 Jul 2014,"Fix unit test issue after rev.1498

Moves service_name global definition to tools.h where it can be
accessible to more unit tests, in particular tests outside of
src/Makefile.am

Adds stub_SBuf.cc for use by unit tests not actually needing SBuf.",81,data/crawl/squid/patch_305.diff
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/patch_306.diff
https://github.com/squid-cache/squid/commit/6ad1457463368c12a610b2399a8356b0564d0e7a,13 Jul 2014,"ntlm_sspi_auth: fix various build errors

* Fix MinGW portability build errors

* Upgrade to current helper protocol.

Also, add SEND_TT helper macro for NTLM helpers",138,data/crawl/squid/patch_307.diff
https://github.com/squid-cache/squid/commit/fd2f300a989d209847a5035e7aca8fd1d395d931,12 Jul 2014,Merge from trunk,1722,data/crawl/squid/patch_308.diff
https://github.com/squid-cache/squid/commit/3bd97e7e4fa0fe45ef229aa9abb552d51c0bd4f2,12 Jul 2014,Split PROXY protocol parse into v1 and v2 methods,337,data/crawl/squid/patch_309.diff
https://github.com/squid-cache/squid/commit/6658cc16628b3811614185218b1a6511945db69e,12 Jul 2014,"Add AsyncJob::start functionality to ConnStateData for safe initialization

Unfortunately this means that PROXY protocol will no longer be able to
be used on https_port due to the sequencing of our SSL/TLS negotiation
code. That will need to be fixed later.",50,data/crawl/squid/patch_310.diff
https://github.com/squid-cache/squid/commit/7d341c2c9eb7ec506645fdcce6f94d656ea5413c,27 Jun 2014,Cleanup: simplify libTrie,288,data/crawl/squid/patch_311.diff
https://github.com/squid-cache/squid/commit/2da4bfe6a014dd29a0e00458b1c0cdbeb4d960c6,25 Jun 2014,SourceFormat Enforcement,69,data/crawl/squid/patch_312.diff
https://github.com/squid-cache/squid/commit/579b60e6eb80b629d8820e98f8bd4a5cb72f2350,24 Jun 2014,"Rock and shared memory caches fixes/improvements.

* Bug fixes:

Avoid ""FATAL: Squid has attempted to read data from memory that is not
present"" crashes. Improve related code.

Lifted 16777216 slot limit from rock cache_dirs and shared memory caches.
Caches larger than 256GB (assuming default 16KB cache_dir slot-size) require
this fix to use disk space beyond 256GB.  Also fixed rock disk space waste
warning.

Restored Squid ability to cache (in memory) when no disk caches are configured
which was lost during r12662 ""Bug 3686: cache_dir max-size default fails"" but
other bugs hid this problem.

Allow HITs on entries backed by a shared memory cache only.

Avoid store_client.cc ""entry->swap_filen > -1 || entry->swappingOut()"" asserts.

Make sure Squid dumps core and not just promises one when memory management
goes wrong.


* Significant RAM usage reduction:

Significantly reduced Large Rock (and slightly shared memory) RAM requirements
by not allocating 40 (and 12) bytes of unused RAM per cache slot.

Stop wasting 96 RAM bytes per slot for high-offset slots in large shared
caches with more than 16777216 slots. For example, a StoreMap for a 1TB shared
cache with default 16KB slot sizes (67108864 slots) occupied about 6.5GB of
RAM. After this change, the same information is stored in about 2.0GB because
unused anchors are not stored.


* Other improvements:

Document counter-intuitive round-robin cache_dir selection; decrease its bias.

Report IpcIo file name with errors and warnings to inform admin which
cache_dir needs troubleshooting or tuning.",923,data/crawl/squid/patch_313.diff
https://github.com/squid-cache/squid/commit/e3ab28c046c7926b91f636ace623bae8c5563618,24 Jun 2014,Merged from trunk r13474.,39636,data/crawl/squid/patch_314.diff
https://github.com/squid-cache/squid/commit/cfb88efb1e75015ac6c38fd975eb5c565f1c36b1,24 Jun 2014,"Prep for merge from trunk: undo branch r13313, r13312, and r13311 that were
temporary undoing trunk r13266, r13269, and r13270 (std::vector migration).",1311,data/crawl/squid/patch_315.diff
https://github.com/squid-cache/squid/commit/cbae7ab934f3ef47708417006498aae458f15283,21 Jun 2014,Support PROXY protocol version 2,100,data/crawl/squid/patch_316.diff
https://github.com/squid-cache/squid/commit/00d0ce87e4fb95bde86ebb57dc394554b06b169e,21 Jun 2014,"Support for PROXY protocol version 1

This protocol enables other proxies to easily relay indirect client IP
and port details without altering the HTTP (or other) protocol within the
connection.",234,data/crawl/squid/patch_317.diff
https://github.com/squid-cache/squid/commit/53af97a997d2061545e9e9419c414c59a9293c78,02 Jun 2014,Merge from trunk,1107,data/crawl/squid/patch_318.diff
https://github.com/squid-cache/squid/commit/56a35ad1f0c66cdad042e28cfd1a1f41521d4d5d,02 Jun 2014,"Do not leak ex_data for SSL state that survived reconfigure.

SSL_get_ex_new_index() allocates a new index on every call, even if its
parameters remain unchanged. It should be called once per process
lifetime.

Besides leaking, this 12 year-old(!) bug could probably make some SSL
code misbehave during reconfigure because reconfigure would change the
supposedly constant ex_data indexes.",42,data/crawl/squid/patch_319.diff
https://github.com/squid-cache/squid/commit/a2d9e49ca5aedf32d3d966bd458792f950e86669,01 Jun 2014,Merged from trunk,567,data/crawl/squid/patch_320.diff
https://github.com/squid-cache/squid/commit/3616c90cbfa0c2dac5a985c4c406df55f7caa89a,31 May 2014,"Cleanup: de-duplicate auth_param program parameter code

Moves the ""program"" parse and dump code into Auth::Config.

Also, changes API to Auth::Config::dump() to not dump any config settings
for schemes which are not configured with a ""program"". Including scheme
specific settings.

Also, fixes missing Digest ""utf8"" parameter in config dump.",119,data/crawl/squid/patch_321.diff
https://github.com/squid-cache/squid/commit/ec980001a1ef8e8c98b57557835c10a223433942,31 May 2014,"Cleanup: de-duplicate auth_param realm configuration

Move realm parse and config dump logics to Auth::Config base object.
This de-duplicates Basic, Digest (and future schemes ie Bearer) config
processing code.  Also makes realm available to NTLM and Negotiate
schemes, although at present it remains unused by those schemes.

Also, convert the realm parameter string to an SBuf. Removing the need
for some memory maintenance code.",63,data/crawl/squid/patch_322.diff
https://github.com/squid-cache/squid/commit/34d16e503b7e811fc939f289eac4c6247b4c4a6a,30 May 2014,Merged from trunk,32,data/crawl/squid/patch_323.diff
https://github.com/squid-cache/squid/commit/ba1b862c8e2fb4ac6002432c2f16041119c02758,29 May 2014,merge from trunk r13423,5144,data/crawl/squid/patch_324.diff
https://github.com/squid-cache/squid/commit/a303dd529164316d5501b9bd367abfeea154db63,29 May 2014,merge from trunk r13423,32,data/crawl/squid/patch_325.diff
https://github.com/squid-cache/squid/commit/e621268f3b76ef70b4c721efe60948a0ee983f5c,29 May 2014,merge from trunk,5112,data/crawl/squid/patch_326.diff
https://github.com/squid-cache/squid/commit/0309fc406832ea1103fb4172cadab9f6d6abe8cb,28 May 2014,Cleanup: de-duplicate handling of auth_param 'children',30,data/crawl/squid/patch_327.diff
https://github.com/squid-cache/squid/commit/52793564799466eadcedab778701cdfcabcc570e,27 May 2014,Merged from trunk,34010,data/crawl/squid/patch_328.diff
https://github.com/squid-cache/squid/commit/f8e4867b19deb674adb3d6c2456918e88cdbfb37,23 May 2014,"Merged from trunk (r13356).
Needs more work to handle FTP adaptation failures better.",54767,data/crawl/squid/patch_329.diff
https://github.com/squid-cache/squid/commit/20b79af2dab9e030c07ddb122c54ce705d2a140e,22 May 2014,merge from trunk r13421,2308,data/crawl/squid/patch_330.diff
https://github.com/squid-cache/squid/commit/1d8201f784e0735b240f60d6f918de0b1bcfb12a,17 May 2014,Merge from trunk r13414,1109,data/crawl/squid/patch_331.diff
https://github.com/squid-cache/squid/commit/7a4fa6a090dccd464b3cc0b360d2913e552a1668,15 May 2014,"Fix outstanding build issues and parser audit results

* Give SBuf I/O buffer directly to Http1::RequestParser

* Redesign parser state engine to represent the current state
  being parsed instead of previous completed. This allows much
  more incremental resume of a parse and reliable consume() of
  the input buffer as sections complete instead of complex byte
  accounting outide the parser.

* Maintain an internal counter of bytes parsed and consumed by
  the parser instead of a buffer offset. This allows much more
  reliable positioning of the state/section boundaries.

* Remove erroneous fprintf debug left in previous commit.

* Redesign HttpRequestMethod constructor to drop end parameter.

* Redesign all parser unit tests. Marking RFC non-compliance
  for future fixing.",2297,data/crawl/squid/patch_332.diff
https://github.com/squid-cache/squid/commit/07074f5f2bbb6670e71d1d29b5f638b14ee388d1,12 May 2014,Merged from trunk,50,data/crawl/squid/patch_333.diff
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/patch_334.diff
https://github.com/squid-cache/squid/commit/5aca9cf2e5a7c901386831bca92d0339c6e5e60e,07 May 2014,"Cleanup: Refactor external_acl_type format codes representation

Removes enum_external_acl_format::format_type from external_acl.cc
by replacing it with enum Format::ByteCode_t.

Several missing logformat codes related to URL display have been added
to the logformat token set for general use.

Several of the external ACL format codes have been added to
Format::ByteCode_t without equivalent logformat TokenTableEntry's at
this stage as both desirable token naming and access to the data to
produce them generically is unclear.

The external_acl_type parser is updated to accept logformat tokens
wherever an equivalent exists and map directly to the ByteCode_t values.

The mgr:config report dumper is also updated to output the logformat
tokens. But as yet the official deprecation has not been done in
squid.conf.",409,data/crawl/squid/patch_335.diff
https://github.com/squid-cache/squid/commit/36104f294b96037f7ee7674fa3448314b409eafe,06 May 2014,Merge fron trunk rev.13398,327,data/crawl/squid/patch_336.diff
https://github.com/squid-cache/squid/commit/fb93aaa47625d637f9523ea77f29b2871c1b8817,05 May 2014,url_fake_rewrite: concurrency channel support,13,data/crawl/squid/patch_337.diff
https://github.com/squid-cache/squid/commit/6cb2818da50678f522eef8ad482e04bbebeb1ac3,05 May 2014,"Support concurrency channels in Digest authentication helpers

All bundled digest helpers will now automatically detect the existence
of a concurrecy channel-ID and adjust responses appropriately.

The auth_param children concurrency= parameter can now be set to any
valid value without needing to alter the helper binary. This resolves
issues upgrading to default-on concurrency on the digest auth interface.",44,data/crawl/squid/patch_338.diff
https://github.com/squid-cache/squid/commit/31855516f574fe5bea7e2f9b33147adbaf854c5a,02 May 2014,merge from trunk,78970,data/crawl/squid/patch_339.diff
https://github.com/squid-cache/squid/commit/f0124266e7e0fdffe16bfcb54ea12023a5069aea,30 Apr 2014,Merge from trunk,4822,data/crawl/squid/patch_340.diff
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/patch_341.diff
https://github.com/squid-cache/squid/commit/a23223bf7fb54242ade248d5be8376f7527cc881,25 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
Ssl::PeerConnector class

This patch investigates the new Ssl::PeerConnector class. This class connects
Squid client-side to a SSL cache_peer or SSL server. It is used by 
TunnelStateData and FwdState to initiate and establish the SSL connection.
This class handles peer certificate validation.

The caller receives a call back with PeerConnectorAnswer. In the SSL connection
is not established because of an error, an error object suitable for error
response generation is attached to PeerConnectorAnser

The Ssl::PeerConnector class includes the old SSL initialization code from
FwdState class.

This is a Measurement Factory project",1239,data/crawl/squid/patch_342.diff
https://github.com/squid-cache/squid/commit/7f06a3d8d7e9569685ac575db1a0f6cf5681024a,22 Apr 2014,"SBuf: convert HttpMethod internals

Update the internal string/image representation of an HTTP
method to be an SBuf string. Including the global registered
methods index.

Also,
 * remove RequestMethodStr() wrapper functions
 * remove remainders of obsolete extension_methods feature
 * remove remainders of obsolete RequestMethodStr[] array
 * fix potential cache key error from http/MethodType.h
   enum ordering.
 * polished many debugs involving method",289,data/crawl/squid/patch_343.diff
https://github.com/squid-cache/squid/commit/4795daa2059af1e226cea497a3612a900af9afc5,12 Apr 2014,Use SBufList instead of wordlist to collect data for mgr:config,529,data/crawl/squid/patch_344.diff
https://github.com/squid-cache/squid/commit/fbe0f9525b22f226c996b26c331517fbbba3630d,12 Apr 2014,Fix broken acl_access dumper,4,data/crawl/squid/patch_345.diff
https://github.com/squid-cache/squid/commit/dfad5100f30862632628277b0860e8c7f57f33b3,12 Apr 2014,More conversions; now builds,87,data/crawl/squid/patch_346.diff
https://github.com/squid-cache/squid/commit/9b859d6f6217cd95f114d184facebc4015b0ea19,12 Apr 2014,"Interim. Remove useless wordlist.h and SBufList.h includes, more SBufList conversions",122,data/crawl/squid/patch_347.diff
https://github.com/squid-cache/squid/commit/8966008ba2d61288cc91c9b7e201fddeaf520552,11 Apr 2014,Interim. Refactor ACL::dump to SBufList instead of wordlist*,242,data/crawl/squid/patch_348.diff
https://github.com/squid-cache/squid/commit/47ba817c8a77eebfc7661efc36578f14895970cb,10 Apr 2014,Implement custom formatting for SBuf size distribution cachemgr report,12,data/crawl/squid/patch_349.diff
https://github.com/squid-cache/squid/commit/36c84e199a995f639a720362195bda49368c6a53,06 Apr 2014,"Lifted 16777216 slot limit from rock cache_dirs and shared memory caches.
Also fixed rock disk space waste warning.

Rock store and shared memory cache code used entry and slot limit as if
the two were the same. In large caches, the number of entry slots may exceed
the number of entries supported by Squid (16777216 entries per store). This
is especially likely with large caches storing large entries (many slots
per entry with maximum number of entries) or large caches using small slot
sizes.

AFAICT, the bug led to the ""tail"" of cache storage being unused and cache
entries being purged even though there was still space to store them. Also,
Squid was allocating smaller shared memory tables (and temporary cache index
build tables) than actually needed for the configured cache sizes.

Note that this change does not remove the per-store 16777216 entry limit.


The old [small] rock warning about wasted disk space assumed that a cache
entry occupies exactly one slot. The updated warnings do not.


Also fixed and simplified db scanning condition during cache index build.",333,data/crawl/squid/patch_350.diff
https://github.com/squid-cache/squid/commit/0dd12dbad45fd09fd46d8f0b64eb3ace32435cdf,03 Apr 2014,Merge from trunk,22838,data/crawl/squid/patch_351.diff
https://github.com/squid-cache/squid/commit/cbcd99df7bc872c89683411c56ee8a32249ff72c,03 Apr 2014,"Restructure parser state management

Old parser tracked completed states. Which led to several bugs in
resuming parse of a 'block' of data, end of block detection.
Instead track the state/block currently being processed.

Thanks to Alex Rousskov for identifying this as the source of several
bugs.",177,data/crawl/squid/patch_352.diff
https://github.com/squid-cache/squid/commit/0e2f538320899fc48509259cd045bb6febc8c5f7,24 Mar 2014,"Parser-NG: Convert the ConnStateData input buffer to SBuf

Prepare the way to efficiently parse client requests using SBuf based
parser-ng.

IoCallback stores a raw-pointer to the ConnStateData::In::buf member
object rather than an SBuf reference to the backing MemBlob or char*
store so that only the short (blocking) FD_READ_METHOD() call needs to
provide any synchronous guarantees. We also particularly need a direct
(raw) pointer to the ConnStateData member to prevent the possible
read/consume collisions causing problems with the ConnStateData callback
and avoid having to merge two separate SBuf.",212,data/crawl/squid/patch_353.diff
https://github.com/squid-cache/squid/commit/243a89a4e4d65ea77a8f2d9373606b1a89cee2ef,23 Mar 2014,Merge from trunk,987,data/crawl/squid/patch_354.diff
https://github.com/squid-cache/squid/commit/3997074984ecdb73b6848e25ec04671777404143,22 Mar 2014,Fix if-else mismatch in rev.13319,6,data/crawl/squid/patch_355.diff
https://github.com/squid-cache/squid/commit/11978f8425d2316cb681daae48d530d6fcf6439e,22 Mar 2014,"Portability: Basic auth NIS helper depends on crypt()

Detect crypt.h before permitting the helper to build.

Also, if crypt() function is missing build the helper to output BH code
with an error message instead of failing to build.",8,data/crawl/squid/patch_356.diff
https://github.com/squid-cache/squid/commit/903d27daf52f98a660ca9559faae9545672f6bf9,19 Mar 2014,"xmalloc cleanup: remove code relying on XMALLOC_TRACE, XMALLOC_DEBUG, and mallinfo(3).",545,data/crawl/squid/patch_357.diff
https://github.com/squid-cache/squid/commit/24fe24be38427ccba2471cea3d1e7813eeb48e08,18 Mar 2014,"Make sure Squid dumps core and not just promises one
when memory management goes wrong.",4,data/crawl/squid/patch_358.diff
https://github.com/squid-cache/squid/commit/4e4c52effcd62c2fdcce4703dd9e839a80864d1a,17 Mar 2014,"Undo trunk r13270: ""Refactor Vector and Stack to STL counterparts""
to avoid stability issues related to std::vector migration.",824,data/crawl/squid/patch_359.diff
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/patch_360.diff
https://github.com/squid-cache/squid/commit/b005403744308d3ed83d709a3688e03c08965dbe,17 Mar 2014,Removed MEM_GEN_TRACE,86,data/crawl/squid/patch_361.diff
https://github.com/squid-cache/squid/commit/ae61f2a70b4839175e1896fb984276ec9b122686,17 Mar 2014,Remove XMALLOC_TRACE and references to sbrk(2),348,data/crawl/squid/patch_362.diff
https://github.com/squid-cache/squid/commit/95ba9ef030988980219c23e3f95abdf30563df99,16 Mar 2014,Remove XMALLOC_TRACE and all references to sbrk(2),348,data/crawl/squid/patch_363.diff
https://github.com/squid-cache/squid/commit/e72876256bfa7ef6d4060947ce08b31cd505a369,07 Mar 2014,Convert ConnStateData::In::buf to an SBuf,126,data/crawl/squid/patch_364.diff
https://github.com/squid-cache/squid/commit/e237d339173256649fed0041d9f1accbd05a1cb9,04 Mar 2014,"Fix helper ID number assignment

Since helpers are now dynamically started the old method of allocating
an ID number based on the current start sequence can result in many
helpers being assigned overlapping ID numbers.

Use InstanceID template instead to assure a unique incremental ID is
assigned to each helper no matter when it is started.",77,data/crawl/squid/patch_365.diff
https://github.com/squid-cache/squid/commit/074d6a40c66faa228e8863e791655f9502028501,21 Feb 2014,"Cleanup: un-wrap C++ header includes

Coding guideline is now that standard C++ headers are not to be
wrapped in HAVE_ macros.

* Remove HAVE_ macros for currently wrapped C++ headers.
  Includes removing autoconf checks.

* Replace C includes with C++ includes where possible

Also, <cstdio> / <stdio.h> has issues on 64-bit systems and a
portable fixed version is provided by libcompat via squid.h
It should not be included anywhere in the Squid sources.",1304,data/crawl/squid/patch_366.diff
https://github.com/squid-cache/squid/commit/572d2e31eb73a7db23f4b00f14ac45bc2667ac29,21 Feb 2014,"Bug 3186, Bug 3628: Digest authentication always sending stale=false for nonce",100,data/crawl/squid/patch_367.diff
https://github.com/squid-cache/squid/commit/d4018dfbb63f3abf209b7d579fe22b8fa518dd44,19 Feb 2014,"dynamic_cert_mem_cache_size option related fixes part2: ""make check"" fails",4,data/crawl/squid/patch_368.diff
https://github.com/squid-cache/squid/commit/00589b8e290a3a688bd445ade43854687a59deb7,17 Feb 2014,Merge from trunk,4446,data/crawl/squid/patch_369.diff
https://github.com/squid-cache/squid/commit/bf989d30dc66242addf34024040a1720a6c975cb,16 Feb 2014,squidclient: polish and documentation,43,data/crawl/squid/patch_370.diff
https://github.com/squid-cache/squid/commit/95c25f6682acfdbb45b3056bc8aa247e3fc4c88e,16 Feb 2014,"squidclient: support verbosity levels

This makes the -v option repeatable. By default no debug is displayed.
Each time -v is repeated the level of debug message verbosity is raised.

Three levels of verbosity are currently defined:
 0 - no output except ERROR messages.
 1 - display HTTP request sent
 2 - display actions taken connecting to server",105,data/crawl/squid/patch_371.diff
https://github.com/squid-cache/squid/commit/cf6e492ba533f7d0b528e0f0f86b93de5b4c1716,16 Feb 2014,squidclient: polish and update help display,73,data/crawl/squid/patch_372.diff
https://github.com/squid-cache/squid/commit/5a429fae7f03095c8cc7d75f37905674014e3358,13 Feb 2014,"Bug 4001: remove use of strsep()

The strsep() function is not defined by POSIX. Additionally
auto-tools has been having some obscure issues detecting
or linking the provided implementation into libcompat on
Windows and Solaris respectively. Which are the two known
OS requiring it.

Investigation of its use in Squid revealed that it can be
replaced with strcspan() which is both portable and more
efficient since it also removes the need for several
strdup()/free() operations used to protect Squid from
strsep() memory fiddling.",222,data/crawl/squid/patch_373.diff
https://github.com/squid-cache/squid/commit/af3adcbafb6a6e5b6f554261cf5873991c000861,13 Feb 2014,Revert rev.13271,207,data/crawl/squid/patch_374.diff
https://github.com/squid-cache/squid/commit/06260232598e33ad77118fcdeda33717173fc441,13 Feb 2014,Bug 4026: SSL and adaptation_access does not handle aborted connections,207,data/crawl/squid/patch_375.diff
https://github.com/squid-cache/squid/commit/328d863501af0d417ea130aef47a86f450d77987,12 Feb 2014,Refactor Vector and Stack to STL counterparts,825,data/crawl/squid/patch_376.diff
https://github.com/squid-cache/squid/commit/3cf8f5c1d8e2de4843abae4b59025e9f683d653d,11 Feb 2014,"Remove Vector, Stack and related unit tests",716,data/crawl/squid/patch_377.diff
https://github.com/squid-cache/squid/commit/85b067e359c24a0f643b44293992829ca7a1eb44,11 Feb 2014,Reworked cbdata to use std::vector to be able to have a random access iterator,23,data/crawl/squid/patch_378.diff
https://github.com/squid-cache/squid/commit/5179094896d37ae9cb4e0f697d8c0a6eb86b31a5,07 Feb 2014,Merged from trunk,413,data/crawl/squid/patch_379.diff
https://github.com/squid-cache/squid/commit/1ca54a54f6b63bb389dc7a5a0270f771cf9b82d6,07 Feb 2014,"SourceLayout: shuffle URLScheme to AnyP::UriScheme

This class holds a generic protocol agnostic Scheme representation.

* rename const_str() member to c_str() since it produces a const C-string
 (char*) representation.

* Remove some unecessary dependencies.

* Cleanup the coding style to match guidelines.",390,data/crawl/squid/patch_380.diff
https://github.com/squid-cache/squid/commit/0bc9ee522392bd31c8d6c405d0ba4976e8aa1a4e,06 Feb 2014,Merged from trunk,81,data/crawl/squid/patch_381.diff
https://github.com/squid-cache/squid/commit/a77f476578dd97df51953ab1825e834b831b193a,06 Feb 2014,Fix r13257 commit,40,data/crawl/squid/patch_382.diff
https://github.com/squid-cache/squid/commit/cf2155f28a0333dc57adb63c537c3ea30cbf0344,24 Jan 2014,"Enable -n command line option for non-Windows Squid builds

This command line option is used on Windows to name the service instance
of Squid being run and/or managed. At this point it still only has
useful effect on Windows, but can now be used by components on other
systems as well.

Show the running instance service name in cacehmgr and -v output.

Also remove _WIN_SQUID_DEFAULT_SERVICE_NAME macro which duplicated the
APP_SHORTNAME macro. This changes the Windows service name from Squid to
squid (lower case) on future Squid-3 for Windows.",112,data/crawl/squid/patch_383.diff
https://github.com/squid-cache/squid/commit/cb03c661889952a82565097fc8e585c5dd629892,23 Jan 2014,"FEAT response with excessive whitespace

Some broken Microsoft FTP servers seem to be sending the following
response to the FEAT command:

211-FEAT
....SIZE
....MDTM
211 END

A single dot above represents a single space character, so instead of
one space character they send 4 (four) space characters at the beginning
of the internal FEAT lines.

When this happens, the FTP client who sent the FEAT request to Squid
gets nothing; its connection hangs.

The problem is inside FtpHandleFeatReply function while parses the commands 
list. Arguments corresponding to an emty string passes to String::substr call
(e->value.substr(beg-raw, end-raw) call) causing failure to a Must clause.

This patch: 
 - fixes and adds checks to avoid processing lines which does not include a
   command.
 - try to detect extra spaces before commands
 - try to add the same number of spaces before commands inserted by squid 
   to FEAT commands list (EPSV and EPRT commands)",20,data/crawl/squid/patch_384.diff
https://github.com/squid-cache/squid/commit/a37ec7fa9e6d67647727e3e459cadf5aa5fcecb3,20 Jan 2014,"Avoid comm.cc:170: ""Comm::IsConnOpen(conn)"" assertions
by being more careful with the client data connection state.

Do not forward a 125/150 response to the client until the client data
connection is ready. Do not forward it at all if the data connection was
already closed by the time we got a server 125/150 response. If we have to
wait, we do not really forward the original 125/150 response but generate our
own 150. That may change.",57,data/crawl/squid/patch_385.diff
https://github.com/squid-cache/squid/commit/4fb971a08a878052187adc4ad3cc22df25580b39,20 Jan 2014,"Cleanup refreshCountsStats() cache manager code

* Replace a #define macro with local static function.

* Replace pointer parameter with reference

* suppress display of histograms where there are no records and so no
  meaningful content to be displayed.",77,data/crawl/squid/patch_386.diff
https://github.com/squid-cache/squid/commit/92436224bad0bd4f005cd862c84cd2ccfd54e4c9,05 Jan 2014,Merged from upstream,6348,data/crawl/squid/patch_387.diff
https://github.com/squid-cache/squid/commit/c07db6981c05699ca1054260bb121e0c7aecd6ad,05 Jan 2014,Merged from trunk,119,data/crawl/squid/patch_388.diff
https://github.com/squid-cache/squid/commit/c24f7fb6c27201f9d5cbc5c6f19b5b061ac36b2b,05 Jan 2014,Merge from trunk,6342,data/crawl/squid/patch_389.diff
https://github.com/squid-cache/squid/commit/ef04d94cb59d5a89cb2f9c97f544b08fbf61f13e,03 Jan 2014,"Merge storeentry-refactor, fix store unit test",105,data/crawl/squid/patch_390.diff
https://github.com/squid-cache/squid/commit/04ebce5515f51ee9b8e81a6c70f3abc3aeb38302,03 Jan 2014,Got rid of Store.cci,104,data/crawl/squid/patch_391.diff
https://github.com/squid-cache/squid/commit/8af14d5e7cf0e50735a4542b3b32c2a8808cf901,02 Jan 2014,Merged from trunk,6265,data/crawl/squid/patch_392.diff
https://github.com/squid-cache/squid/commit/fa2301d26b90cbd1298eb7740e8827c7746cd9d2,01 Jan 2014,"Initial Large Rock and Collapsed Forwarding support.

Large Rock: Support disk (and shared memory) caching of responses exceeding
one db slot (or one shared memory page) in size. A single db slot/page size is
still limited to 32KB (smaller values can be configured for disk caches using
the newly added cache_dir slot-size option). Removal of old rock cache dir
(followed by squid-z) is required -- the on-disk db structure has changed.

Collapsed Forwarding: Optionally merge concurrent cachable requests for the
same URI earlier: After the request headers have been parsed (as before), but
now _before_ the response headers have been received. Merging of requests
received by different SMP workers is supported. Controlled by the new
collapsed_forwarding directive in squid.conf. Disabled by default because all
but one of the merged requests have to be delayed (until the response headers
are received) for the merging to work, which may be worse than forwarding all
concurrent requests immediately. The overall feature idea and request
eligibility conditions are based on Collapsed Forwarding in Squid2.


Summary of other important changes (merged branch log contains the details):

* Tightened StoreEntry locking. Split StoreEntry::lock() into ""just lock"" and
  ""update entry reference time"" interfaces, addressing an old XXX.  Improved
  entry lock/unlock debugging. Needs more work.

* Adjusted StoreIOState::write() API to allow callers detect write errors.

* Simplified MemObject::write() API to remove an essentially unused callback.

* Mark client streams that sent everything as STREAM_COMPLETE. The old code
  used STREAM_UNPLANNED_COMPLETE if the completed stream was associated with a
  non-persistent connection, which did not make sense to me and, IIRC, led to
  store entry aborts even though the entries were not damaged in any way.

* mem_hdr::hasContigousContentRange() now returns true for empty ranges.

* Support ""appending"" ReadWriteLock state that can be shared by readers and
  the writer. The writer promises not to update key metadata (except growing
  object size and next pointers) and readers promise to be careful when
  reading growing slices.

* Fixed StoreEntry::mayStartSwapOut() logic to handle terminated swapouts.

* Improved STORE_MEM_CLIENT detection and documented known (and mostly old)
  StoreEntry::storeClientType() problems.

* Removed StoreEntry::hidden_mem_obj hack.

* Polished StoreEntry debugging to report more info, less noise. Use e: prefix.

* Added a script to extract store entry(ies) debugging from cache.log.",6196,data/crawl/squid/patch_393.diff
https://github.com/squid-cache/squid/commit/9d4e9cfbacb7de44098f09fa2c2e6c1801dfe1ba,31 Dec 2013,SourceFormat Enforcement,265,data/crawl/squid/patch_394.diff
https://github.com/squid-cache/squid/commit/0efb166e0de7babf871c43fb57869dcd77b243f8,11 Dec 2013,Merged from trunk,8617,data/crawl/squid/patch_395.diff
https://github.com/squid-cache/squid/commit/dcd84f807886121b9c725dec786a830bd1c8afb4,06 Dec 2013,Merged from trunk 13172.,19565,data/crawl/squid/patch_396.diff
https://github.com/squid-cache/squid/commit/d4806c91642a65454c9dc6f65e7ed03e50a76313,06 Dec 2013,"Add key_extras to proxy authentication schemes.

The key_extras value is a ""quoted string"" with logformat %macro support. It is
appended to request line for the authentication helper.

Example usage:
   auth_param basic key_extras ""thePort:%>lp""
   auth_param digest key_extras ""LocalIP=%>la:%lp""

This is a Measurement Factory project.",513,data/crawl/squid/patch_397.diff
https://github.com/squid-cache/squid/commit/0a720258ebe0806d0ee7953ab35df886f867a899,29 Nov 2013,"Support libecap v1.0, allowing asynchronous adapters and eCAP version checks.

After these changes, Squid can support eCAP adapters built with libecap v1.0,
but stops supporting adapters built with earlier libecap versions (due to API
changes). The new libecap version allows Squid to better check the version of
the eCAP adapter being loaded as well as the version of the eCAP library being
used. This should help with migration to libecap v1.0.


Expose [running] main event loop as a global so that modules can add engines.",269,data/crawl/squid/patch_398.diff
https://github.com/squid-cache/squid/commit/c9dbe80fad1d56d5f186dd49f97401016ba88daf,21 Nov 2013,Bug 3782: Digest authentication not obeying nonce_max_count,14,data/crawl/squid/patch_399.diff
https://github.com/squid-cache/squid/commit/896f0b9b08b52e2cbbd9bb61afc41a725830437e,13 Nov 2013,"Add EPRT and EPSV commands to FTP FEAT response if not already there
because Squid FTP gw supports both even if the FTP origin server does not.",21,data/crawl/squid/patch_400.diff
https://github.com/squid-cache/squid/commit/89b1d7a2c87a4a12cedbf9a302a223fcdd6faefe,13 Nov 2013,"Propagate FTP server connection closures to idle FTP gw clients but
carefully close the FTP server connection upon receiving an FTP 221 response.

FTP gateway code pins server connections; when there is no traffic, the
client-side code holds on to the server connection. The old code did not
notice pinned server connection closure until it was time to write the next
FTP request to that connection. Squid now monitors the idle pinned server
connection and closes the client connection if the server connection closes
(or, to be more precise, if the server connection gets marked as ready for
reading).

Client-side monitoring of an idle pinned connection ends when the server side
starts using the pinned connection again (because the server side becomes
responsible for monitoring EOF conditions then). Added
borrowPinnedConnection() and related methods to distinguish validation of
pinned connection and responsibility transfer.

Careful closure of the FTP server connection upon receiving an FTP 221
response is necessary to avoid the client-side idle server connection
monitoring code closing the client connection upon detecting server-side EOF
_before_ the client side had enough time to forward that 221 response to the
not-yet-idle client. The latter may take some time because, in part, the
response may have to go through an ICAP RESPMOD service first.",138,data/crawl/squid/patch_401.diff
https://github.com/squid-cache/squid/commit/000e664babaf79d53f8f0a009662decebebf5c15,04 Nov 2013,"Initial support for gatewaying FTP EPRT and EPSV commands.

Client side validates the IPv6-friendly commands, but the server side
independently decides which of the four standard data connection establishment
commands to use. In practice only PASV and EPSV commands are sent because
Squid still does not support active FTP connections on the server side.

Moved EPSV- and some PASV-handling code from proxy-specific ftp.cc into
general FtpServer.cc for the client-side gateway code to reuse.",932,data/crawl/squid/patch_402.diff
https://github.com/squid-cache/squid/commit/b6a7fc859fe563a1c6b66914bc83b5081d94d7bb,01 Nov 2013,"Make Http parser incremental

This makes the parser track the start of the un-parsed buffer region and
resume parsing at that point instead of reset to the beginning.

- add state to mark completion of the first line (request-line)
- add unit test for incremental parse states including BWS
- make the state tracking member of HttpParser private",97,data/crawl/squid/patch_403.diff
https://github.com/squid-cache/squid/commit/7cc02995c18707755f9fbfd1d33da10ef73f4092,30 Oct 2013,Merged from trunk,9,data/crawl/squid/patch_404.diff
https://github.com/squid-cache/squid/commit/e87619bc9ef4a77a952bac8b54e7d6ee7f2c2356,30 Oct 2013,"CacheMgr: normalize pconn report output

- table rows start with TAB
- table cell delimiter is TAB
- table header cells start with TAB SP",9,data/crawl/squid/patch_405.diff
https://github.com/squid-cache/squid/commit/46445347f9c3f7e11cd1626599cfe7c9a18b0367,31 Oct 2013,"Implement stubs for external_acl, auth/libauth, auth/libacls, time",248,data/crawl/squid/patch_406.diff
https://github.com/squid-cache/squid/commit/9d870886ca9593d370ab493f0d85a61e88c6325d,28 Oct 2013,"End ""227 Entering Passive Mode (...)"" response with CRLF as required by FTP.",2,data/crawl/squid/patch_407.diff
https://github.com/squid-cache/squid/commit/4e3760b17d0b13ce648e48760b495fdd225a2836,27 Oct 2013,Broken: define and use stub_libauth.cc,111,data/crawl/squid/patch_408.diff
https://github.com/squid-cache/squid/commit/77f6d1d2986563d71ab09a413bdca3a61dc81422,18 Oct 2013,"Append ""Connection: close"" to OPTIONS requests when icap_persistent_connections
is off.

This brings OPTIONS requests behavior inline with REQMOD and RESPMOD.",4,data/crawl/squid/patch_409.diff
https://github.com/squid-cache/squid/commit/dfba0ccff835ebb9efc590823b68ae0877c9e0a7,04 Oct 2013,Merge SBuf.,3292,data/crawl/squid/patch_410.diff
https://github.com/squid-cache/squid/commit/b309d6a60aefd6135d15ade1e6cdc12d09ae82fa,04 Oct 2013,Merged from trunk,5928,data/crawl/squid/patch_411.diff
https://github.com/squid-cache/squid/commit/184e49edf5285b26f58302f588ffe3fb121fd10c,03 Oct 2013,Merged from trunk,1178,data/crawl/squid/patch_412.diff
https://github.com/squid-cache/squid/commit/17852883df926d74fb04fe5d2bbfa281090574a8,01 Oct 2013,"Remove dnsserver and external DNS helper API

The external DNS helper API places limits on Squid DNS lookups per second
low enough to noticably affect the HTTP requests per second which can be
served.

Request for comments about proposed removal 2 years ago produced feedback
stating that the helper was needed for local name resolution. This is
now available since 3.4 mDNS extensions.

A more recent request for reasons for keeping the helper API have
produced only two responses over the period of several months. Both
indicating that the API is no longer necessary for the business cases of
a year or so ago.

As such and because the helper fails to operate sufficiently on several
major operating systems and the API is difficult to maintain it is being
removed as of Squid-3.5.",1269,data/crawl/squid/patch_413.diff
https://github.com/squid-cache/squid/commit/73656056cdcface25c015c755e9a3688acd404fc,30 Sep 2013,"Remove COSS

This storage type has been superceded by Rock storage since 3.2.",3034,data/crawl/squid/patch_414.diff
https://github.com/squid-cache/squid/commit/4ebcf1ceefe28d5320166e5bad97a72ef7944c5c,27 Sep 2013,"negotiate_kerberos_auth: upgrade to present group= keys

Use the new kv-pair protocol extensions for emitting group details
directly at the time of authentication. group=X key-value pair is
used to emit the Kerberos SIDS values presented by MS Active
Directory environments.

Also, update the Hiemdal library support for recent library versions.

Also, polish the Kerberos and LDAP Group related code to avoid memory
leaks and improve C++ coding style.",1392,data/crawl/squid/patch_415.diff
https://github.com/squid-cache/squid/commit/ab768952b257c72e31782b83a99c4d482190d720,29 Aug 2013,"Added Expect:100-continue to FTP STOR wrappers for adaptation to avoid stalling
FTP clients that expect an FTP 150 (OK to send data) response from the FTP
server before actually uploading content.

If an adaptation service starts waiting for the PUT request body before
starting to produce an adaptation response (allowing the transaction to reach
the FTP server), the FTP transaction will get stuck. It is not clear why this
has not been a [known] issue with real HTTP requests containing
Expect:100-continue.",4,data/crawl/squid/patch_416.diff
https://github.com/squid-cache/squid/commit/a2c7f09a21c2f8424cff36953942e1f07281cc2e,29 Aug 2013,"Reorganized FTP response storage/wrapping to fix multi-line response gatewaying

Multi-line FTP control responses use various line prefixes to tell the client
that the response continues to the next line. Some multi-line responses use a
""CODE-"" line prefix. Some, like FEAT, must use a single space as a line prefix
(except for the first line that uses ""CODE-""). Squid was removing the virgin
prefix and then using ""CODE-"" prefix for all lines, breaking FEAT and probably
other responses.

While modifying original multi-line prefix was a bad idea, leaving FTP
multi-lines ""as is"" does not work either because HTTP wrapping removes leading
spaces which are significant in FEAT and other FTP responses.

Squid now preserves leading multi-lines by wrapping them using quoted strings.
Adaptation services wishing to interpret multi-lines must unquote any quoted
FTP-* header field values before adaptation and return quoted values back (if
needed).  Which FTP-* header values are quoted and which are not may be
value-dependent and may change. Quoting and unquoting requires handling of
HTTP \-CHAR escape sequences.

The last FTP response line has to be treated specially because it has [more]
strict syntax, has to be interpreted by Squid, subjected to squid.conf ACLs,
and is more likely to be adapted. Squid used to wrap all multi-lines into
multiple fields of an FTP-Reason header while only storing the ""reason"" from
the last multi-line there. That was messy, and became prohibitively so when
multi-line quoting of multi-lines was introduced.

Now Squid wraps all multi-lines except the last one using FTP-Pre header.  All
FTP-Pre lines may be wrapped as quoted strings. FTP-Status and FTP-Reason
headers are used for the FTP code and reason phrase from the last line:

  FTP-Pre: ""123-first line""
  FTP-Pre: "" second line""
  FTP-Status: 123
  FTP-Reason: from the third line

Needs more work if there are adaptation services that merge multiple FTP-Pre
header values together.",145,data/crawl/squid/patch_417.diff
https://github.com/squid-cache/squid/commit/7c293fc7fb992e937ea2f6fafaabb6a02e94f319,27 Aug 2013,"Use more portable 227 (PASV) response format.

RFC1123 says that ""The format of the 227 reply to a PASV command is not well
standardized"". Evidently, we should not use ""227 =a,b,c,d,p1,p2"" or 
""227 Entering Passive Mode. A1,A2,A3,A4,a1,a2"" formats. Some nf_ct_ftp
versions block responses that use those alternative syntax rules!",7,data/crawl/squid/patch_418.diff
https://github.com/squid-cache/squid/commit/73950ceb1794fada8d593195d05155345bd7afca,27 Aug 2013,Merged from trunk r12948.,16213,data/crawl/squid/patch_419.diff
https://github.com/squid-cache/squid/commit/7f15543d7ffd5f28f0569b2da4044d541c728956,23 Aug 2013,"Render adaptation X-Response-Info and X-Response-Desc meta values in FTP errors
caused by adaptation (e.g., an ICAP service blocking an FTP command)

Requires adaptation history to be enabled, which can be achieved by logging
adaptation meta headers to access log (%adapt::<last_h) or setting
adaptation_masterx_shared_names in squid.conf

Long term, the contents of the error message should be configurable via
error message templates (which may include these semi-standard meta headers).",73,data/crawl/squid/patch_420.diff
https://github.com/squid-cache/squid/commit/cabb71673183cfc613e69daad66c661338f6e468,23 Aug 2013,"When writing FTP errors to the client, omit ERR_NONE error name.",3,data/crawl/squid/patch_421.diff
https://github.com/squid-cache/squid/commit/ad70acff8f82012b09ec2628ab522de4922d08cd,23 Aug 2013,"Provide user with more details on forwarding/adaptation errors.

In addition to ""421 Service Unavailable"", print %c and %E errorpage info.
Needs more work to make FTP error messages configurable, just like they are
for HTTP.",26,data/crawl/squid/patch_422.diff
https://github.com/squid-cache/squid/commit/cff221eee04e679b0aff9b7455a0a3cc7fb08166,23 Aug 2013,"Initial support for active FTP downloads via the FTP PORT command.

Squid accepts PORT command on the client side, but still uses passive transfer
on the server side. The PORT command response is not sent to the client until
the server-side PASV command succeeds. The data connection to the client is
not opened until Squid receives the RETR command from the client.

Squid requires either PORT or PASV command before data transfers. RFC 959 says
PORT is optional because default ports can be used. 

RFC 959 also seems to imply that Squid should originate active connections to
client from port 20.  The code to do that is commented out for now because it
would prevent support for concurrent data connections. The code configuring
this outgoing (but to-client) connection may need more work as we do a lot
more for outgoing to-server connections.

Active data upload has not been tested.",239,data/crawl/squid/patch_423.diff
https://github.com/squid-cache/squid/commit/1f90fd4aa8b3e2e06018d15de0da5eeb3e8ba2fb,15 Aug 2013,Merged from trunk r12948.,16330,data/crawl/squid/patch_424.diff
https://github.com/squid-cache/squid/commit/397d2d61cf76167934616514a037bd4730319eb0,09 Aug 2013,"Display Build-Info in cache manager info report

This info can be quite useful for tracking which patched build of Squid
is being used to produce the report.",2,data/crawl/squid/patch_425.diff
https://github.com/squid-cache/squid/commit/bce61b006f1ea12de90966ae6b7ff88372d905cf,01 Aug 2013,"Add dns_multicast_local to control mDNS operation

Enable admin control over whether mDNS operates or not. Set the default
to OFF due to .arpa reverse-DNS requests causing a rise in traffic from
this feature even on networks without mDNS responders setup.

Also, polish cachemgr idns report to show for queued queries which
resolver type and query the entry is involving. mDNS can cause a queue
to exist as some lookups timeout on the mDNS resolvers.",52,data/crawl/squid/patch_426.diff
https://github.com/squid-cache/squid/commit/01aed79c466257a5c7c5ee0104224bd2d4107724,29 Jul 2013,"Better support for things with shared locks that can be opened many times,
such as Ipc::StoreMap entries. Maintain a lock counter instead of boolean 
opened flag.

Better support for things with multipart IDs
such as Ipc::StoreMap entries that have an anchor/inode ID and map name.

Support searching for shared pages (sh_page).",35,data/crawl/squid/patch_427.diff
https://github.com/squid-cache/squid/commit/0ad3ff513e423e6d05f4a50995166d6440975cc6,27 Jul 2013,"Handle infinite certificate validation loops caused by OpenSSL bug #3090.

If OpenSSL is stuck in a validation loop, Squid breaks the loop and triggers a
new custom SQUID_X509_V_ERR_INFINITE_VALIDATION SSL validation error. That
error cannot be bypassed using sslproxy_cert_error because to break the loop
Squid has to tell OpenSSL that the certificate is invalid, which terminates
the SSL connection.

Validation loops exceeding SQUID_CERT_VALIDATION_ITERATION_MAX iterations
are deemed infinite. That macro is defined to be 16384, but that default can
be overwritten using CPPFLAGS.

This is a Measurement Factory project",96,data/crawl/squid/patch_428.diff
https://github.com/squid-cache/squid/commit/1d9500c451381b0471bdbb02870738a1511b9f95,26 Jul 2013,Merged from trunk,144,data/crawl/squid/patch_429.diff
https://github.com/squid-cache/squid/commit/eb6ac8089e8b4157aad32f3e4616569746ffe6f3,26 Jul 2013,"Update the http(s)_port directives protocol= parameter

... to use AnyP::ProtocolVersion for internal storage instead of opaque
string text.

This both limits the possible parameter values to one of HTTP, HTTP/1.1,
HTTPS or HTTPS/1.1 and ensures that URLs generated from that protocol
parameter value are http:// and https:// URL. 
Other values will cause Squid to abort.",107,data/crawl/squid/patch_430.diff
https://github.com/squid-cache/squid/commit/eeac7afbd68ca5b2dbf02933070812f57fcc14fb,24 Jul 2013,Merged from trunk,2836,data/crawl/squid/patch_431.diff
https://github.com/squid-cache/squid/commit/2eceb328ef857482d29d0b170856bf6213015c1c,21 Jul 2013,"Quoted values in squid.conf

This patch :
  - adds support for quoted values in the entire squid.conf
  - warn about or prohibit values that can no longer be interpreted as 
    either quoted strings or simple tokens
  - support parameters(""/path/to/file.name"") syntax to load external
    configuration files
  - Checks if macros allowed in ""double quoted"" values. 
  - replaces the strtok() calls with calls to the new ConfigParser::NextToken()
  - modify strtokFile to use new ConfigParser::NextToken()
  - Add the new configuration_includes_quoted_values configuration option, to
    control the squid parser behaviour. If set to on Squid will recognize each
    ""quoted string"" after a configuration directive as a single parameter

This is a Measurement Factory project",810,data/crawl/squid/patch_432.diff
https://github.com/squid-cache/squid/commit/e5433948164cec8919bb0337bf92ab4a0f94bc73,09 Jul 2013,Added a script to extract store entry(ies) debugging from cache.log.,273,data/crawl/squid/patch_433.diff
https://github.com/squid-cache/squid/commit/bc8616155f2d9f972fc5cf06843ff61f3ab6c3ab,04 Jul 2013,Merged changes since Apr 2013 review,2743,data/crawl/squid/patch_434.diff
https://github.com/squid-cache/squid/commit/752fd8d290e36f1baed312b7ffcd49d9a0fc4925,01 Jul 2013,Add mem-cache and transient store entry details in mgr:objects output.,11,data/crawl/squid/patch_435.diff
https://github.com/squid-cache/squid/commit/a5d444a57a4113814cf0ac92f14a785168431b3b,25 Jun 2013,"FTP gateway: upload support.

The patch adds support for FTP upload commands: STOR, APPE and STOU.",208,data/crawl/squid/patch_436.diff
https://github.com/squid-cache/squid/commit/ce49546edf8ac2286db4c5989f2c00c020c69ff7,07 Jun 2013,"Support ""appending"" read/write lock state that can be shared by readers
and writer. Writer promises not to update key metadata (except growing
object size and next pointers) and readers promise to be careful when
reading growing slices.


Support copying of partially cached entries from the shared memory cache to
local RAM. This is required for collapsed shared memory hits to receive new
data during broadcasted updates.

Properly unlock objects in the shared memory cache when their entries are
abandoned by a worker. This was not necessary before because we never locked
memory cache entries for more than a single method call. Now, with partially
cached entries support, the locks may persist much longer.

Properly delete objects from the shared memory cache when they are purged by a
worker. Before this change, locally purged objects may have stayed in the
shared memory cache.


Update disk cache index _after_ the changes are written to disk. Another
worker may be using that index and will expect to find the indexed slices on
disk. Disk queues are not FIFOs across workers.


Made CollapsedForwarding work better in non-SMP mode.

Polished broadcasting code. We need to broadcast entry key because the entry
may not have any other information (it may no longer be cached by the sender,
for example).

Implemented ""anchoring"" in-transit entries when the writer caches the
corresponding object. This allows the reader's entry object to reflect its
cached status and, hence, be able to ask for cached data during broadcasted
entry updates. Still need to handle the case where the writer does not cache
the object (by aborting collapsed hit).",672,data/crawl/squid/patch_437.diff
https://github.com/squid-cache/squid/commit/dd0cbc6432f5abf6be86d4bcdd239cd86cd69b9f,05 Jun 2013,"Redo r12887 (bug 2066 fix) which introduced several related bugs:

  - fatal() if chroot is given
  - no chdir to / after chroot if coredump_dir is given
  - wrong detection of ""none"" coredump_dir
  - chdir to uninitialized pathbuf if no chroot is given

This emergency fix helps Squid start better but may need more testing/work.",36,data/crawl/squid/patch_438.diff
https://github.com/squid-cache/squid/commit/827eb0ac434b48a48954f2338258663a05231367,05 Jun 2013,SourceFormat Enforcement,2,data/crawl/squid/patch_439.diff
https://github.com/squid-cache/squid/commit/133906f560762d68bc2c8eb677584dcd4ccae8f2,04 Jun 2013,"Bug 2066: squid does not do chdir() after chroot()

The earlier workaround applied only fixed 1 of the 3 places performing
chroot().
 This makes chroot and chdir integral parts of setting up Squids running
directory and alters teh chroot() calls to be mainSetCwnd() calls. Which
fixes several potential problems with core dumps from squid -z or -k
executions ending up in unexpected locations, regardless of whether
chroot() and coredump_dir are configured.

 Detected by Coverity Scan. Issue 740335.",44,data/crawl/squid/patch_440.diff
https://github.com/squid-cache/squid/commit/4dd643d505fb6bc13be7d440e2aa5707036a138e,03 Jun 2013,"Polish: update Ip::Address to follow Squid coding guidelines

* lower-case initial word for camelCase method names
* _ suffix for private variables.
* upper-case for static methods
* InitAddrInfo() and FreeAddrInfo() are static, do not use as methods

Not all methods are camelCased due to meaning irregularities and there
are other guidelines not being followed which also need to be fixed.",1969,data/crawl/squid/patch_441.diff
https://github.com/squid-cache/squid/commit/b64e98d2e6184a4b081803cf7f10d56ebab9432d,02 Jun 2013,Merge from trunk,11780,data/crawl/squid/patch_442.diff
https://github.com/squid-cache/squid/commit/a079e38bc38f15150ec323e67ff463bfe011316f,02 Jun 2013,"Support multicast DNS

Resolve .local domain names using mDNS one-shot queries ahead of regular
recursive DNS qeuries.

* adds the mDNS multicast group IPs as always-present entries in the
  nameservers list.

* filters each request. "".local"" lookups are permitted to both the mDNS
  resolvers and the recursive resolvers, other requests are only
  permitted to the regular recursive resolvers.",4022,data/crawl/squid/patch_443.diff
https://github.com/squid-cache/squid/commit/b65ab6e8ca0ba61733e2e2964ba4d4e80fb8317b,31 May 2013,Polish: more debug info from squidclient,5,data/crawl/squid/patch_444.diff
https://github.com/squid-cache/squid/commit/61017a886b4884845571007b5745664e3d346ebc,28 May 2013,"Improve ACL handling. Support all-of and any-of ACL types.

This commit encapsulated many significant ACL changes, including:

* Expressiveness: Two new boolean ACLs (all-of and any-of) that allow
admins to group ACLs as needed, to express complex conditions more
naturally, with fewer squid.conf lines. Conditions such as ""(a or b) and
(c or d)"" are easily expressed now. Explicit groups of ACLs of different
types can now be configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended
checks to wait for an async lookup) is ready to resume checking, Squid
resumes checking from that ACL, instead of rechecking all ACLs for the
same action (or the same squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree,
streamlining the code and clearing the way for future math-style/natural
ACL conditions support. The usual boolean operators (and, or, and not)
form intermediate nodes while good old configurable ACLs become tree
leaves. The new all-of and any-of ACLs use the boolean operators (and
also become intermediate nodes, of course).",1943,data/crawl/squid/patch_445.diff
https://github.com/squid-cache/squid/commit/44b364a34850b8f01680bac57a62387527ed561f,26 May 2013,Merged from trunk (r12852).,879,data/crawl/squid/patch_446.diff
https://github.com/squid-cache/squid/commit/a26c0ae319368368143f781a6eb6f263516ad363,22 May 2013,Merged from parent (large-rock r12530 including trunk r12732; v3.3.3+).,10284,data/crawl/squid/patch_447.diff
https://github.com/squid-cache/squid/commit/78b06ec59454b9f893ca5a9747b1a237b8bb6eb0,19 May 2013,Bug 3851: Delay Pool class 5 tag:levels displayed incorrectly in cache manager,6,data/crawl/squid/patch_448.diff
https://github.com/squid-cache/squid/commit/0a003ce5350c51984b085d5ebeeee8a906fd7218,13 May 2013,Merged from trunk (r12813).,2686,data/crawl/squid/patch_449.diff
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/patch_450.diff
https://github.com/squid-cache/squid/commit/fb0c2f1700b650d40c64d77f2bd17e29809216e5,11 May 2013,"Bug 3389: Auto-reconnect for tcp access_log.

Major changes:

1. Squid reconnects to TCP logger as needed. Squid keeps trying to connect
forever, using a hard-coded 0.5 second delay between attempts.

2. Squid buffers log records while there is no connectivity. The buffering
limit is configurable.

3. On buffer overflows, Squid worker either dies or starts dropping log
records. The choice is configurable.

4. The tcp logging module honors buffered_logs setting. Old code was flushing
each record.

5. Squid reports changes in logging state to cache.log. Except for every 100th
consecutive connection failures, routine connection retries are not reported
at level 1, to reduce noise level.

6. A new access_log configuration format/style has been added. It allows us to
easily add named options such as buffer-size or on-error. The same format can
be used to add module-specific options in the future, but doing so would
require changes to the high-level logging code. All old configuration
formats/styles are still supported.

7. squid.conf buffered_log option documentation now reflects reality. It used
to talk about cache.log but I do not think Squid uses that option for
cache.log maintenance.


Known minor side-effects of these changes:

i) All access_log logs can now be configured to bypass errors because the old
""fatal"" flag is now configurable via log-specific on-error option in
squid.conf. The default is still ""die"". I have not checked whether modules
other than TCP logger honor that flag.

ii) All access_log logs now use 8*MAX_URL (64KB) instead of a 4*MAX_URL (32KB)
or smaller buffer size by default. The ICAP logger was using 2*MAX_URL buffer
size. The TCP logger was using 64KB buffer size before so no change for TCP. I
decided that it is better to raise the default buffering level for some logs
rather than decrease it for other logs, but it is not clear what the best
default is. The buffer size is now configurable via buffer-size so admins can
control it on individual log basis.

iii) Some access_log configuration styles overlap. To resolve ambiguities,
Squid may need to assume that the first logging ACL name (if any) does not
contain '=' and is not equal to an existing logformat name. It is possible to
use 'all' as the first ACL name if these heuristics cause problems.


TODO: We have attempted to solve more TCP logging problems, but it turns out
that correct solutions would require fixing higher-level logging code, not
specific to TCP logger or Bug 3389 scope. Those unsolved problems include:

A. During reconfiguration, all logs are closed and reopened, even if there
have been no changes to their configuration that necessitate such a drastic
action (or no changes at all!). For TCP logger, this means that the old
connection is used to flush remaining buffered records (if any), and the new
connection is used to log new records, possibly at the same time. Nathan wrote
clever code that keeps logging going using the same job/connection. However,
we had to yank that code out because it clashed with higher-level logging
state in subtle ways.

B. During shutdown, all connections are put in the closing state before logs
are told to flush remaining records. For TCP logger, this means that the
remaining buffered records (if any) are lost. The correct fix may require
rearranging shutdown sequence AND letting EventLoop run during shutdown (among
other things).

C. When logger connectivity is lost, Squid does not notice the problem until
the second TCP socket write (or later). This results in lost records. This is
due to TCP-level buffering. I suspect the only cure for this is adding
logger-to-Squid ""I got your records"" feedback, which requires changes in the
logging protocol (currently there is no logger-to-Squid communication at all).",1037,data/crawl/squid/patch_451.diff
https://github.com/squid-cache/squid/commit/41b43e709e9b7e1a0781913a9cc1a412c467e8e8,06 May 2013,Bug 3780: cachemgr.cgi: output problem in HTTP Header Statistics,2,data/crawl/squid/patch_452.diff
https://github.com/squid-cache/squid/commit/cf9f0261d2588344038a89f764325b80179a7e0d,29 Apr 2013,"HttpRequest::helperNotes to NotePairs

This patch try to fix current current Notes interface and usage.
The changes done having in mind that we need:

  1) to add multiple notes with the same key
  2) to support 3 different note types: adaptation meta headers, helper notes
    and custom notes added by the system administrator
  3) to log notes using the %note formating code
  4) to use the %note formating code everywhere the formating API is used. For
    example use the %note with the request_header_add configuration parameter.
  5) to use notes with ACLs.

Details:
 - The NotePairs class is not a kid of HttpHeader class anymore. It is
   implemented from scratch to cover Helper/adaptation and custom notes needs.
     * The new class stores key:value pairs in list. It allow multiple entries
       with the same key.
     * Includes a find method which return a coma separated list of values
       for a given key
 - The HttpRequest::helperNotes is now a Refcount of a HttpPairs object
 - The HelperReply::notes is now a HttpPairs object
 - The AccessLogEntry::notes now is a RefCount of a HttpPairs object, and
   stores only the custom notes add by the ""note"" configuration parameter
 - Add the AccessLogEntry::helperNotes which is a RefCount of a HttpPairs object
   to store notes added by helpers.
   Now the notes added by adaptation or helpers are accessible to format/* code
   imediatelly after added. Before this patch are accessible only for logging.

Future work:
 - Posible merge AccessLogEntry::notes and AccessLogEntry::helperNotes
 - Performance fixes

This is a Measurement Factory project",488,data/crawl/squid/patch_453.diff
https://github.com/squid-cache/squid/commit/ff1177602b8369dd8438fadfc8b4b3bf190ef1d4,23 Apr 2013,CacheMgr: fix missing column separator in helper stats,2,data/crawl/squid/patch_454.diff
https://github.com/squid-cache/squid/commit/c8059ea9de1b8870297ca133dfb5184218711160,18 Apr 2013,"FTP gateway: process FTP request asynchronously.

Before the change, FTP request processing was done right after
parsing.  This could result in data transfer request failure because
data connection accept callback was already scheduled but not fired
yet.  The patch makes FTP request processing asynchronous to fix this
race.",178,data/crawl/squid/patch_455.diff
https://github.com/squid-cache/squid/commit/434a79b0afab7e27d086920111d3d0fb06a621dd,16 Apr 2013,"Ftp gateway: initial implementation.

The first client command must be USER with
<username>@<hostname>[:<port>] parameter.  Origin server connection is
bound to client connection.  After origin server connection is
established, it cannot be changed, i.e. client cannot connect to
another origin server.  Once server or client connection is closed,
the other side should be closed as well.

Only passive mode is supported on both client and server side.  IPv6
(RFC 2428 EPSV command) is not supported.

Implemented data transfer commands: RETR, LIST, NLST.  Data push
commands (STOR, APPE) are not implemented.

Many rough edges: aborts/timeouts/error handling, logging and more.",3301,data/crawl/squid/patch_456.diff
https://github.com/squid-cache/squid/commit/cc1e110a93d34fad100bd92ec4740df0a19641a3,04 Apr 2013,"Bug 3643: NTLM helpers stuck in reserved state by Safari

NTLM failures are not always cleaning up connection-auth credentials
properly. In particular they are not releasing the NTLM helpers when
the connection is closed between challenge and handshake completion.
Resulting in permanently reserved helpers locking up all access
through the proxy.

This change redesigns the connection authentication state management
to move the auth link/unlink operations into the connection state
manager objects instead of being managed by NTLM auth components.
As a result we are able to manage credentials from any auth scheme
consistently and terminate the connection properly on several
error conditions which the auth components are not easily aware of.

 Fix sponsored by Netbox Blue Pty (http://netboxblue.com/)",330,data/crawl/squid/patch_457.diff
https://github.com/squid-cache/squid/commit/412da4279f75d9fa63cf58a7d2eac63e61d35d78,29 Mar 2013,Added SBuf-related files,3264,data/crawl/squid/patch_458.diff
https://github.com/squid-cache/squid/commit/a57a662c34744c827637a5cf8ddce25aa6048c9a,21 Mar 2013,"Merged from trunk (r12732, v3.3.3+).",10290,data/crawl/squid/patch_459.diff
https://github.com/squid-cache/squid/commit/e412456e61e8500e8537da20253a2371c81a9cd3,18 Mar 2013,Polish: drop a bunch of dead code,136,data/crawl/squid/patch_460.diff
https://github.com/squid-cache/squid/commit/8219a52ef2077f0c96ed5f4adb3426e37d94dfb5,17 Mar 2013,"basic_pam_auth: Add -r option to strip NTLM/Negotiate domain from username

This option helps reduce end-user confusion accessing Squid using Basic
auth PAM helper as a backup to NTLM and/or Negotiate authentication.

The user can enter their NTLM/Negotiate user+domain details in the popup
which may occur without needing to know which auth scheme is in play.",19,data/crawl/squid/patch_461.diff
https://github.com/squid-cache/squid/commit/4a0f677af794500629b57c10697f964af83cd6aa,11 Mar 2013,Polish: fix several spelling errors,17,data/crawl/squid/patch_462.diff
https://github.com/squid-cache/squid/commit/14e9491b4913f476c7a1f56e3a2ebcebfb5323f8,11 Mar 2013,Many typos fixed,17,data/crawl/squid/patch_463.diff
https://github.com/squid-cache/squid/commit/9a9954baee514e3e76f150be9da19d90e1d6cd69,21 Feb 2013,Support discovery of collapsable entries in kids via the new Transients map.,444,data/crawl/squid/patch_464.diff
https://github.com/squid-cache/squid/commit/723fd4c11ce252c602e4e362ea37bbadb8ee9181,14 Feb 2013,"Fix Negotiate auth NA response handling

Handle the blurb presented on NA responses as an error message.

Negotiate auth was also treating token as a mandatory field, although it is
optional along with an optional message.",23,data/crawl/squid/patch_465.diff
https://github.com/squid-cache/squid/commit/02c8dde5cc20d7594afac26284c0119167d19721,11 Feb 2013,"SourceLayout: Shuffle and collate the log result codes symbols

This collates all the small definitions spread around Squid for defining
and handling the TCP_* and UDP_* result code tags logged by Squid.

* log_type enumeration shuffled from enums.h
* log_type increment operator shuffled from client_db
* log_type strings shuffled from Format:: and built automatically
* is-HIT lookup test shuffled from ICP

Due to LogTags.cc being automatically built from the enum list we define
the shuffled functions as inline. This is not a problem due to their small
size. When the LogTags type is converted to a class thay can be de-inlined.",251,data/crawl/squid/patch_466.diff
https://github.com/squid-cache/squid/commit/84a5b040021cc206d9bc95100aecdc13fe585437,10 Feb 2013,Merged from trunk,1367,data/crawl/squid/patch_467.diff
https://github.com/squid-cache/squid/commit/a8a0b1c2ae84779983a9e27f24e0f16811dcd52c,08 Feb 2013,"Add custom Store ID code support

This is a port of the StoreURL feature from Squid-2.7 rewritten to avoid
the unfortunate link that 2.7 feature had with URL-rewriting.

The feature uses a helper to retrieve custom ID values for use in the
cache storage ID key. The default ID used is the requested URL.

Differences since 2.7:
* storeurl_* directive names are now called store_id_*

* The helper response now expects 'OK store-id=""...""\n'
  However the squid-2.7 response syntax is still accepted.

* the ID value presented need not be a URL. Although URL syntax
  is recommended to simplify store log interpretation and
  refresh pattern matching.

* refresh_pattern applies to the store ID, not the request URL.


TODO: support store ID lookups on ICP and HTCP queries.",510,data/crawl/squid/patch_468.diff
https://github.com/squid-cache/squid/commit/29c909e2c9bb085f90ef23582c22bdf9e3ee171e,04 Feb 2013,Merged from trunk,1183,data/crawl/squid/patch_469.diff
https://github.com/squid-cache/squid/commit/814f9a2eab3f8f5c78c7ea654700cd7dc1bc5046,03 Feb 2013,"Fix several uninitialized object members in unit tests

 Detected by Coverity Scan. Issues 740581, 740582, 740583, 740584",30,data/crawl/squid/patch_470.diff
https://github.com/squid-cache/squid/commit/b3a8ae1bbbe58bed00b003e617bf5662565b2486,03 Feb 2013,"Initial OpenSSL BIO implementation, to be used to limit socket I/O 
and remember raw data during peek phase of Peek and Splice.

No buffering yet: All SSL read/write commands go directly to the socket,
which probably creates some performance overhead because they use very
small I/O sizes (often just a few bytes).

Useful SSL connection state and I/O debugging.

Moved SSL connection creation and I/O association code into new Ssl::Create(),
used by client_side.cc and forward.cc.",367,data/crawl/squid/patch_471.diff
https://github.com/squid-cache/squid/commit/31ecec74bce9aef1f15b3634ba2d25674ed51daa,01 Feb 2013,Fix typos in Ident.cc,4,data/crawl/squid/patch_472.diff
https://github.com/squid-cache/squid/commit/173b722945fd707034d2e17c4e1d7af9451b3456,01 Feb 2013,Bug 3749: IDENT lookup using wrong ports to identify the user,12,data/crawl/squid/patch_473.diff
https://github.com/squid-cache/squid/commit/923b75ce684aa3f136f5826b2e0ca5802c9d0065,01 Feb 2013,"Fixed several ConnOpener problems 
by relying on AsyncJob protections and comm_close(), while maintaining a
tighter grip on various I/O and sleep states.

Problems addressed:

* Connection descriptor was not closed when attempting to reconnect after
  failures. We now properly close on failures, sleep with descriptor closed,
  and then reopen.

* Timeout handler was not cleaned up properly in some cases, causing memory
  leaks (for the handler Pointer) and possibly timeouts that were fired (for
  then-active handler) after the connection was passed to the initiator.

* Comm close handler was not cleaned up properly.

* statCounter.syscalls.sock.closes counter was not updated on FD closure.

* Waiting pending accepts were not kicked on FD closure.

* Connection timeout was enforced for each connection attempt instead of 
  applying to all attempts taken together.

and possibly other problems. The full extent of all side-effects of mishandled
race conditions and state conflicts is probably unknown.",320,data/crawl/squid/patch_474.diff
https://github.com/squid-cache/squid/commit/33810b1da0e66536755dd31ad95a0aabf2167858,27 Jan 2013,"No-lookup DNS ACLs

Currently, dst, dstdom, dstdom_regex (and other?) DNS-related ACLs do DNS
lookups if such a lookup is needed to convert an IP address into a domain name
or vice versa. This creates two kinds of problems:

 - It is difficult to identify requests that use raw IP addresses in Request-URI
   or Host headers. One would have to use something like url_regex and possibly
   req_header to identify those before using dst ACLs to match the request
   destination against a known IP subnet. IPv6 would only make this harder.

 - It is difficult to use dst* ACLs in options that support fast ACLs only.
   If an async lookup is required, the answer will be unpredictable (now)
   or DUNNO (when the ACL bugs are fixed), possibly with warnings and other
   complications.


This patch adds a -n option to dst, dstdom, dstdom_regex and other DNS-related
ACLs. The option disable lookups and address type conversions. If lookup or
conversion is required because the parameter type (IP or domain name) does not
match the message address type (domain name or IP), then the ACL with a -n
option would immediately declare a mismatch without any warnings or lookups.

The ""--"" option can be used to stop processing all options, in the case the
first acl value has '-' character as first character (for example the '-' is
a valid domain name)

For example:

    # Matches requests with full URI host set to localhost
    # but not requests with full URI host set to 127.0.0.1
    acl toLocalRawName dstdom -n localhost
    http_access allow toLocalRawName

    # Use -- option to stop processing flags
    acl AnACL dst_domain -n -- -cream-and-sugar.tumblr.com

    # Matches requests with full URI host set to 127.0.0.1
    # but not requests with full URI host set to localhost
    acl toLocalRawIp dst -n 127.0.0.1/32
    cache_peer_access peer1 allow toLocalRawIp

Please note that -n prohibits lookups in Squid's DNS caches as well.

This is a Measurement Factory project",303,data/crawl/squid/patch_475.diff
https://github.com/squid-cache/squid/commit/9dca980df1365aa3d56909dd485d72e786268fd3,21 Jan 2013,"Bug 3676: Fix Shadowed variables

This resolves a number more shadowed variables by renaming.
There should be no logic changes in this patch.",278,data/crawl/squid/patch_476.diff
https://github.com/squid-cache/squid/commit/052aecef0b2b5b67207cecc3410cca1231f30a90,20 Jan 2013,"squidpurge: polish debug -d option handling

Parsing of the -d option parameter was severaly broken with an inverted
NULL check resulting in segfaul whenever a level was supplied.

Also, add validation that out-of-range values cannot be supplied and
document in the help that this is a mask value, not just a number.

 Detected by Coverity Scan. Issue 740378.",10,data/crawl/squid/patch_477.diff
https://github.com/squid-cache/squid/commit/b2d7d4beac04fd6d0ec2e5bd5ba03cb68943d6ed,16 Jan 2013,"squidpurge: display friendly errors on missing command line options

Currently the tool will crash with a segmentation fault if any one of
several command switches which are expected to have a mandatory argument
are in fact followed by nothing.
 Detect these cases and display a message about what is missing.

 Detected by Coverity Scan. Issue 740378",31,data/crawl/squid/patch_478.diff
https://github.com/squid-cache/squid/commit/90d881c4fa0fc6d3a480be6fd9b701d1068dfaeb,12 Jan 2013,Bug 3736: Floating point exception due to divide by zero,6,data/crawl/squid/patch_479.diff
https://github.com/squid-cache/squid/commit/3efeeda272a15497d732b87fcc00b3a78d8a025f,05 Jan 2013,"squidpurge: ensure PURGE repsonse buffer is terminated

 Detected by Coverity Scan. Issue 965807.

Also, additional validation check for issue 740488",8,data/crawl/squid/patch_480.diff
https://github.com/squid-cache/squid/commit/5f621cd093274c38b37c50fce889756c34a1f073,02 Jan 2013,"Bug 3676: Fix various shadowed variables

Also, fixes logformat dumper to output 'logformat' instead of 'format'.
'format' directive is the planned future name but is not yet parsed.

 Detected by GCC 4.7 with -Wshadow",28,data/crawl/squid/patch_481.diff
https://github.com/squid-cache/squid/commit/e65cf8d57ef7e00f37e1f85ad0f377932c3bc277,31 Dec 2012,"squidpurge: fix META TLV parsing issues

* current Squid may stoe objects with up to 64KB URLs and 64KB headers
  in the disk cache. Increas the tool buffer to 128KB to prevent
  truncating the loaded meta data.

* check for and report when meta data overruns the end of loaded buffer
  content. Ignore the truncated TLV entry and produce a WARNING.

* validate the TLV size field loaded from disk to prevent buffer overrun
  errors from corrupted files on disk.

 Detected by Coverity Scan. Issues 740381, 740488.",20,data/crawl/squid/patch_482.diff
https://github.com/squid-cache/squid/commit/9e5075dc1cc61178028a770f433e5edf9db7e1b0,29 Dec 2012,Typo in rev.12550,4,data/crawl/squid/patch_483.diff
https://github.com/squid-cache/squid/commit/e19994df12fc0810cd371afe83310d8a5c137853,29 Dec 2012,"Fix various Disk I/O issues in all modules

* Uninitialized class members.

* Handle NULL potential after several dynamic_cast.

* Better error result handling from several system functions
  lseek(), fcntl() can report errors which need handling.

* diskd explicit NULL dereference on broken input.
  Extremely unlikely, but worth protecting against.

 Detected by Coverity Scan. Issues 740510, 740358, 740359,
  740511, 740317, 740360, 740513, 740318, 740514",46,data/crawl/squid/patch_484.diff
https://github.com/squid-cache/squid/commit/a0b3b22c8938bbd358f6e3c47b8c69d4a21fba37,27 Dec 2012,"Fix various issues in unit tests

* Define MemObject stub constructor to initialize teh stub object properly
  apparently store unit tests needs one defined. Best to make it work and
  set base values than leave garbage in the object fields.

* Buffer overrun on config parser if test is ever given a too-long
  string input.

* Memory leak in HttpRequest testing. One instance of a short array.

* Range: header testing may thor exceptions which were not caught by the
  test binary. Could lead to difficulty debugging exception errors.

 Detected by Coverity Scan. Issues 740523, 740482, 740440, 740498",55,data/crawl/squid/patch_485.diff
https://github.com/squid-cache/squid/commit/14798e73bd28260d30e4512e2376c3a7dbf51164,13 Dec 2012,"cert validation cache

This patch add cache to cert validation helper. The following new options
added to ""sslcrtvalidator_program"" configuration parameter to control cache
behaviour:
   ttl=n         TTL in seconds for cached results.The default is 60 secs
   cache=n       limit the result cache size. The default value is 2048

To implement the cert validation cache a new template class investigated,
the LruMap which implements a simple lru cache.

The LruMap templete class also used to replace the old Ssl::LocalContextStorage
class which implements a SSL contexts cache.

This is a Measurement Factory project",577,data/crawl/squid/patch_486.diff
https://github.com/squid-cache/squid/commit/25f563833326aeffe0e6fb77e439eea6017dcf2b,10 Dec 2012,Bug 3712: Rotating logs overwrites the previous log,4,data/crawl/squid/patch_487.diff
https://github.com/squid-cache/squid/commit/fc6df0c3a619d283bcd0f755409d5f3ec9554007,04 Dec 2012,merge from parent SslServerCertValidator r12337,2116,data/crawl/squid/patch_488.diff
https://github.com/squid-cache/squid/commit/d2dd8e4f45d627e672d33edaffa9fe7770060498,04 Dec 2012,"SSL server certificate validator implementation

This patch implements the certificate validation helper interface described at:
  http://wiki.squid-cache.org/Features/SslServerCertValidator

The helper consulted after the internal OpenSSL validation, regardless of the
validation results. The helper will receive:
   1) the origin server certificate [chain],
   2) the intended domain name, and
   3) a list of OpenSSL validation errors (if any).

If the helper decides to honor an OpenSSL error or report another validation 
error(s), the helper will return: 
   1) A list of certificates.
   2) A list of items consists the the validation error name (see %err_name
      error page macro and %err_details logformat code), error reason
      (%ssl_lib_error macro), and the offending certificate.


The returned information mimics what the internal OpenSSL-based validation code
collects now. Returned errors, if any, fed to sslproxy_cert_error, triggering
the existing SSL error processing code.

The helper invocation controlled by the ""sslcrtvalidator_program"" and
""sslcrtvalidator_children"" configurations options which are similar to the
ssl_crtd related options. 

A simple testing cert validation helper developed in perl included in this
patch. This helper just echo back the certificate errors.

This is a Measurement Factory Project",997,data/crawl/squid/patch_489.diff
https://github.com/squid-cache/squid/commit/bcb9f68855ed476199bcfb749641bfdc0c065eec,04 Dec 2012,merge from trunk r12500,2102,data/crawl/squid/patch_490.diff
https://github.com/squid-cache/squid/commit/d471b08ae0a97908f9c3eac88a3fee438e8acefe,01 Dec 2012,Bug 3688: Lots of Orphan Comm:Connections to ICAP server,21,data/crawl/squid/patch_491.diff
https://github.com/squid-cache/squid/commit/f087640fc902bdbfdd2d8591f5e57277e05904f9,30 Nov 2012,"Polish: Improve the messages output by UFS swap log management.

It also includes a small local variable symbol change from ""new_path"" to
""tmp_path"" to prevent future developer mistakes like the one seen in
bug 3663 mistaking ""new_path"" for the new destination path of xrename().",23,data/crawl/squid/patch_492.diff
https://github.com/squid-cache/squid/commit/49b76711eb061f751a766c289a778caaf6086797,27 Nov 2012,"Helper protocol upgrade: add optional kv-pair field to responses

This adds an optional kv-pair field immediately following the result field
on all helper interface responses. This field contains a list of key=value
pairs where the value is a RFC1738 (URL) encoded token or a quoted string.
Quoted-string MAY contain whitespace and shell escaping.

The response syntax for all helpers becomes:
  [channel-ID SP] result [SP key-pair ...] [SP other] EOL


The parser for HelperReply is also updated to map the old AF and NA
NTLM/Negotiate response fields into the HelperReply notes:
 * ""token="" is added to supply the NTLM and Negotiate server blob/token.
 * ""user="" is added to supply the user label field.
The relevant callback handlers are updated for these helpers to make use
of these new keys.


The bundled Digest authentication helpers are all upgraded to send the new
format responses. They now use ERR for failed lookup, BH for internal
errors, and OK with ""ha1="" key added to supply a HA1 response. The handler
for Digest authentication is updated to process the new HelperReply fields
with failover the old format on Unknown result codes.

The external ACL handler is updated to pull its key=value pairs out of the
Notes list. The old parser loop becomes useless with this and is removed.
Taking with it support for several long deprecated keys ""login="", ""passwd="",
and ""error="" which are now ignored.


Any other keys MAY be sent on any response. However at this stage 2 patch
they are ignored. As are repeated / secondary values for the expected key
names, only the first instance sent in the response is used.",727,data/crawl/squid/patch_493.diff
https://github.com/squid-cache/squid/commit/fd7f26eaf8b41da6b4131ee33d2c898a888b2044,27 Nov 2012,"Audit Review updates

* guarantee that note values output by the HelperReply parser are """"
  nil-terminated string and not undefined String.
* rename HelperReply::responseKeys to 'notes'
* rename Notes::findByName() to find()
* add Note::firstValue() to locate first value provided for a given key
  and present it as a char* terminated string
* various documentation updates",141,data/crawl/squid/patch_494.diff
https://github.com/squid-cache/squid/commit/62f1035b7153a9ffa5c0981cb13d7f8afcbe7419,24 Nov 2012,merge from parent,266,data/crawl/squid/patch_495.diff
https://github.com/squid-cache/squid/commit/4a77bb4e0e2b3d9da201a01e843467f57cb88b08,24 Nov 2012,Amos requested changes,256,data/crawl/squid/patch_496.diff
https://github.com/squid-cache/squid/commit/31f2702c1559845c01bfa7693d883557c824fa31,23 Nov 2012,Merged from trunk,945,data/crawl/squid/patch_497.diff
https://github.com/squid-cache/squid/commit/d96a5ab4cc2865be3bde9876d2681e3831495902,18 Nov 2012,"log_file_daemon: better error reporting

* report rotation errors and log file removal errors instead of silently
  ignoring them.

 Detected by Coverity Scan. Issue 740316",18,data/crawl/squid/patch_498.diff
https://github.com/squid-cache/squid/commit/be05c1858335550066ee6706166c491e9ab3ca01,16 Nov 2012,"squidclient: Better error checking

* detect and report fstat() errors which could lead to invalid
  Content-Length being sent.

* remove some useless checks which were causing false positives by Coverity.

 Detected by Coverity Scan. Issues 740334, 740379",16,data/crawl/squid/patch_499.diff
https://github.com/squid-cache/squid/commit/2b506a23dbea86eb6c6e9f5fc1fee44aa1965ac1,15 Nov 2012,"ntlm_fake_auth: Fix nesting error

Broken macro wrapping leads to the fake authenticator sending bad
responses to Squid. This can ead to users being rejected by the fake
helper whose purpose is to accept everything.

 Detected by Coverity Scan. Issue 740394",10,data/crawl/squid/patch_500.diff
https://github.com/squid-cache/squid/commit/665e9b5bd4e9a9e3cadcd8f6735ab75f512c2e96,15 Nov 2012,Type in squid-3-12447,2,data/crawl/squid/patch_501.diff
https://github.com/squid-cache/squid/commit/03f581b09946b8c0b8c383c58e4c2d42bd413ea3,14 Nov 2012,"ext_time_quota_acl: Polish and handle bad input better

* Send BH response code when username field is missing or empty on the
  input line received from Squid (or manually typed)

* Display error message on broken config file lines and skip instead of
  crashing.

* Polish out some unused assignments.

 Detected by Coverity Scan. Issues 740404, 740405, 740591",30,data/crawl/squid/patch_502.diff
https://github.com/squid-cache/squid/commit/ed7f08683a186453fe6ed3249b0bda0a85b092fd,14 Nov 2012,"ext_file_userip_acl: Polish and missing file handling

* Display error when dictionary file is unaccessible instead of crashing.

* Polish several useless assignments out of the code.

 Detected by Coverity Scan. Issues 740402, 740403, 740589, 740590.",26,data/crawl/squid/patch_503.diff
https://github.com/squid-cache/squid/commit/85b0d7b862f0a2dc34f97be23bbbd17566e32c81,14 Nov 2012,"digest_file_auth: Improved error handling

Adds missing error handling when pasword file fails to open for any
reason.

Skips records with missing username in password file.Displays an error
message instead of crashing.

 Detected by Coverity Scan. Issues 740400, 740401",15,data/crawl/squid/patch_504.diff
https://github.com/squid-cache/squid/commit/69c954eb754f8a939e82948ce67916ff0dc850f3,14 Nov 2012,"basic_radius_auth: Fix several issues

* abort on failed fcntl() non-blocking socket setup

* retry send() on failure. Up to retry attempt count.
  Display send() errors to cache.log.

* prevent buffer overflow on long command line arguments.

* make compiler buffer overflow checks happier with RADIUS packet 
  creation code.

 Detected by Coverity Scan. Issues 740314, 740315, 740410, 740474",23,data/crawl/squid/patch_505.diff
https://github.com/squid-cache/squid/commit/3c18a6773e7d3011ba323e4ae3f1927b9aeab494,13 Nov 2012,"basic_ncsa_auth: Fix NULL-dereference crash

When reading corrupt or broken user passwd files with missing username
data this helper can crash.

 Detected by Coverity Scan. Issue 740398",11,data/crawl/squid/patch_506.diff
https://github.com/squid-cache/squid/commit/637c35b2073582f30a4601f98b19fc5fc9c6e976,13 Nov 2012,merge from SslServerCertValidator r12332,16798,data/crawl/squid/patch_507.diff
https://github.com/squid-cache/squid/commit/53251bc3a57a1321e2bf7b8bbc0f26ca5bfc734f,13 Nov 2012,merge from trunk r12441,16792,data/crawl/squid/patch_508.diff
https://github.com/squid-cache/squid/commit/05e5285440fcf3537422a5282ebd0d35898ef9fd,10 Nov 2012,"Fix URL-decode logics consistency

* always perform URL-decode on only token form of values
  (\-escaping always removed on all values prior to URL-decode)

* document change in URL-encoding for external_acl_type config

* deprecate external_acl type quote= and protocol= options

* remove unneeded 'urlQuoting' parameter from HelperReply parser",65,data/crawl/squid/patch_509.diff
https://github.com/squid-cache/squid/commit/c69199bb22ce6d16080bc84c613823830c22c0d3,09 Nov 2012,"Upgrade Digest authentication to use key=value parameters

* Update the Digest auth code in Squid to process the HelperReply key-pair
  notes list for data
+ output upgrade WARNING messages when old format responses are identified
+ handle TT result code (as an error with critical level ERROR message)
+ handle BH result code (as an error)

* Adds a ha1="""" key to Digest auth response protocol to pass the HA1.

* Upgrade the Digest helpers to use OK/ERR/BH result codes and key=value
  parameters.",82,data/crawl/squid/patch_510.diff
https://github.com/squid-cache/squid/commit/7bbefa01f63575cc8104addbbc65765c5e186e5d,07 Nov 2012,"Use Notes objects for key=pair handling in HelperReply

* NTLM/Negotiate auth are expeted to return OK/ERR/BH/TT codes and key=pair.
  The old result lines are still received, but converted to the new format
  silently.

* new key accepted:
 'token=' for passing NTLM and Negotiate auth tokens

* some undocumented old tags accepted by external_acl_type are now ignored:
 'error=' replaced by 'message='
 'passwd=' replaced by 'password='
 'login=' replaced by 'user='
These were replaced some time ago and never formally documented.",317,data/crawl/squid/patch_511.diff
https://github.com/squid-cache/squid/commit/84dc29dab524cc4dbdfee0bed2ec8c3e2df9f674,04 Nov 2012,Merged from trunk,12651,data/crawl/squid/patch_512.diff
https://github.com/squid-cache/squid/commit/f073f56cd9245475e12263e27bded8dd1745aa9d,02 Nov 2012,Add SEND_BH macro to helper API definitions,3,data/crawl/squid/patch_513.diff
https://github.com/squid-cache/squid/commit/e35d7a779c709e19a2608bfefec75074b435333d,01 Nov 2012,"Portability: Move testRefCount to src/

It seems the automake dependencies on stub_*.o are still not working well
and ICC requires several stubs in order to link libbase.la.

This also adds new stubs for MemBuf.h and cbdata.h APIs.",81,data/crawl/squid/patch_514.diff
https://github.com/squid-cache/squid/commit/e166785ad679d33acc445d2d96facc065bc63a35,29 Oct 2012,"Support OK/ERR/BH response codes from any helper

Updates the helper reponse callback API from using char* buffer to a
HelperReply object storing teh response code, a blob buffer, and 
pointer to the responding helper 'server' (if stateful).

* the helper I/O read handler is updated to parse the result code off
the start of the helper response as is currently done for channel-ID.
The callback handlers are altered to use the HelperReply::status instead
of parsing it off themselves individually.

* the remaining I/O read buffer is stored in a MemBuf and callbacks are
updated to use it via the method other().

* the responding helper-server is stored into the HelperReply object and
stateful helper callbacks are combined into the same API as stateless.
The callback handlers are updated to use HelperReply::lastserver instead
of function parameter.

After this patch the helper response format is:
  [channel-ID] SP [result] [ [SP] blob] <terminator>

'SP' being one octet \0x20 character.

The behavour changes expected from this is that all helpers are now able
to send OK/ERR/BH states. Although the handlers for some helpers will
deal with the new states as unknown response. None of the bundled
helpers have yet been altered to make use of this changed potential.

TODO:
* implement key=value parser for the blob area of the format, and update
handlers to use the HelperReply API to retrieve them.
* upgrade helpers to make use of new response format",558,data/crawl/squid/patch_515.diff
https://github.com/squid-cache/squid/commit/45bb03812cb68af775325092731082b5485e9dce,29 Oct 2012,Bug 3189: AIO thread race on pipe() initialization,18,data/crawl/squid/patch_516.diff
https://github.com/squid-cache/squid/commit/b3404bc5f559ff3d73960357e6b94f20e6ac6a31,26 Oct 2012,"note option

Add forgotten Notes.cc and Notes.h file",234,data/crawl/squid/patch_517.diff
https://github.com/squid-cache/squid/commit/d7f4a0b73b11fade7274e344c0293af319696459,26 Oct 2012,"note option

This patch adds note option to squid.conf. It is similar to 
adaptation_meta but is applied after all adaptation and before logging.
Values of key/value pair notes can be logged using %{key}note macros.

    note key value acl ...
    logformat myFormat ... %{key}note ...

This option may be initially used to log custom information about the master
transaction. For example, an admin may configure Squid to log which ""user group""
the transaction belongs to, where ""user group"" will be determined based on a
set of ACLs and not [just] authentication information.

From user point of view, adaptation_header sets/implies meta (i.e.,
setting adaptation_meta is sufficient to be able to log it using
%note) but the note option itself (if any) is evaluated later,
so it has no effect on ICAP headers.

This is a Measurement Factory project",350,data/crawl/squid/patch_518.diff
https://github.com/squid-cache/squid/commit/7ed5335a75259ae22fa4b9e4e2893b3b9b92c15d,20 Oct 2012,"Remove the refresh_pattern ignore-no-cache option

With the HTTP/1.1 Cache-Control:no-cache compliance upgrade this option became
obsolete. Its main use-case was to force caching of responses which contained this
control. Revalidation is now happening and no-cache objects are cached by default.

The one remaining effect of ignoring no-cache is to prevent no-cache from allowing
authenticated responses being cached. Which is the opposite of its usually expected
result and allowing that change of behaviour would be counter productive.",30,data/crawl/squid/patch_519.diff
https://github.com/squid-cache/squid/commit/4629f000085591c9200fb70a3e46ed2b212e6fb3,05 Oct 2012,Move fatal family of functions to own implementation and stub files.,344,data/crawl/squid/patch_520.diff
https://github.com/squid-cache/squid/commit/1f0a1fe79cb4246172ce3db07dbec257b7b4cb80,05 Oct 2012,"Shuffled fatal family of functions into own implementation.
Created stub for fatal.cc.
Move all files to src/ due to their dependencies.",84,data/crawl/squid/patch_521.diff
https://github.com/squid-cache/squid/commit/1b32d93c7506a07285526e5b3028523c96db8c45,05 Oct 2012,"SourceFormat merge: removed CVS-Id tags, removed unnecessary extern and SQUIDCEXTERN declarations",641,data/crawl/squid/patch_522.diff
https://github.com/squid-cache/squid/commit/94739d08cbbf966d3207fca7582960fe2870db32,04 Oct 2012,Moved fatal functions out of tools.cc and into own source file in lib/fatal.cc,256,data/crawl/squid/patch_523.diff
https://github.com/squid-cache/squid/commit/6d7a7410b325ea18b86ed906c1e2b810779c93f2,04 Oct 2012,Removed leftover CVS-Id markers,340,data/crawl/squid/patch_524.diff
https://github.com/squid-cache/squid/commit/82afb1254b4126bf16706b9215a80bf43266c723,04 Oct 2012,"Removed unnecessary extern declarations.
Changed mismatching class/struct declaration in fde.h 
Created default constructor for _fde_disk and moved there proper initialization
Removed some dead function declarations",172,data/crawl/squid/patch_525.diff
https://github.com/squid-cache/squid/commit/2d612ae7ecf98d658053f9e43a4893424cf59646,03 Oct 2012,"sourceformat: split protos.h into more specific headers, change many functions' likage to c++.",6626,data/crawl/squid/patch_526.diff
https://github.com/squid-cache/squid/commit/38ee83358e5339a6a7c89933f99903266579aa84,03 Oct 2012,Merged from trunk,154,data/crawl/squid/patch_527.diff
https://github.com/squid-cache/squid/commit/72e820efb8128e5249fbc41b4d9e11c1affc06ae,02 Oct 2012,"Bug 3130: helpers are crashing too rapidly

As discussed quite many months ago. This reduces the FATAL when helpers
crash/exit to a critical level ERROR have responded with useful reply to
at least one lookup.

The result is that Squid can now cope with helpers written in languages
which cannot loop infinitely. For example; PHP helpers often exit after
a timeout, broken scripts written to respond and exit immediately,
and helpers which encounter some permissions error and respond only with
""ERR"" or ""BH"" results before aborting.",16,data/crawl/squid/patch_528.diff
https://github.com/squid-cache/squid/commit/1f7ba0b4867d6b5a5c42e7925eb6df51fa89f08f,02 Oct 2012,"Polish: de-duplicate helper statistics objects

* Combine the stats structure on per-helper server classes. For more
  consistent statistic gathering.

* Add initStats() method to initialize statistics variables correctly.
  Previously only done for some counters on stateless helper objects.

* Add missing accounting of pending lookups in stateful helper code.

* Add counter for replies received from the helper.

* Add reporting of replies received back from each helper.

There are no logic or decision making logics affected by these changes.
The new increment/decrement and stats are purely affecting statistical
report outputs.


FUTURE TODO:
* replace the 'busy' flag on stateful helpers with pending>0 check
  as used by stateless helpers to indicate queue count.",52,data/crawl/squid/patch_529.diff
https://github.com/squid-cache/squid/commit/d850d8eeefd035925cca584a136b4b646de93b2a,22 Sep 2012,Update NTLM and Negotiate TT result code handlers to use token=,14,data/crawl/squid/patch_530.diff
https://github.com/squid-cache/squid/commit/8a648e8d11c5191a8bc49238ec69e22f2b680b5d,21 Sep 2012,"Removed ""extern"" and SQUIDCEXTERN keyword from regular functions (they have extern linkage by default)",1042,data/crawl/squid/patch_531.diff
https://github.com/squid-cache/squid/commit/001d55dc4fd8caab03411a51337d147001db5771,21 Sep 2012,"Added some class documentation.
Removed explicit ""extern"" markers from some functions",259,data/crawl/squid/patch_532.diff
https://github.com/squid-cache/squid/commit/71b673d4d02a34b4d250212d067234aaab328708,20 Sep 2012,"Reworked a few includes, changed some linkages.",104,data/crawl/squid/patch_533.diff
https://github.com/squid-cache/squid/commit/450fe1cb6394694a53d3c55f4bf7aa03b7785c68,19 Sep 2012,Improved documentation and standardized names for RequestFlags,395,data/crawl/squid/patch_534.diff
https://github.com/squid-cache/squid/commit/0272dd08f2be7f000c031ddc1a3c720efc4696aa,19 Sep 2012,Convert helper char* response to class,562,data/crawl/squid/patch_535.diff
https://github.com/squid-cache/squid/commit/45e5102dcbea7ddf2f6094db16502aa8d1837079,18 Sep 2012,Reverted most RequestFlags getters/setters,663,data/crawl/squid/patch_536.diff
https://github.com/squid-cache/squid/commit/2cef0ca6fdbc43e495f2b33be1ec0205bf173ba1,14 Sep 2012,"Initial SSL server certificate validator implementation
http://wiki.squid-cache.org/Features/SslServerCertValidator",361,data/crawl/squid/patch_537.diff
https://github.com/squid-cache/squid/commit/c8f5104db26b2b5d40f200a61f3afa53aae4297a,13 Sep 2012,Merged in typedefs refactor work,4608,data/crawl/squid/patch_538.diff
https://github.com/squid-cache/squid/commit/d60a166f39212bbc756544dea5e95ff5391a7645,13 Sep 2012,more RequestFlags getters/setters,128,data/crawl/squid/patch_539.diff
https://github.com/squid-cache/squid/commit/3aefe2bb7f5a4ea226e622dfe0a30e095bcf0c1f,13 Sep 2012,"Completed protos.h split and code refactoring

Complete the task of splitting protos.h into more specific files
Remove inclusion of protos.h from most files
Clean CVS and arch file-tags up
Rework some module initialization code so that it is the callee's task and not the callers' to do feature-enabling
Added ssl-crtd option to the maximus build test
Changed many functions' linkage type from C to C++",3766,data/crawl/squid/patch_540.diff
https://github.com/squid-cache/squid/commit/2fa037d1fbf44572c2459690c02e1fe7bf1ed2c0,09 Sep 2012,Merged from trunk,664,data/crawl/squid/patch_541.diff
https://github.com/squid-cache/squid/commit/bd14a86ea4687544adb425ccacb02d5ec5fc1083,09 Sep 2012,Merged from trunk,526,data/crawl/squid/patch_542.diff
https://github.com/squid-cache/squid/commit/86660d64fb95f949de9820e44233a273e97ebf91,06 Sep 2012,"Bug fix: TLS/SSL Options does not apply to the dynamically generated certificates

The TLS/SSL options configured with http_port configuration parameter does not
used to generate SSL_CTX context objects used to establish SSL connections.
This is means that certificate based authentication, or SSL version selection
and other SSL/TLS http_port options does not work for ssl-bumped connection.
This patch fixes this problem.

This is a Measurement Factory project",526,data/crawl/squid/patch_543.diff
https://github.com/squid-cache/squid/commit/5bed43d622661d7302e7a0a740730129fecb3022,30 Aug 2012,Moved some prototypes to tools.h,145,data/crawl/squid/patch_544.diff
https://github.com/squid-cache/squid/commit/fc54b8d21cac0631578f3e382f68fa9e996210ae,28 Aug 2012,"protos.h refactoring, part one.

Refactor many function prototypes from protos.h to more specific header files.
Change linkage for moved prototypes to c++.",2367,data/crawl/squid/patch_545.diff
https://github.com/squid-cache/squid/commit/a5bac1d2c727c558b8af4c13d3c5a84137435596,22 Aug 2012,moved HttpHeaderTools.cc-related headers to HttpHeaderTools.h,64,data/crawl/squid/patch_546.diff
https://github.com/squid-cache/squid/commit/58373ff8b8ac94bf427cc47c65dbb9c21f560a36,10 Aug 2012,"SourceLayout: introduce Fs::Ufs namespace, split ufscommon, store_dir_ufs and store_io_ufs",2913,data/crawl/squid/patch_547.diff
https://github.com/squid-cache/squid/commit/b632b875fc726b9eb4e57535e93c4ae1f038818c,09 Aug 2012,Convert all yet-unconverted stub files to the STUB API.,226,data/crawl/squid/patch_548.diff
https://github.com/squid-cache/squid/commit/9375050a3140f45d06b6b55fc666efc6518ba16f,08 Aug 2012,Fixed formatting of stub_libcomm.cc,65,data/crawl/squid/patch_549.diff
https://github.com/squid-cache/squid/commit/54311b7026f3f5af011cd808127103d4ed4e6795,08 Aug 2012,"Moved to STUB API stubs for DelayId.cc, HelperChildconfig.cc, debug.cc",23,data/crawl/squid/patch_550.diff
https://github.com/squid-cache/squid/commit/5fe1f1c4311d7511d66d1168f7d105aa436fc635,02 Aug 2012,SourceFormat Enforcement,4,data/crawl/squid/patch_551.diff
https://github.com/squid-cache/squid/commit/0bf57f33e5b7001cc680e9d978a027f6264faa60,01 Aug 2012,More GCC 4.2 dependency fixes,48,data/crawl/squid/patch_552.diff
https://github.com/squid-cache/squid/commit/7456a5c9d27ec42413ac84927c7f9158434d87ae,26 Jul 2012,Consolidate external_acl_form config dumping a bit and add missing percent dumper.,25,data/crawl/squid/patch_553.diff
https://github.com/squid-cache/squid/commit/882742f5c93d60263419906177115199c92f01a1,24 Jul 2012,Merged Postfix-Prefix branch: refactor inc/decrement operators from postfix to prefix form.,2789,data/crawl/squid/patch_554.diff
https://github.com/squid-cache/squid/commit/133c3ad634208df944eb0c5921bc23436d29ae9d,23 Jul 2012,Merged from trunk,4572,data/crawl/squid/patch_555.diff
https://github.com/squid-cache/squid/commit/14942eddc4ada4eea1bf57b9dcbe396545812258,19 Jul 2012,Changed increment operators from postfix to prefix form.,178,data/crawl/squid/patch_556.diff
https://github.com/squid-cache/squid/commit/8621b1ac6e2d63a83a41bd808bd3783dee06e416,18 Jul 2012,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
SslBump: Support bump-ssl-server-first and mimic SSL server certificates.

Summary: These changes allow Squid working in SslBump mode to peek at
the origin server certificate and mimic peeked server certificate
properties in the generated fake certificate, all prior to establishing
a secure connection with the client:
http://wiki.squid-cache.org/Features/BumpSslServerFirst
http://wiki.squid-cache.org/Features/MimicSslServerCert

The changes are required to bump intercepted SSL connections without
excessive browser warnings. The changes allow to disable bumping of some
intercepted SSL connections, forcing Squid to go into a TCP tunnel mode
for those connections.

The changes also empower end user to examine and either honor or bypass
most origin SSL server certificate errors. Prior to these changes, the
responsibility for ignoring certificate validation errors belonged
exclusively to Squid, necessarily leaving users in the dark if errors
are ignored/bypassed.

Squid can still be configured to emulate old bump-ssl-client-first
behavior.  However, a manual revision of ssl_bump options is required
during upgrade because ssl_bump no longer supports an implicit ""negate
the last one"" rule (and it is risky to let Squid guess what the admin
true intent was or mix old- and new-style rules).

Finally, fake certificate generation has been significantly improved.
The new code guarantees that all identically configured Squids receiving
identical origin server certificates will generate identical fake
certificates, even if those Squid instances are running on different
hosts, at different times, and do not communicate with each other. Such
stable, reproducible certificates are required for distributed,
scalable, or fail-safe Squid deployment.

Overall, the changes are meant to make SslBump more powerful and safer.
The code has been tested in several independent labs.


Specific major changes are highlighted below:

Make bumping algorithm selectable using ACLs. Even though
bump-server-first is an overall better method, bumping the client first
is useful for backward compatibility and possibly for serving internal
Squid objects (such as icons inside Squid error pages).  The following
example bumps special and most other requests only, using the old
bump-client-first approach for the special requests only:

    ssl_bump client-first specialOnes
    ssl_bump server-first mostOthers
    ssl_bump none all

It allow use the old ssl_bump syntax:
   ssl_bump allow/deny acl ...
but warns the user to update squid configuration.

Added sslproxy_cert_adapt squid.conf option to overwrite default mimicking
behavior when generating SSL certificates. See squid.conf.documented.

Added sslproxy_cert_sign squid.conf option to control how generated SSL
certificates are signed. See squid.conf.documented.

Added ssl::certHasExpired, ssl::certNotYetValid, ssl::certDomainMismatch,
ssl::certUntrusted, and ssl::certSelfSign predefined ACLs to squid.conf.

Do not require http[s]_port's key option to be set if cert option is given.
The fixed behavior for bumped connections now matches squid.conf docs.

Generate stable fake certificates by using signing and true certificate
hashes as the serial number and by using the configured CA private key
for all fake certificates.

Use minimal, trusted certificate for serving SSL errors to the client
instead of trying to mimic the broken true certificate (which results
in double error for the user: browser error dialog plus Squid error page).

To mimic ""untrusted"" true certificates, generate an untrusted CA certificate
from the configured trusted CA certificate. This both reduces configuration
effort (compared to a configuration option) and results in identical
untrusted fake certificates given identical Squid configurations.

Intelligent handling of CONNECT denials: Do not connect to origin
servers unless CONNECT is successfully authenticated. Delay errors.Added sslproxy_cert_sign squid.conf option to control how generated SSL
certificates are signed. See squid.conf.documented.

Provide '%I' error page formatting code with enough information to avoid
displaying '[unknown]' on SQUID_X509_V_ERR_DOMAIN_MISMATCH errors.

Set logged status code (%<Hs) to 200 when establishing a bumped tunnel.

Improved error detailing and logging: Forget most retried errors.
During SslBump errors, the error details are now logged with both the
initial CONNECT transaction and the first tunneled HTTP transaction.
Do not report system errors as custom Squid errors. Do not report
system errors that did not necessarily happen during the transaction
being logged.

Check SSL server certificate when reconnecting to the origin server for
bumped requests. Despite pinning, Squid maintains two separate connections
and the server may disconnect while the client is still sending requests. To
minimize deployment problems, we reconnect to the origin server but check
that its certificate (which we mimicked for the client) has not changed
much.

Forward bumped server connection-close signal to the bumped client to
improve the ""dumb tunnel"" appearance of the bumped SSL tunnel.

Allow bumping of CONNECT requests without allow-direct set on http_port.
Previously, that flag was required to allow bumped requests to go direct
because they were (and, sometimes, still are) considered ""accelerated"".

Send SNI information to the server when server-first bumping a non-IP
CONNECT request.

Better helper-to-Squid buffer size management to support large certificates.

Bypass rare OpenSSL certificate serialization failures when composing an
ssl_crtd request by generating the certificate in the Squid process.

When generating certificate CN names, strip [] surrounding host names,
assuming they are for IPv6 addresses. Bracketed CNs confuse browsers.

Disable persistent connections after client-side-detected errors. They cause
""abandoning such and such connection"" warnings, stuck ConnStateData jobs, and
other problems.

HttpRequest::SetHost() must invalidate HttpRequest::canonical ""cache"".

Implement ssl::bump_mode logformat code to log SslBump decisions: prints ""none"",
""client-first"", ""server-first"" or ""-"" for no ssl-bump enabled ports

Synced with trunk (trunk r12216, v3.2.0.18+)

This is a Measurement Factory project.",3561,data/crawl/squid/patch_557.diff
https://github.com/squid-cache/squid/commit/2f6fcab1f37182a2b52350efb42a63c9cf949568,18 Jul 2012,"Bug 3551: store_rebuild.cc:116: ""store_errors == 0"" assertion

Fail with an explanation instead of asserting. The assertion fails when a ufs
cache_dir's swap.state has inconsistencies AND the user starts Squid with a -S
command line option. Normally, such inconsistencies are ignored and many of
them are benign.  For example, a missing cache file with an ADD record in
swap.state is such an inconsistency.

The -S option was meant to help developers troubleshoot inconsistencies by
analyzing core dumps, but (a) admins treat assertions as Squid bugs and file
bug reports and (b) in most cases, it is really difficult to find the
inconsistency when Squid asserts after detecting all of them (and leaving the
detection context).

We now explicitly tell the admin what their options are and quit instead of
asserting.

TODO: Consider adding a ufs cache_dir option that checks for and removes
inconsistencies instead of not checking at all (default) or checking and
quitting (-S). This is difficult because some valid cache entries may look
inconsistent while they are being updated and some invalid cache entries
are not visible to Squid without a full directory scan.",8,data/crawl/squid/patch_558.diff
https://github.com/squid-cache/squid/commit/71cae3894fd0c52dd4b4bfedb3ac1323eb619a73,18 Jul 2012,merge from trunk (r12216 v3.2.0.18+),2062,data/crawl/squid/patch_559.diff
https://github.com/squid-cache/squid/commit/5db6bf73931d8c426d81085d757c8b1206b02c9b,18 Jul 2012,Changed increment operators from postfix to prefix form.,469,data/crawl/squid/patch_560.diff
https://github.com/squid-cache/squid/commit/95dc7ff44bb6598cf09020f2ac9b66f0cb28f8e5,17 Jul 2012,Changed increment operators from postfix to prefix form.,541,data/crawl/squid/patch_561.diff
https://github.com/squid-cache/squid/commit/f4698e0b79fa14c3ae1758eb36561aaa39344cd7,17 Jul 2012,"Add request_header_add option

This patch:

- Add request_header_add, a new ACL-driven squid.conf option that         
  allow addition of HTTP request header fields before the request is sent to
  the next HTTP hop (a peer proxy or an origin server):
     request_header_add <field-name> <field-value> acl1 [acl2]
  where:
     * Field-name is a token specifying an HTTP header name.
     
     * Field-value is either a constant token or a quoted string containing
       %macros. In theory, all of the logformat codes can be used as %macros.
       However, unlike logging the transaction may not yet have enough
       information to expand a macro when the new header value is needed.
       The macro will be expanded into a single dash ('-') in such cases.
       Not all macros have been tested.

     * One or more Squid ACLs may be specified to restrict header insertion to
       matching requests. The request_header_add option supports fast ACLs only.

- Add the %ssl::>cert_subject and %ssl::>cert_issuer logformating codes which
  prints the Subject field and Issuer field of the received client SSL
  certificate or a dash ('-').

This is a Measurement Factory project.",328,data/crawl/squid/patch_562.diff
https://github.com/squid-cache/squid/commit/9415b7cdfd3b6067b151f08935bc1278360f6136,16 Jul 2012,Merged from trunk,660,data/crawl/squid/patch_563.diff
https://github.com/squid-cache/squid/commit/6dd9a2e497684ead9334c48ae450c02f2b3f3775,10 Jul 2012,"Bug 3577: File Descriptors not properly closed in trunk r12185.
Bug 3583: Server connection stuck after TCP_REFRESH_UNMODIFIED.

These changes fix FD leaks and stuck connections under two conditions:

1) Client aborts while Squid's server-side establishes a connection

Bug 3577: When a client quits while ConnOpener is trying to open the
connection to the next hop, FwdState cancels its ConnOpener callback.
ConnOpener notices that when trying to connect again and quits before
establishing a connection. The ConnOpener cleanup code did not close the
temporary FD used for establishing the connection. It did call fd_close(),
but fd_close() does not close the FD, naturally.

ConnOpener was probably leaking the temporary FD in other error handling
cases as well. It was never closed unless the connection was successful.


2) Client aborts after Squid's server-side established a connection:

Bug 3583: When a client aborts the store entry after receiving an HTTP 304 Not
Modified reply in response to a cache refreshing IMS request, HttpStateData
notices an aborted Store entry (after writing the reply to store), but does
virtually nothing, often resulting in a stuck server connection, leaking a
descriptor.  Now we abort the server-side transaction in this case.

Bug 3577: Similarly, when a client disconnects after Squid started talking to
the origin server but before Squid received a [complete] server response,
HttpStateData notices an aborted Store entry (during the next read from the
origin server), but does virtually nothing, often resulting in a stuck server
connection, leaking a descriptor. Now we abort the server-side transaction in
this case.

FwdState now also closes the server-side connection, if any, when the client
aborts the store entry and FwdState::abort() callback is called. This helps
reduce the number of concurrent server-side connections when clients abort
connections rapidly as Squid no longer has to wait for the server-side I/O to
notice that the entry is gone. The code to close the connection was temporary
removed in trunk r10057.1.51.",18,data/crawl/squid/patch_564.diff
https://github.com/squid-cache/squid/commit/3b07476b752e45322023212915a52f586cf56c1c,05 Jul 2012,"Author: Alex Rousskov <rousskov@measurement-factory.com>
[request|reply]_header_* manglers fixes to handle custom headers

This patch fix the [request|reply]_header_[access|replace] configuration
parameters to support custom headers. Before this patch the user was able 
to remove/replace/allow all custom headers using the ""Other"" as header name.


This is a Measurement Factory project.",439,data/crawl/squid/patch_565.diff
https://github.com/squid-cache/squid/commit/c91ca3cec34cae248147cec7d710c3d6f46bdb46,22 Jun 2012,"Fix build with GCC 4.7 (and probably other C++11 compilers).

User-defined literals introduced by C++11 break some previously valid
code, resulting in errors when building with GCC v4.7. For example:

  error: unable to find string literal operator 'operator"""" PRIu64'

In particular, whitespace is now needed after a string literal and
before something that could be a valid user-defined literal.  See
""User-defined literals and whitespace"" section at [1] for more details.

The patch adds spaces between string literals and macros.

[1] http://gcc.gnu.org/gcc-4.7/porting_to.html",90,data/crawl/squid/patch_566.diff
https://github.com/squid-cache/squid/commit/4c535e8712b5b4008e78c60ccda9a464d8eee4b9,19 Jun 2012,"Cleanup: disconnect Authentication and URL-rewrite callback handlers

The authentication handlers were for some reason using RH (rewrite helper)
callback typedef. But specifying it as a fatal error if the char*
parameter was used in auth.

Assign a new callback typedef AUTHCB for use by authentication callers.

This allows auth callers to use different parameters (none) and to avoid
possibly fatal mistakes when coding new auth modules.",60,data/crawl/squid/patch_567.diff
https://github.com/squid-cache/squid/commit/37276dbb34a2a5bedddf25af3f093228ff43742d,19 Jun 2012,"Merged from trunk (r12181, v3.2.0.17+)",1432,data/crawl/squid/patch_568.diff
https://github.com/squid-cache/squid/commit/e0f7153c051220e63a512fb4e20271e505ec2c52,16 Jun 2012,"Fix several ACL-related bugs including broken default rules and ACCESS_DUNNO.

For example:

    # broken when ""goodGuys"" matches (denies good guys)
    acl_driven_option deny !goodGuys

and

    # broken if badGuys fails to match or mismatch (allows bad guys)
    acl_driven_option allow !badGuys


Fixing the above resulted in significant changes (and more fixes!)
detailed below.

 * Revised ACLChecklist::fastCheck() and nonBlockingCheck() APIs to
   clarify all possible outcomes and to specify that exceptional ACL
   check outcomes (not ALLOW or DENIED) are not ignored/skipped but
   result in the same exceptional final answer. I believe this is the
   right behavior even if it is going to break some [already broken
   IMHO] existing configurations. Skipping failed ACLs is insecure and
   may lead to confusing results.

 * Correctly handle cases where no rules were matched and, hence, the
   keyword/action of the last seen rule (if any) has to be ""reversed"".

 * Do not ignore non-allow/deny outcomes of rules in fastCheck().

 * Move away from setting the ""default"" (and usually wrong) ""current""
   answer and then sometimes adjusting it. Set the answer only when we
   know what it is. This is done using markFinished() call which now
   accepts the [final] answer value and debugging reason for selecting
   that answer.

 * Streamline and better document ACLChecklist::matchAclList()
   interface.  Use it in a more consistent fashion.

 * Rewrote ACLChecklist::matchAclList() implementation when it comes to
   handling ACLList::matches() outcomes. Better document and restrict
   supported outcomes. Assert on unsupported outcomes (for now).

 * Removed ACLChecklist::lastACLResult(). It was doing nothing but
   duplicating nodeMatched value as far as I could tell.

 * Removed ProxyAuthNeeded class. It is an async state that does not
   perform async operations and, hence, is not needed.

 * Move IdentLookup::checkForAsync() connection check into
   ACLIdent::match() to avoid creating an async state that is not
   needed.

 * Polished aclMatchExternal() and greatly simplified
   ACLExternal::ExternalAclLookup() to avoid creating async state under
   non-async conditions, to avoid checking for the same conditions
   twice, to fix wrong debugging messages, and to simplify (and possibly
   fix) the overall algorithm.

   The aclMatchExternal() call now checks most of the corner cases,
   discards stale cached entries, and schedules either a background
   cache update or a regular external lookup as needed.

   ACLExternal::ExternalAclLookup() code is now
   ExternalACLLookup::Start().  It initiates an external lookup. It does
   not deal with the cached entry at all. It relies on
   aclMatchExternal() to check various preconditions.

   Some of the old code made little sense to me, and this is the biggest
   ACL-specific change in this project, with the highest probability of
   new bugs or unintended side-effects.

   My goal here was to prevent aclMatchExternal() from creating an async
   state where none was needed because new ACLChecklist::matchAclList()
   code prohibited such self-contradictory outcomes. However, I later
   discovered that it is not possible to prohibit them without rewriting
   how Squid DNS cache lookups are working -- ipcache_nbgethostbyname()
   and similar code may call back immediately if the item is in the
   cache. Since I did not want to rewrite DNS code as well, I ended up
   relaxing the ACLChecklist::matchAclList() code requirements, going a
   step back to where we sometimes call ACLList::matches() twice for the
   same ACL node.

   Thus, it is probably possible to undo most of the external_acl.cc
   changes.  I left them in because I think they improve the quality of
   the code and possibly fix a bug or two.

 * Adjusted ACLMaxUserIP::match(), ACLProxyAuth::match(), and
   ACLExternal::match() to explicitly stop ACL processing when an
   exceptional state is discovered instead of just setting the current
   answer and proceeding as if more ACLs could be checked. On the other
   hand, we now do not set the answer if the corresponding internal
   matching code (e.g., AuthenticateAcl()) needs an async operation
   because we do not know the answer yet.

 * Fixed HttpStateData::handle1xx() and
   HttpStateData::finishingBrokenPost() to correctly handle
   fastCheck(void) return values. They were assuming that there are only
   two possible return values (ACCESS_DENIED/ALLOWED), potentially
   subjecting more messages to invasive adaptations than necessary.

TODO: 

 * Rename currentAnswer() to finalAnswer(). We probably never change the
   ""current"" answer any more.",614,data/crawl/squid/patch_569.diff
https://github.com/squid-cache/squid/commit/8c730caeff365546089fec4a81b4d26d60e25778,13 Jun 2012,"Fix testHttpParser compile error 'variable tracking size limit exceeded'

This can occur due to long lists of unit tests needing a lot of local
variable state tracking. Essentially 'function too long' after CPPUNIT
macros have been expanded.

Break the large set of request-line unit tests into groups related to
sub-parts of the request-line.",653,data/crawl/squid/patch_570.diff
https://github.com/squid-cache/squid/commit/dcb1e4bbf8c0f051401d00ac7b6bc671c4274e3d,01 Jun 2012,"Fixed several ACL-related bugs, including:

    # broken when ""goodGuys"" matches (denies good guys)
    acl_driven_option deny !goodGuys

and

    # broken if badGuys fails to match or mismatch (allows bad guys)
    acl_driven_option allow !badGuys

Fixing the above resulted in significant changes (and more fixes!)
detailed below.

 * Revised ACLChecklist::fastCheck() and nonBlockingCheck() APIs to
   clarify all possible outcomes and to specify that exceptional ACL
   check outcomes (not ALLOW or DENIED) are not ignored/skipped but
   result in the same exceptional final answer. I believe this is the
   right behavior even if it is going to break some [already broken
   IMHO] existing configurations. Skipping failed ACLs is insecure and
   may lead to confusing results.

 * Correctly handle cases where no rules were matched and, hence, the
   keyword/action of the last seen rule (if any) has to be ""reversed"".

 * Do not ignore non-allow/deny outcomes of rules in fastCheck().

 * Move away from setting the ""default"" (and usually wrong) ""current""
   answer and then sometimes adjusting it. Set the answer only when we
   know what it is. This is done using markFinished() call which now
   accepts the [final] answer value and debugging reason for selecting
   that answer.

 * Streamline and better document ACLChecklist::matchAclList()
   interface.  Use it in a more consistent fashion.

 * Rewrote ACLChecklist::matchAclList() implementation when it comes to
   handling ACLList::matches() outcomes. Better document and restrict
   supported outcomes. Assert on unsupported outcomes (for now).

 * Removed ACLChecklist::lastACLResult(). It was doing nothing but
   duplicating nodeMatched value as far as I could tell.

 * Removed ProxyAuthNeeded class. It is an async state that does not
   perform async operations and, hence, is not needed.

 * Move IdentLookup::checkForAsync() connection check into
   ACLIdent::match() to avoid creating an async state that is not
   needed.

 * Polished aclMatchExternal() and greatly simplified
   ACLExternal::ExternalAclLookup() to avoid creating async state under
   non-async conditions, to avoid checking for the same conditions
   twice, to fix wrong debugging messages, and to simplify (and possibly
   fix) the overall algorithm.

   The aclMatchExternal() call now checks most of the corner cases,
   discards stale cached entries, and schedules either a background
   cache update or a regular external lookup as needed.

   ACLExternal::ExternalAclLookup() code is now
   ExternalACLLookup::Start().  It initiates an external lookup. It does
   not deal with the cached entry at all. It relies on
   aclMatchExternal() to check various preconditions.

   Some of the old code made little sense to me, and this is the biggest
   ACL-specific change in this project, with the highest probability of
   new bugs or unintended side-effects.

   My goal here was to prevent aclMatchExternal() from creating an async
   state where none was needed because new ACLChecklist::matchAclList()
   code prohibited such self-contradictory outcomes. However, I later
   discovered that it is not possible to prohibit them without rewriting
   how Squid DNS cache lookups are working -- ipcache_nbgethostbyname()
   and similar code may call back immediately if the item is in the
   cache. Since I did not want to rewrite DNS code as well, I ended up
   relaxing the ACLChecklist::matchAclList() code requirements, going a
   step back to where we sometimes call ACLList::matches() twice for the
   same ACL node.

   Thus, it is probably possible to undo most of the external_acl.cc
   changes.  I left them in because I think they improve the quality of
   the code and possibly fix a bug or two.

 * Adjusted ACLMaxUserIP::match(), ACLProxyAuth::match(), and
   ACLExternal::match() to explicitly stop ACL processing when an
   exceptional state is discovered instead of just setting the current
   answer and proceeding as if more ACLs could be checked. On the other
   hand, we now do not set the answer if the corresponding internal
   matching code (e.g., AuthenticateAcl()) needs an async operation
   because we do not know the answer yet.

 * Fixed HttpStateData::handle1xx() and
   HttpStateData::finishingBrokenPost() to correctly handle
   fastCheck(void) return values. They were assuming that there are only
   two possible return values (ACCESS_DENIED/ALLOWED), potentially
   subjecting more messages to invasive adaptations than necessary.",618,data/crawl/squid/patch_571.diff
https://github.com/squid-cache/squid/commit/8661a1d0b52a98b649854bfc3f73eccfbae77f7f,31 May 2012,Bootstrapped,12,data/crawl/squid/patch_572.diff
https://github.com/squid-cache/squid/commit/cb72cd25104b546900baa3dafda7525d9d60f392,29 May 2012,"Author: Dan Searle <dan.searle@censornet.com>
External credentials to ICAP

Pass user credentials obtained from external ACLs to the ICAP service
using Proxy-Authorization and X-Client-Username ICAP headers.",16,data/crawl/squid/patch_573.diff
https://github.com/squid-cache/squid/commit/fe1e5c91cd987b5bf3b780736c9ba266ed621234,28 May 2012,"Define PRIuSIZE for displaying size_t

This allows us to avoid casting size_t to long long for printf.

./configure script auto-detects the supposedly standard %zu macro in case
it is missing and compat/types.h defines some alternatives for systems
which do not define it.",46,data/crawl/squid/patch_574.diff
https://github.com/squid-cache/squid/commit/5ae655811f1f7a082d2d2b99637c8a0b76b030c7,14 May 2012,"Merged from trunk (r12132,  v3.2.0.17+)",2724,data/crawl/squid/patch_575.diff
https://github.com/squid-cache/squid/commit/caf3666d1f57f270e2ba21ea4974b44f863c5cf2,04 May 2012,"Re-enabled support for bump-client-first mode using enhanced ssl_bump option.

Even though bump-server-first is an overall better method, bumping the client
first is useful for backward compatibility and possibly for serving internal
Squid objects such as icons.

The code path implementing bump-client-first approach was preserved during the
bump-server-first changes, so we just needed to add a configuration option to
allow the admin to pick between two modes. We did that by using custom ""mode""
keywords with the existing ssl_bump option. The old allow/deny pair of
standard keywords could not be used to select one of the two modes for an
""allowed"" connection.",222,data/crawl/squid/patch_576.diff
https://github.com/squid-cache/squid/commit/65d448bc848526838ea2d5cea65d72a341896f08,25 Apr 2012,"SourceLayout: port config and select-loop priority polishing

- renames http_port_list to AnyP::PortCfg
- de-duplicate https_port_list into AnyP::PortCfg
- shuffles related globals and defines into anyp/PortCfg.*
- renames MAXHTTPPORTS to MAXTCPLISTENPORTS to suit its actual coverage of HTTP and HTTPS ports.
- shuffled config port clone function into a method.
- rename ICP/HTCP/SNMP API functions to consistent *OpenPorts() and *ClosePorts()


  NP:following applies to incoming_* and *_poll_cnt directives.
- renames *_icp_* to *_udp_*
- renames *_http_* to *_tcp_*
- shuffles duplicated struct SquidConf options into a shared structure
- shuffles related defines into comm/Loops.h
- documents options better

- various other cosmetic syntax tweaks and polish

One bug fix:
  comm_dns_incoming was not being propigated in StatsHist copy/clone.
  Now is. I seem to remember mention of something similar being zero before,
  but can't find the bug report.",1098,data/crawl/squid/patch_577.diff
https://github.com/squid-cache/squid/commit/d2c3030de9e34b3c0e7efa8f0cf3098d17fe0bfe,27 Mar 2012,"Merged from trunk (r12098,  v3.2.0.16+).",327,data/crawl/squid/patch_578.diff
https://github.com/squid-cache/squid/commit/31e19066e7ee2c4f9660855092bb828c9f69f5d7,23 Mar 2012,"Bug 3193: NTLM decoder truncating strings

* Also ntlm_unpack_auth using reversed arguments for memcpy()
* Also improved packet structure debug display",40,data/crawl/squid/patch_579.diff
https://github.com/squid-cache/squid/commit/f4e4d4d6f1540163acf52590868f1dc77b1d3410,21 Mar 2012,"certificateMatchesProperties segfault

It is reported at least one case where squid crashed with segfault because the
signing certificate was NULL.

This patch:
  - Add assertion checks inside  buildSslCertGenerationParams and  
    Ssl::certificateMatchesProperties functions (a)to avoid segfaults
  - In the case the signing certificate is not given in http_port configuration
    or the given certificate filename was not valid, squid does not start.
  - Creates the http_port_list::configureSslServerContext method and move
    here the cache_cf.cc code which was responsible to initialize ssl contexts
    and sslBump feature.",97,data/crawl/squid/patch_580.diff
https://github.com/squid-cache/squid/commit/aebe6888b2d7870965f2e7877e562004e4d91bf9,27 Jan 2012,"sslproxy_cert_sign squid.conf option

This option control how generated fake SSL certificates are signed.

Syntax:
  sslproxy_cert_sign <signing algorithm> acl ...

where <signing algorithm> can be one of the signTrusted, signUntrusted or
signSelf

Default signing algorithm if the sslproxy_cert_sign is not configured is 
signSelf, if the server certificate is self signed, signUntrusted if the server
certificate is untrusted (ERR_INVALID_CA, ERR_SELF_SIGNED_CERT_IN_CHAIN,
ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE, ERR_UNABLE_TO_GET_ISSUER_CERT,
ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY and ERR_CERT_UNTRUSTED errors) and
signTrusted if the server certificate is trusted.


Notes:
  - The signing algorithm passed as parameter to the ssl_crtd daemon

  - A self signed certificate generated on squid startup to be used as
    signing certificate for untrusted certificates, with CN = 
    ""Squid CA for Untrusted Certificates""

  - The configured certificates with http(s)_port squid.conf option chained to
    the client SSL connection only when signTrusted signing algorithm selected.
    When the signing algorithm is signSelf or signUntrusted no other certificate
    send to the client browser.

  - A small bug fixed which did not allow the sslproxy_cert_adapt option
    to be enabled in squid if the icap client is not enabled",618,data/crawl/squid/patch_581.diff
https://github.com/squid-cache/squid/commit/fb2178bb51a9028bbb9d848e669fd02f380134d4,21 Jan 2012,"sslproxy_cert_adapt squid.conf option

This patch add the sslproxy_cert_adapt option to squid.conf which gives to
squid administrators the required functionality to ""fix"" a known broken 
certificate using acls.
Currently only the ""Not After"", ""Not Before"" and ""Common Name"" fields of a
certificate can be modified/fixed.

The sslproxy_cert_adapt option has the form:
   sslproxy_cert_adapt <adaptation algorithm> acl ...
where <adaptation algorithm> is one of the setValidAfter, setValidBefore and 
setCommonName.

    setValidAfter: sets the ""Not After"" property to the signing cert's 
                   ""Not After"" property.
    setValidBefore: sets the ""Not Before"" property to the signing cert's 
                   ""Not After"" property.
    setCommonName: sets certificate Subject.CN property to the host name
                   from specified as a CN parameter (setCommonName{CN}) or, 
                   if no explicit CN parameter was specified, extracted from 
                   the CONNECT request

When the acl(s) match, the corresponding adaptation algorithm is applied to 
the fake/generated certificate. Otherwise, the default mimicking action takes 
place.",451,data/crawl/squid/patch_582.diff
https://github.com/squid-cache/squid/commit/081edc2de252e852d0a8e02891fb36d7919a92ef,07 Jan 2012,"Cleanup: update most of the existing stub files to use the STUB.h framework

There are still several sections to be done. Including adding library API
stubs. However these are the ones which can be done immediately without 
breaking or re-writing existing unit tests.",2058,data/crawl/squid/patch_583.diff
https://github.com/squid-cache/squid/commit/f64091a7feba6201f19f6b311449225fd0e515e7,03 Jan 2012,"SourceLayout: DNS component code style changes

- removes ""dnsserver"" terminology from all the Squid internals and
  ./configure docs. Replacing it with ""helper"" to avoid confusion.

- updates the automake conditional to ENABLE_DNSHELPER and code define
  to USE_DNSHELPER inline with coding guidelines.

- shuffles the DNS API definitions to their own header, SquidDns.h, and
  de-duplicates the init/shutdown API calls to remove some #if",206,data/crawl/squid/patch_584.diff
https://github.com/squid-cache/squid/commit/b073fc4bde37d3b0dd2f820f90c801d7dada1338,30 Dec 2011,"Cache Manager migration support

 * Add a little bit of XHR script to the CGI cachemgr front page which
probes each of the managed proxies for http:// and https:// capabilities
and produces web links to their internal managers.

 * Reserve the template name MGR_INDEX for use by cachemgr scripts.
But do not distribute any preset template. This allows manager apps to
provide their own static template with linked scripts and objects.

 * The error page system is updated to create a blanket message
indicating missing template instead of aborting Squid if a template is
not even installed.",122,data/crawl/squid/patch_585.diff
https://github.com/squid-cache/squid/commit/c7baff405558ef38ca6f0b2e5568621ad120004a,30 Dec 2011,"SourceLayout: shuffel UserRequest into Auth:: namespace

No logic changes, symbols and debug only.

* shuffle AuthUserRequest to Auth::UserRequest
* shuffle AuthBasicUserRequest to Auth::Basic::UserRequest
* shuffle AuthDigestUserRequest to Auth::Digest::UserRequest
* shuffle AuthNegotiateUserRequest to Auth::Negotiate::UserRequest
* shuffle AuthNTLMUserRequest to Auth::NTLM::UserRequest

* polish and add documentation for several parts of the hierarchy

* replace obsolete debugs() location texts",547,data/crawl/squid/patch_586.diff
https://github.com/squid-cache/squid/commit/4c5edb3ae2d8c29c9675861b134f66b409f0f04a,16 Dec 2011,"Merge StatHist feature-branch:
- StatHist refactoring
- StatCounters untangling from global symbol table",1360,data/crawl/squid/patch_587.diff
https://github.com/squid-cache/squid/commit/e8baef82c96df1a4fa39e842cc9e91ad2cf4d2f4,15 Dec 2011,Renamed some fields to CamelCase.,255,data/crawl/squid/patch_588.diff
https://github.com/squid-cache/squid/commit/8284fb70f5afd51035f5fcd03ef6483f88c2044b,15 Dec 2011,Updated (and made use of) stub_StatHist,30,data/crawl/squid/patch_589.diff
https://github.com/squid-cache/squid/commit/151ce8610ba28c0a4904554c3a612063c82992e3,15 Dec 2011,Updated (and made use of) stub_StatHist,30,data/crawl/squid/patch_590.diff
https://github.com/squid-cache/squid/commit/51c5b0b0a5a32a2c7f88aa9b01f3245e7802f9e1,13 Dec 2011,Merged from trunk,616,data/crawl/squid/patch_591.diff
https://github.com/squid-cache/squid/commit/e161cb088036c4637e106939e93af3c0ffca548e,12 Dec 2011,Refactored statHistIntInit,48,data/crawl/squid/patch_592.diff
https://github.com/squid-cache/squid/commit/82146cc800aa12d238a4bf3343303598fe2cc267,10 Dec 2011,Fixed some more dead references to stats.,30,data/crawl/squid/patch_593.diff
https://github.com/squid-cache/squid/commit/cf6eb29ef384e73a2a00839bc215dcc555e39691,06 Dec 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Bug 3420: Request body consumption races and !theConsumer exception.

Also fixes endless waiting for HTTP client to send req body we no longer need.

Before these changes, the client side used a single ""closing"" state to
handle two different error conditions:

  1. We stopped receiving request body because of some error.
  2. We stopped sending response because of some error.

When a ""directional"" error occurred, we try to keep the transaction going in
the other direction (e.g., to give ICAP the entire request or to give HTTP
client the entire response). However, because there was just one ""closing""
state, the code failed to correctly detect or process many corner cases,
resulting in stuck transactions and !theConsumer assertions/exceptions due to
races between enableAutoConsumption() and expectNoConsumption() calls.

This patch replaces the ""closing"" state with two direction-specific ""we
stopped sending/receiving"" flags.

Now, when the response sending code is done, it now checks whether the
receiving code stopped and closes the connection as needed. This is done both
when we encounter a sending error (ClientSocketContext::initiateClose) and
when we successfully sent the entire response to the client
(ClientSocketContext::keepaliveNextRequest).

Similarly, when the request body reading code is done, it now checks whether
the receiving code stopped and closes the connection as needed. This is done
both when we encounter a receiving error
(ConnStateData::noteBodyConsumerAborted) and when we successfully receive the
entire request body from the client (ClientSocketContext::writeComplete).

TODO: This patch focuses on various error cases. We might still have problems
when there is an early HTTP response and no errors of any kind. I marked the
corresponding old code with an XXX.",139,data/crawl/squid/patch_594.diff
https://github.com/squid-cache/squid/commit/c031952f278d7a8cf2d7043aa8f32ad004af980e,03 Dec 2011,Fix arguments to swaplog renaming calls,4,data/crawl/squid/patch_595.diff
https://github.com/squid-cache/squid/commit/2066f5a150c149ffbd900cf07bc1439a1801e9c7,03 Dec 2011,Polish debug messages on swap.state rename failure,7,data/crawl/squid/patch_596.diff
https://github.com/squid-cache/squid/commit/a636cbbf7cfc3f4ab63042b1d3aef538e5140911,27 Nov 2011,Bug 3432: Crash logging FTP errors,2,data/crawl/squid/patch_597.diff
https://github.com/squid-cache/squid/commit/0ad2b63bf4586b507e351b853424ac13f81d3404,18 Nov 2011,"author: Martin Huter <mhuter@barracuda.com>, Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
Bug 2619: Excessive RAM growth due to unlimited adapted body data consumption

If the client does not read from the open connection (i.e. the user does not
confirm the browsers download-message-box in microsofts IE), squid keeps on
reading data from the ICAP server into the store entry, while no more data
can be delivered to the client. 
Thus the store entry in memory is growing and squid may - in worst case - 
consume memory up to the size of the users download.

This patch add API to StoreEntry to call the producer back when released 
memory/space from the StoreEntry and add code to the ICAP client code to not
consume body data comes from the ICAP server when there is not available space
in the store entry.",188,data/crawl/squid/patch_598.diff
https://github.com/squid-cache/squid/commit/2c87d96a00ae5e6f7dd0928f33c2b55f45b985dc,03 Nov 2011,Bug 3406: SSL Log Error in debug,4,data/crawl/squid/patch_599.diff
https://github.com/squid-cache/squid/commit/71ee08359b9bb8426cc9a017b204b10e038e7c29,29 Oct 2011,SourceFormat Enforcement,73,data/crawl/squid/patch_600.diff
https://github.com/squid-cache/squid/commit/3511674faaf401c138195134a953e0c600136662,28 Oct 2011,"adaptation_meta option

add missing src/tests/testConfigParser[.h,.cc] files",109,data/crawl/squid/patch_601.diff
https://github.com/squid-cache/squid/commit/71be37e0d265e4e1931361e1b46336ac9eae6714,28 Oct 2011,"adaptation_meta option

This option allows Squid administrator to add custom ICAP request
headers or eCAP options to Squid ICAP requests or eCAP transactions.
Use it to pass custom authentication tokens and other
transaction-state related meta information to an ICAP/eCAP service.

The addition of a meta header is ACL-driven:
        adaptation_meta name value [!]aclname ...

Processing for a given header name stops after the first ACL list match.
Thus, it is impossible to add two headers with the same name. If no ACL
lists match for a given header name, no such header is added. For example:

        # do not debug transactions except for those that need debugging
        adaptation_meta X-Debug 1 needs_debugging

        # log all transactions except for those that must remain secret
        adaptation_meta X-Log 1 !keep_secret

        # mark transactions from users in the ""G 1"" group
        adaptation_meta X-Authenticated-Groups ""G 1"" authed_as_G1

The ""value"" parameter may be a regular squid.conf token or a ""double
quoted string"". Within the quoted string, use backslash (\) to escape
any character, which is currently only useful for escaping backslashes
and double quotes. For example,
    ""this string has one backslash (\\) and two \""quotes\""""

This is a Measurement Factory project",385,data/crawl/squid/patch_602.diff
https://github.com/squid-cache/squid/commit/9e8f57e04f3ff39428f2adec9d0584fe5290767e,23 Oct 2011,"ext_session_acl: version 1.2

This patch makes the following changes to the session helper:

- Removes support for Berkeley DB 1.85
- Adds support for the current Berkeley DB (db.h)
- Adds support for a DB environment (if a directory is specified as
  the path then an environment is created). This gives better
  synchronisation within multiple processes
- Fixes a bug with active mode where LOGIN/LOGOUT did not write to the DB",109,data/crawl/squid/patch_603.diff
https://github.com/squid-cache/squid/commit/b46ae5259f2c1a194bf35e1ab76f039deafc10b9,21 Oct 2011,Polished more fatal messages.,23,data/crawl/squid/patch_604.diff
https://github.com/squid-cache/squid/commit/77915f065e93d6218259a8703a2fa912e37f95a6,21 Oct 2011,Made fatal shm_open() errors more detailed to triage failing tests/testRock.,8,data/crawl/squid/patch_605.diff
https://github.com/squid-cache/squid/commit/796282997ecc51055382954c4db91f737f577d26,21 Oct 2011,"Delete server-side deleteThis()

This patch finishes the conversion of ServerStateData into AsyncJob by properly
implementing the doneAll() method and by removing calls to deleteThis() or
replacing with mustStop() calls as appropriate.

The Adaptation::AccessCheck modified to schedule an AsyncJobCall when
access check finishes.

The ServerStateData and ClientHttpRequest classes modified to work with the new
Adaptation::AccessCheck.

This is a Measurement Factory project",158,data/crawl/squid/patch_606.diff
https://github.com/squid-cache/squid/commit/93bc1434c57ba45489e997fffb3e215592fff273,14 Oct 2011,"SMP shared memory cache stats were not collected.

""Hot Object"" stats were not reported for shared memory cache.

Mean disk object size stats were aggregated inaccurately for SMP.

Moved Store-related stats into a dedicated StoreStats class,
encapsulating memory cache-related (mem), disk cache-related (swap), and
global store (number of objects) stats. Used consistent naming scheme 
and a common parent class to make memory and disk stats more alike.

Moved Store stats collection into corresponding Store classes rather
than forcing GetInfo() in stat.cc to know how to deal with all Store stats.",323,data/crawl/squid/patch_607.diff
https://github.com/squid-cache/squid/commit/9bb016119a1ac45a31f638fd275a0adf8b2fc844,14 Oct 2011,"Add basic ""make check"" tests for Rock Store, based on UFS and COSS tests.",496,data/crawl/squid/patch_608.diff
https://github.com/squid-cache/squid/commit/8846a2b47415f92c15b9ab3727b6ebcd31233329,13 Oct 2011,"Log field width polishing

This patch:
 - converts type of the Token::[width|precision]  members from ""unsigned int"" to ""int""
 - renames the Token::[width|precision] members to Token::[widthMin/widthMax]
 - removes unneeded typecastings

This is a Measurement Factory project",40,data/crawl/squid/patch_609.diff
https://github.com/squid-cache/squid/commit/b3a4ba82b557dbacc409928bbdb732237f413da5,06 Oct 2011,"Polished SMP caching code, primarily to stay out of the way in non-SMP mode.

Do not start useless diskers. Do not assume Rock cache_dirs are present.
Do not require IpcIo DiskIO module to build Rock store.
Check IPC I/O pages limits in Rock store only when using a disker.
Warn about Rock cache_dir disk space waste.
Warn if shared memory cache is enabled in non-SMP mode.
Fake shared memory segments if needed (e.g., we are using Rock cache_dirs with
  no POSIX shared memory support) and possible (e.g., no SMP).",357,data/crawl/squid/patch_610.diff
https://github.com/squid-cache/squid/commit/32b28f499200e7636380cf067e08bd943a6753e3,06 Oct 2011,"Added max-swap-rate=swaps/sec option to Rock cache_dir.

The option limits the rate of Rock disk access to smooth out OS disk commit
activity and to avoid blocking Rock diskers (or even other processes) on I/O.
Should be used when swap demand exceeds disk performance limits but the
underlying file system does not slow down incoming I/Os until the situation
gets out of control.

Warn if Rock disker delays are significant.",216,data/crawl/squid/patch_611.diff

https://github.com/squid-cache/squid/commit/f5480a9e690773150236ab3f001d9a5c6d946b74,04 Oct 2011,"Add base class for registered runners that work with shared memory.

Shared memory runners do two main things:

* create shared memory segments
* open shared memory segments created earlier

Each runner has to decide whether it needs to create and/or open
shared memory segments.  Common runners share (some) logic in making
this decisions.  The purpose of this patch is to implement this logic
in a single place to allow easy reuse and avoid duplication.",44,data/crawl/squid/patch_612.diff
https://github.com/squid-cache/squid/commit/be9cb908306a7cf14033aafb63fcea168600eaab,04 Oct 2011,"Add ""fake"" shared memory segment implementation.

""Fake"" shared memory segments are enabled #if a system does not
support POSIX shared memory.  Such segments use regular new to
allocate memory, it is not shared among multiple processes.  The
purpose of the change is to allow code that uses Ipc::Mem::Segment to
run in non-SMP mode (that is when only a single process, except for
master, is running) on systems without POSIX shared memory support.

Note: running SHM-using features in SMP mode still requires POSIX
shared memory support, the patch does not change that.",128,data/crawl/squid/patch_613.diff
https://github.com/squid-cache/squid/commit/2a10f3c2653ce366cf10afc7d6eb277dee44f34a,03 Oct 2011,"Merged from parent (trunk r11763, v3.2.0.12+).",334,data/crawl/squid/patch_614.diff
https://github.com/squid-cache/squid/commit/4b4686c911f1917b70cf2d0d37f75a04296181ce,22 Sep 2011,"Bug 3351: FTP timeout causing ""store_status == STORE_PENDING"" assertion

If the entry was aborted while we were timing out, do not attempt to
write the timeout error message to it.

TODO: Other FTP code should call abortOnBadEntry() instead of testing for
ENTRY_ABORTED and calling abortTransaction().",3,data/crawl/squid/patch_615.diff
https://github.com/squid-cache/squid/commit/2be46d6709526a1c4454c0f5fa8716efe354b617,21 Sep 2011,"ext_session_acl: version 1.1

 * Add fixed period session support with -T

 * Fix synchronization between multiple helpers accessing the database

 * Fix crash when configured with non-concurrent settings.",80,data/crawl/squid/patch_616.diff
https://github.com/squid-cache/squid/commit/df881a0f9a049b3853ff8d6d0bbc67666cecd6c6,15 Sep 2011,"Added max-swap-rate=swaps/sec option to Rock cache_dir.

The option limits disk access to smooth out OS disk commit activity and to
avoid blocking Rock diskers (or even other processes) on I/O. Should be used
when swap demand exceeds disk performance limits but the underlying file
system does not slow down incoming I/Os until the situation gets out of
control.

TODO: Account for the I/O rate limit when estimating whether a future I/O
will complete in time (for swap-timeout).

TODO: Consider allowing the next swap in (i.e., read) through regardless of
the limit because, unlike writes, reads do not usually accumulate in OS
buffers.",215,data/crawl/squid/patch_617.diff
https://github.com/squid-cache/squid/commit/35a1b223314eddb67b631cb0224d6e03a2360c77,13 Sep 2011,"SMP Caching: Core changes, IPC primitives, Shared memory cache, and Rock Store

Core changes
------------

* Added MemObject::expectedReplySize() and used it instead of object_sz.

When deciding whether an object with a known content length can be
swapped out, do not wait until the object is completely received and its
size (mem_obj->object_sz) becomes known (while asking the store to
recheck in vain with every incoming chunk). Instead, use the known
content length, if any, to make the decision.

This optimizes the common case where the complete object is eventually
received and swapped out, preventing accumulating potentially large
objects in RAM while waiting for the end of the response. Should not
affect objects with unknown content length.

Side-effect1: probably fixes several cases of unknowingly using negative
(unknown) mem_obj->object_sz in calculations. I added a few assertions
to double check some of the remaining object_sz/objectLen() uses.

Side-effect2: When expectedReplySize() is stored on disk as StoreEntry
metadata, it may help to detect truncated entries when the writer
process dies before completing the swapout.


* Removed mem->swapout.memnode in favor of mem->swapout.queue_offset.

The code used swapout.memnode pointer to keep track of the last page
that was swapped out. The code was semi-buggy because it could reset the
pointer to NULL if no new data came in before the call to doPages().
Perhaps the code relied on the assumption that the caller will never
doPages if there is no new data, but I am not sure that assumption was
correct in all cases (it could be that I broke the calling code, of course).

Moreover, the page pointer was kept without any protection from page
disappearing during asynchronous swapout. There were ""Evil hack time""
comments discussing how the page might disappear.

Fortunately, we already have mem->swapout.queue_offset that can be fed
to getBlockContainingLocation to find the page that needs to be swapped
out. There is no need to keep the page pointer around. The
queue_offset-based math is the same so we are not adding any overheads
by using that offset (in fact, we are removing some minor computations).


* Added ""close how?"" parameter to storeClose() and friends.

The old code would follow the same path when closing swapout activity
for an aborted entry and when completing a perfectly healthy swapout. In
non-shared case, that could have been OK because the abort code would
then release the entry, removing any half-written entry from the index
and the disk (but I am not sure that release happened fast enough in
100% of cases).

When the index and disk storage is shared among workers, such
""temporary"" inconsistencies result in truncated responses being
delivered by other workers to the user because once the swapout activity
is closed, other workers can start using the entry.

By adding the ""close how?"" parameter to closing methods we allow the
core and SwapDir-specific code to handle aborted swapouts appropriately.

Since swapin code is ""read only"", we do not currently distinguish
between aborted and fully satisfied readers: The readerGone enum value
applies to both cases. If needed, the SwapDir reading code can make that
distinction by analyzing how much was actually swapped in.


* Moved ""can you store this entry?"" code to virtual SwapDir::canStore().

The old code had some of the tests in SwapDir-specific canStore()
methods and some in storeDirSelect*() methods. This resulted in
inconsistencies, code duplication, and extra calculation overheads.
Making this call virtual allows individual cache_dir types to do custom
access controls.

The same method is used for cache_dir load reporting (if it returns
true). Load management needs more work, but the current code is no worse
than the old one in this aspect, and further improvements are outside
this change scope.


* Minimized from-disk StoreEntry loading/unpacking code duplication.

Moved common (and often rather complex!) code from store modules into
storeRebuildLoadEntry, storeRebuildParseEntry, and storeRebuildKeepEntry.


* Do not set object_sz when the entry is aborted because the true object
size (HTTP reply headers + body) is not known in this case. Setting
object_sz may fool client-side code into believing that the object is
complete.

This addresses an old RBC's complaint.


* When swapout initiation fails, mark swapout decision as
MemObject::SwapOut::swImpossible. This prevents the caller code from trying to
swap out again and again because swap_status becomes SWAPOUT_NONE.

TODO: Consider add SWAPOUT_ERROR, STORE_ERROR, and similar states. It
may solve several problems where the code sees _NONE or _OK and thinks
everything is peachy when in fact there was an error.


* Call haveParsedReplyHeaders() before entry->replaceHttpReply().

HaveParsedReplyHeaders() sets the entry public key and various flags (at 
least). ReplaceHttpReply() packs reply headers, starting swapout process.
It feels natural to adjust the entry _before_ we pack/swap it, but I may be
missing some side-effects here.

The change was necessary because we started calling checkCachable() from
swapoutPossible(). If haveParsedReplyHeaders() is not called before we swap
out checks, the entry will still have the private key and will be declared
impossible to cache.


* Extracted the write-to-store step from StoreEntry::replaceHttpReply().

This allows the caller to set the reply for the entry and then update the
entry and the reply before writing them to store. For example, the server-side
haveParsedReplyHeaders() code needs to set the entry timestamps and make the
entry key public before the entry starts swapping out, but the same code also
needs access to entry->getReply() and such for timestampsSet() and similar
code to work correctly.

TODO: Calls to StoreEntry::replaceHttpReply() do not have to be modified
because replaceHttpReply() does write by default. However, it is likely that
callers other than ServerStateData::setFinalReply() should take advantage of
the new split interface because they call timestampsSet() and such after
replaceHttpReply().


* Moved SwapDir::cur_size and n_disk_objects to specific SwapDirs. Removed
updateSize().  Some cache_dirs maintain their own maps and size statistics,
making the one-size-fits-all SwapDir members inappropriate.

* A new SwapDir public method swappedOut() added. It is called from
storeSwapOutFileClosed() to notify SwapDir that an object was swapped
out.

* Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.

Change SwapDir::cur_size to bytes, make it private, use currentSize() instead.

Store Config.Store.avgObjectSize in bytes to avoid repeated and error-prone
KB<->bytes conversions.


* Change Config.cacheSwap.swapDirs and StoreEntry::store() type to SwapDir.

This allows using SwapDir API without dynamic_cast.


* Always call StoreEntry::abort() instead of setting ENTRY_ABORTED manually.

* Rely on entry->abort() side-effects if ENTRY_ABORTED was set.

* Added or updated comments to better document current code.

* Added operator << for dumping StoreEntry summary into the debugging
log. Needs more work to report more info (and not report yet-unknown info).

* Fixed blocking reads that were sometimes reading from random file offsets.

Core ""disk file"" reading code assumed that if the globally stored disk.offset
matches the desired offset, there is no reason to seek. This was probably done
to reduce seek overhead between consecutive reads. Unfortunately, the disk
writing code did not know about that optimization and left F->disk.offset
unchanged after writing.

This may have worked OK for UFS if it never writes to the file it reads from,
but it does not work for store modules that do both kinds of I/O at different
offsets of the same disk file.

Eventually, implement this optimization correctly or remove disk.offset.


IPC primitives
--------------

To make SMP disk and memory caching non-blocking and correct, worker and
disker processes must asynchronously communicate with each other. We are
adding a collection of classes that support such communication.

At the base of the collection is the AtomicWordT template that uses GCC atomic
primitives such as __sync_add_and_fetch() to perform atomic operations on
integral values in memory shared by multiple Squid kids. AtomicWordT is used
to implement non-blocking shared locks, queues, store tables, and page pools.

To avoid blocking or very long searches, many operations are ""optimistic"" in
nature. For example, it is possible that an atomic store map will refuse to
allocate an entry for two processes even though a blocking implementation
would have allowed one of the processes to get the map slot. We speculate that
such conflict resolution is better than blocking locks when it comes to
caching, especially if the conflicts are rare due to large number of cache
entries, fast operations, and relatively small number of kids.


TODO: Eventually, consider breaking locks left by dead kids.



Shared Memory Cache
-------------------

* Added initial shared memory cache implementation (MemStore).

The shared memory cache keeps its own compact index of cached entries using
extended Ipc::StoreMap class (MemStoreMap). The cache also strives to keep its
Root.get() results out of the store_table except during transit.

Eventually, the non-shared/local memory cache should also be implemented
using a MemStore-like class, I think. This will allow to clearly isolate
local from shared memory cache code.

Allow the user to explicitly disable shared memory caching in SMP mode via
memory_cache_shared to squid.conf. Report whether mem_cache is shared.

Disable shared memory caching by default if atomic operations are not
supported. Prohibit shared memory caching if atomic operations are not
supported.

TODO: Better limits/separation for cache and I/O shared memory pages.
Eventually, support shared memory caching of multi-page entries.


Rock Store
----------

Rock Store uses a single [large] database-style file per cache_dir to store
cached responses and metadata. This part of the design is similar to COSS.
Rock Store does not maintain or rely on swap.state ""log"" for recovery.
Instead, the database is scanned in the background to load entries when Squid
starts. Rock Store maintains its own index of cached entries and avoids global
store_table. All entries must be max-size or smaller.

In SMP mode, each Rock cache_dir is given a dedicated Kid processes called
""disker"". All SMP workers communicate with diskers to store misses and load
hits, using shared memory pages and atomic shared memory queues. Disker blocks
when doing disk I/O but workers do not. Any Diskers:Workers ratio is supported
so that the user can find and configure the optimal number of workers and
diskers for a given number of disks and CPU cores.

In non-SMP mode, should use good old blocking disk I/O, without any diskers,
but this has not been tested recently and probably needs more work.

Feature page: http://wiki.squid-cache.org/Features/RockStore

TODO: Disk rate limit to protect Squid from disk overload. More stats.
Multiple readers? Seek optimization? Remove known max-size requirement?",8765,data/crawl/squid/patch_618.diff
https://github.com/squid-cache/squid/commit/64110a00477f62d1da689be2a196965b518908af,12 Sep 2011,"Merged from parent (trunk r11728, v3.2.0.11+).",276,data/crawl/squid/patch_619.diff
https://github.com/squid-cache/squid/commit/43ebbac3285cd00b3f01ebd3b4c0d9867c98913f,10 Sep 2011,"Moved squid.conf global disk_io_timeout to cache_dir-local swap-timeout.

The I/O timeout option belongs to cache_dir because not all cache_dir types
support it and because different cache_dirs may need different timeout values,
especially if some of them handle very large or otherwise unusual files.

To propagate the knowledge of the option down to DiskIO/IpcIoFile I decided
to add a DiskFile::Config class and DiskFile::configure() method. At first
glance that API does not belong to DiskFile because only IpcIoFile supports
it. However, DiskFile may be a better location for it because

  * Other specific DiskIO files may want to support the same configuration
    API.

  * Placing API in IpcIoFile would require either making Rock Store dependent
    on IpcIoFile (in terms of linking and in terms of availability) or more
    complex API with multiple inheritance, dynamic casting and such. We can
    introduce the ""more complex API"" mentioned above later if needed.

Renamed ""disk_io"" to ""swap"" timeout because the option is about the whole swap
out/in delay (something an admin may care about) and not individual I/O
(something only low-level code should know about).",110,data/crawl/squid/patch_620.diff
https://github.com/squid-cache/squid/commit/8658767a73d77891ca79eb1a5b87fa4e7147a963,09 Sep 2011,Document STUB.h macros and usage,36,data/crawl/squid/patch_621.diff
https://github.com/squid-cache/squid/commit/72e4bea18f6be9e61f6bcbc7a64d0ed2901274a8,07 Sep 2011,"%I shows hostname on SSL error page

The %I must print the server ip address, but currently displays the host name of
the server on squid error pages. This patch fixes %I to print the server ip 
address in the server or ""[unknown]"" otherwise.

This is a Measurement Factory project",4,data/crawl/squid/patch_622.diff
https://github.com/squid-cache/squid/commit/51618c6abd19131aabcd04399765e5563e2fee15,06 Sep 2011,"Polished debugging messages to use DBG_IMPORTANT, WARNING, etc.",39,data/crawl/squid/patch_623.diff
https://github.com/squid-cache/squid/commit/c32c6db7e28a12379ccb01aa07261d233137ac47,06 Sep 2011,"Support maximum field width for string access.log fields.

Some standard command-line and some log processing tools have trouble
handling URLs or other logged fields exceeding 8KB in length. Moreover,
Squid violates its own log line format and truncates the entire log line
if, for example, the URL is 8KB long. By supporting .precision format
argument, we allow the administrator to specify logged URL size and
avoid these problems.

Limiting logged field width has no effect on traffic on the wire, with
the exception of log records if they are sent over the network, of course.

TODO: The name comes from the printf(3) ""precision"" format part. It may
be a good idea to rename our ""precision"" into max_width or similar,
especially if we do not support floating point precision logging.

TODO: Old code used chars to store user-configured field width and
precision. That does not work for URLs, headers, and other entries
longer than 256 characters. This patch changes the storage type to int.
The code should probably be polished further to remove unsigned->signed
conversions.",25,data/crawl/squid/patch_624.diff
https://github.com/squid-cache/squid/commit/a8d8f7510feda5b32a6a2e9cd3496b9426287aff,06 Sep 2011,Removed an accidently added file.,834,data/crawl/squid/patch_625.diff
https://github.com/squid-cache/squid/commit/899249853a35bcad559ce23daa292a2c7a48c7a4,30 Aug 2011,"Merged from parent (trunk r11691, v3.2.0.11+).",799,data/crawl/squid/patch_626.diff
https://github.com/squid-cache/squid/commit/c975f53276eb34b4ea0e9db626d98bbd605531d5,28 Aug 2011,"Disable Rock store and shared memory cache if shared memory is not available.

The patch adds support for building on systems without POSIX shared
memory (e.g. OpenBSD).  IpcIo DiskIO module and Rock store is not
enabled by default if shared memory support is not available.  If IpcIo
or Rock store is explicitly enabled, but no shared memory support is
available, fail with error during configure.  Fail with error at
runtime if shared memory cache is enabled but no shared memory support
is detected.",87,data/crawl/squid/patch_627.diff
https://github.com/squid-cache/squid/commit/aa99e35edd3d7c0ebaa09a3a1a257ba5a405a970,25 Aug 2011,"Bug 3310: regression: %<pt translates as %<p

Separate the format tags into sub-groups for size-oriented checks.

Taking the opportunity, separate the section along the namespace borders.",146,data/crawl/squid/patch_628.diff
https://github.com/squid-cache/squid/commit/12faac4b0d857bb5a6020f5a431793cd84c19d3f,25 Aug 2011,"Merged from parent (trunk r11672, v3.2.0.10+).",1992,data/crawl/squid/patch_629.diff
https://github.com/squid-cache/squid/commit/738d369fef9c690f2042b6dd20949dbd025844ba,23 Aug 2011,"negotiate_wrapper_auth: fix warnings on MacOSX by simplification

 * fold several if statements down to avoid compiler warnings
   about potential use-before-set of 'length'.

 * remove static err variable as unused once its cases are
   folded down to one if statement.",11,data/crawl/squid/patch_630.diff
https://github.com/squid-cache/squid/commit/d8b258a9511014ad813b9f70440b952bee50d48b,12 Aug 2011,Fix compile errors detected by clang++,28,data/crawl/squid/patch_631.diff
https://github.com/squid-cache/squid/commit/7ff7a211c25688d2d6742acc7bc271f700c9dbe9,08 Aug 2011,Migrate cf_gen.cc from C-style stdio to C++ iostreams.,300,data/crawl/squid/patch_632.diff
https://github.com/squid-cache/squid/commit/38e16f927fb0ac854e8a6bfec90f49af5ef1f6eb,04 Aug 2011,"SourceLayout: format namespace for custom tag-based formats

Part 1 of enabling non-logging components to support custom formats in strings

Shuffle the log custom format code into its own library separate from the
logging functionality.

One minor logic change removing redundant LogFileEnabled flag.

TODO:
 - use MemBuf instead or as well as StoreEntry as the output buffer
 - separate from AccessLogEntry confusion
 - upgrade deny_info URL generation format
 - upgrade external_acl_type format
 - add custom helper formats",3483,data/crawl/squid/patch_633.diff
https://github.com/squid-cache/squid/commit/96f6f33b443412f7e8075d18c800ee7b560d5134,03 Aug 2011,SourceFormat Enforcement,46,data/crawl/squid/patch_634.diff
https://github.com/squid-cache/squid/commit/de03b59646490546d76c65df0c5ca48a5c5cdaa6,02 Aug 2011,"Add support for using custom keys in CARP parents

Add a new carp-key option to CARP parents, specifying what parts of an URL
to use in the parent selection algorithm.",94,data/crawl/squid/patch_635.diff
https://github.com/squid-cache/squid/commit/fe0a0419ef9d7034005134abdcbec3fa567608be,30 Jul 2011,"SourceLayout: Basic auth: shuffle helper request functions

helper lookup functions are AuthBasicUserRequest members. Should be in
that classes .cc file.

Also merge submit and queue functions. no need to be separate.",205,data/crawl/squid/patch_636.diff
https://github.com/squid-cache/squid/commit/c9fd01b4b829bc16d2691a84cdc103ac5dd15333,29 Jul 2011,"SourceLayout: generic AnyP::ProtocolVersion tag class

Protocol agnostic class to store the request-line version details.
HTTP/1.0, HTTP/1.1, ICY/1.0, WebSockets/1.0 etc

For patch reduction leaves HttpVersion as a child class for HTTP/*.* tags",169,data/crawl/squid/patch_637.diff
https://github.com/squid-cache/squid/commit/d83197e365de79617ae95a38d12421816f1c513a,25 Jul 2011,"correct printf formatting. purge debugFlag is an unsigned int, not a short",2,data/crawl/squid/patch_638.diff
https://github.com/squid-cache/squid/commit/63f03f790981f8411a7a5ffd6c91ff3c5f988ea8,20 Jul 2011,Bug 3248: login=NEGOTIATE sends wrong auth header to origin peers,10,data/crawl/squid/patch_639.diff
https://github.com/squid-cache/squid/commit/af5ebaf4fd73cde584ed5455acf576789799c492,15 Jul 2011,"Use forward-proxy port for internal URLs.

Alter the getMyPort() function to skip ports flagged for special mode
handling (intercept, tproxy, accel) when generating internal URLs.

This allows us to lock down security on these special mode ports and
still have an optional position for the forward-proxy port. Prior to
this only the first port was used, forcing an unnecessary configuration
order.

Since it is now possible to have no port available for these URLs the
fatal()/crash has been reduced to an annoying cache.log message. Port 0
will be inserted into the URLs making them invalid.

For now this is only done on http_port entries. https_port has an
incomplete merge of https_port_list/http_port_list which needs to be
completed before it is easily done there.",17,data/crawl/squid/patch_640.diff
https://github.com/squid-cache/squid/commit/e24f13cdd75215b6b297ef81b44b93daf94b5f20,30 Jun 2011,"Remove the HttpStateData::orig_request member

When FwdServer::_peer is set, HttpStateData constructor creates a new special
HttpRequest, overwriting the request pointer set in the parent (ServerStateData) 
constructor to fwd->request.

This special HttpRequest sets the proper urlpath (which maybe different from
the original HttpRequest), the host (HttpRequest::SetHost/GetHost) to be the
peer hostname and inherits flags, protocol, method. Also sets the
HttpRequest::flags.proxying.

Probably this is originaly done to handle only the differences in urlpath and
the host. But this is has  as result to have two HttpRequests object in
HttpStateData, but their difference is not clear.

This patch removes the HttpStateData::orig_request member and uses only the 
HttpStateData::request member

Bugs fixed with this patch:

- Debugs() and error pages sometimes display the cache_peer hostname as the URL   requested domain name when going to an origin. Regardless of what the virtual
  host name actually is.

- The request_header_access configuration parameter does not work when
  sending requests to parent proxies.

- Squid may cache replies to requests with no-store in headers when uses a
  parent cache.

- parent caches which have been configured as ""sibling"" for specific domains
  using the neighbor_type_domain parameter are not counted.

- Probably many other


This is a Measurement Factory project",271,data/crawl/squid/patch_641.diff
https://github.com/squid-cache/squid/commit/a171b5f02981cbd19fde655a2ed8620f70de0fff,23 Jun 2011,"Removed pointless call to maybeReadVirginBody() for aborted entries.
No runtime changes expected.

Setting flags.do_next_read to zero and then calling maybeReadVirginBody() is
pointless because maybeReadVirginBody() does nothing but wasting cycles when
the flag is zero. Also, even if we do manage to read the virgin response body
somehow, we cannot write it to the aborted store entry anyway.",2,data/crawl/squid/patch_642.diff
https://github.com/squid-cache/squid/commit/7d553ad9091a61a0e6b6c6c13348f7132ff45d43,22 Jun 2011,Fix BSD build issues,36,data/crawl/squid/patch_643.diff
https://github.com/squid-cache/squid/commit/d5d5493b580fb565ede89e4f5b9ef727403b7e40,21 Jun 2011,"Fix make check and make distcheck.

Mostly makefile changes.  New stub code added and some unneeded
stub code removed.  Fixed for UFS and COSS tests related to
object destruction order.",411,data/crawl/squid/patch_644.diff
https://github.com/squid-cache/squid/commit/f38142df99faa496b798865f491196de25e07583,17 Jun 2011,"1st try to fix ""make check"" linking errors after ""Configurable SSL error details messages"" patch

The make check fails on 3.HEAD-amd64-CentOS-5.3 platform",26,data/crawl/squid/patch_645.diff
https://github.com/squid-cache/squid/commit/1c8f25bbb056368c4405473ff7304156608e92cc,17 Jun 2011,"Upgrade comm layer Connection handling

The premise underlying this large patch is that instead of copying and
re-copying and re-lookups for the FD related data we can take the
ConnectionDetail class which is generated to store a few bits of IP
information about newly accept()'d connections and make it persist across
the whole of Squid.

It has been renamed from ConnectionDetails to Comm::Connection and has
absorbed a few FD data fields from other classes long the code paths.
Its scope is to hold an FD (or potential FD) plus meta data.

Comm::Connection are valid before, during and after the period when their
particular FD is open. The meta data may be used beforehand to setup the
FD (in the case of peer selection or other TcpAcceptor usage), and it may
remain in use after FD closure until logging or all linked job and call
objects have detected the closure and terminated. A global function
Comm::IsConnOpen() may be used on the pointer objects to detect whether
they point at an active connection.

Most of the patch is simple parameter changes to functions and methods to
pass a ""cont Comm::ConnectionPointer &"" instead of an ""int FD"". Along with
class FD fields being converted to these object pointers.


In order to support this alteration there have been behavioral changes to:

The socket accept() Job
  Comm::TcpAcceptor altered to spawn Comm::Connection objects and to
  operate with one controlling their active/closed state.

FTP data channel handling Calls.
  efficiency improvements making use of Comm::Connection as a feedback
  channel between TcpAcceptor and FtpStateData to cancel the listening
  Job. Most of the underlying logic change is already in trunk to use
  the Subscription API. This just streamlines and fixes some race bugs.

Peer selection
  updated to spawn a set of Comm::Connection objects. To do this it is
  updated to determine *all* peers including DIRECT ones. Doing the DNS
  lookup instead of leaving it to comm_connect() on the other side of
  FwdState. It also absorbs the outgoing address selection from FwdState
  and can now specify details of local+remote ends of an outgoing TCP link.

Forwarding
  updated to handle the new outputs from peer selection and to open sequentially.

pconn handling
  updated to use destination IP/port and hold a Comm::Connection instead
  of domain name indexing an FD. This allows us to maintain idle pools
  and re-use FD more efficiently with virtual-hosted servers. Along
  with maintaining certainty that the pconn selected actually goes to
  the exact destination IP:port needed by forwarding.

comm layer outgoing connections
  now have a control job Comm::ConnOpener to do this. Due to the peer
  selection and forwarding changes this is a much simpler operation.

HTTP / CONNECT tunnel / gopher / whois / FTP
  updated to receive a server and client Comm::Connection object from
  forwarding. To operate on those until they close or are finished with.

SNMP / ICP / HTCP / DNS port listeners
  updated to work with Comm::Connection holding their listening socket
  meta data. This is a side-effect of the ICP and Comm read/write/timeout
  changes.",8518,data/crawl/squid/patch_646.diff
https://github.com/squid-cache/squid/commit/02259ff8a34ba3740c13c4e38e81af79d6ea849b,17 Jun 2011,"Configurable SSL error details messages

This project adds support for a translatable and customisable error detail file
(errors/templates/error_details.txt). The file is stored like we store error
page templates today. Inside the file, an HTTP-like format used that can be
later extended to other error details (and beyond):

name: value
details: ""value""
descr: ""value""

or

name: value
details: ""multi
     line
     value""
descr: ""value with a \""quoted string\"" inside""

The code supports future translations, just like Squid already support error
page translations.

This is a Measurement Factory project
----

Some Technical details:
 - The errorpage code which is related to loading and parsing error templates
   moved to TemplateFile class. This class is used as base class for
   ErrorPageFile class which used to load error page templates.
 - The HttpHeader parser used to parse error details
 - The  error details for various languages cached to memory
 - The ErrorDetailsList  used to store a list of error details for a
   language/locale
 - The ErrorDetailsManager is a class used to load and manage multiple error
   details list (ErrorDetailsList objects) for many languages. It also
   implements a simple cache.",1350,data/crawl/squid/patch_647.diff
https://github.com/squid-cache/squid/commit/9815f129cf106b6bf21887a756bbeaf5d38e8b45,17 Jun 2011,Merged from trunk,902,data/crawl/squid/patch_648.diff
https://github.com/squid-cache/squid/commit/1733bbba72f915941d250a7a02abe668f71dc8ec,13 Jun 2011,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <christos@chtsanti.net>
Bug 3153 fix: Prevent ICAP RESPMOD transactions getting stuck with the adapted body.

Part 1.

Server is expected to receive adapted response headers and then consume the
adapted response body, if any. If the server receives the headers and then
aborts, it must notify the ICAP side that nobody will consume the body. 
Otherwise, the ICAP transaction will fill the BodyPipe buffer and get stuck 
waiting for the consumer to free some space.

Part 2:

This fix still leaves one potential race condition unhandled: The ICAP
Initiatee disappears right after sending the adapted headers to the Server
(because there is nothing else for that initiatee to do). After the
noteAdaptationAnswer() call is scheduled by ICAP and before it is received by
the Server job, there is no usable link between Server and ICAP.  There is no
way for the Server to notify the ICAP transaction that the Server job is
aborting during that time (and there is no Server job at all after it aborts,
naturally).

The solutions is to develop a custom AsyncCall which will call the
expectNoConsumption() on the message pipe if the call cannot be dialed (i.e.,
the message cannot be delivered to Server).",39,data/crawl/squid/patch_649.diff
https://github.com/squid-cache/squid/commit/983983ce5ef0d6785a1f6a65b1685e07ea68a9af,04 Jun 2011,Sync with trunk,6637,data/crawl/squid/patch_650.diff
https://github.com/squid-cache/squid/commit/306bfbb2d6ad357bd0540adc4ca8c8f0eb07a418,02 Jun 2011,"Optimization: revert WCCP setup to using sockaddr_in

Replaces a some malloc/free with local stack variables and a memset",21,data/crawl/squid/patch_651.diff
https://github.com/squid-cache/squid/commit/74f478f8336c29280c574a60b332bc5ca6299f9f,29 May 2011,"Parser: shuffle request-line offsets into a sub-struct

Preparation for parsing other segments such as mime headers and reply
status-line we need the segments data offsets to be kept separate.",1198,data/crawl/squid/patch_652.diff
https://github.com/squid-cache/squid/commit/4c14658ec381949d64870f812a7c990ba73892e8,27 May 2011,"SourceLayout: separate HttpParser from HttpMsg and HttpRequest files

Paving the way for the parser to be used on replies or outside of HttpRequest.

There are no logic changes in this.

Also adds a stub file for event.cc",2634,data/crawl/squid/patch_653.diff
https://github.com/squid-cache/squid/commit/3876fdac3ca81a03b7e3665661a72270d98b1014,27 May 2011,SourceFormat Enforcement,4,data/crawl/squid/patch_654.diff
https://github.com/squid-cache/squid/commit/6152c8d8fe0dd2e874e4141ef751ad65dc7bf1c3,26 May 2011,Portability fix for OpenBSD in time quota external acl helper.,3,data/crawl/squid/patch_655.diff
https://github.com/squid-cache/squid/commit/65b81b2712ba00ea3b47ecd0d4b730a63681550f,25 May 2011,"Detect support for __sync_add_and_fetch() and friends,
setting HAVE_ATOMIC_OPS accordingly.

Disable shared memory caching by default if atomic operations are not
supported. Prohibit shared memory caching if atomic operations are not
supported.

Needs more testing.",77,data/crawl/squid/patch_656.diff
https://github.com/squid-cache/squid/commit/e4a8468d7c0a09e6c8284111c82a7940d3477754,13 May 2011,"Separate SSL error detail name and message

Currently, SSL error detail in Squid-generated error pages (%D) contains
both the error name and the explanation text. Some folks using this feature
want to render the two pieces of information differently because the error
name is not something most end-users should read or focus on.

This patch adds the ""%x"" error page formating code which prints the error name,
and removes the error name (%err_name) from SSL error detail messages.

This is a Measurement Factory project",77,data/crawl/squid/patch_657.diff
https://github.com/squid-cache/squid/commit/2dba5b8e71663816703bf9297e1184ab6bea3990,13 May 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Author: Alexey Veselovsky <alexey.veselovsky@eykontech.com>
Author: Christos Tsantilas <chtsanti@users.sourceforge.net>
Bug 2055: Honor ICAP Max-Connections

This patch implements the phase 1 of the ICAP Max-Connections feature as it is
described in squid wiki:
  http://wiki.squid-cache.org/Features/ServiceOverload

The behaviour of the patch  can be configured using on_overload and max_conn
options of the icap_service configuration parameter. Squid can be configured
to do one of the following:
  - Block: send and HTTP error response to the subscriber
  - Bypass: ignore the ""over-connected"" ICAP service
  - Wait: wait (in a FIFO queue) for an ICAP connection slot
  - Force: proceed, ignoring the Max-Connections limit 

Squid warns the first time the service become overloaded

For more information please visit the feature wiki page given above.


Technical informations:

The patch starts count a connections to the ICAP server as active when the
ModXact class receives an FD even if the fd is not really connected to the
server yet, and decrease the active connections to the server when the ModXact
object releases its fd connection.

If the Max-Connection limit is reached squid puts the request to a waiters list.
When one or more connections released squid schedules one or more waiters for
execution and remove them from waiters list.
To handle cases where a waiter gone/canceled before its execution the custom
dialer ConnWaiterDialer used.

The Options connections counted as active connections but are not limited by
the Max-Connections limit. An Option request will be executed even if the
maximum connections number is reached.


This is a Measurement Factory project",543,data/crawl/squid/patch_658.diff
https://github.com/squid-cache/squid/commit/9938b57f9793f45dab38ee1ba6332618bf8c2052,09 May 2011,"Add ext_time_quota_acl helper

Allows an administrator to define time budgets for the users of squid
to limit the time using squid.

This is useful for corporate lunch time allocations, wifi portal
pay-per-minute installations or for parental control of children. The
administrator can define a time budget (e.g. 1 hour per day) which is
enforced through this helper.",762,data/crawl/squid/patch_659.diff
https://github.com/squid-cache/squid/commit/7afc3bf21fb00bef3e0cdc93145bcb4d2bf5a29f,08 May 2011,"Cleanup: sync NTLM and Negotiate UserRequest code

Minor tweaks to reduce diff between the files. No logic changes.

Renames the addHeader() to addAuthentiocationInfoHeader(),
Renames the addTrailer() to addAuthentiocationInfoTrailer() and
document that they add additional *-Info header to the HTTP reply.",315,data/crawl/squid/patch_660.diff
https://github.com/squid-cache/squid/commit/7c8931a1f908c09a8ab797e7354e8d57718d766d,04 May 2011,"Compile fixes for binutils-gold and gcc-4.6 support

These two tools are much stricter about dependency linkages. We have already
had to drop testAuth due to major dependency loops they dislike.
This makes the remainder of the dependency changes needed.

Also adds:
 - tests/STUB.h with macros for simpler stub file creation
 - stub_libmgr.cc for unit-test stub replacment of mgr/libmgr.la library.
   many API functions commented out, but sufficient for the current needs.",479,data/crawl/squid/patch_661.diff
https://github.com/squid-cache/squid/commit/23ad9b9e2b5269f53fb3ec9aa59e73cbd8f924f2,03 May 2011,SourceFormat Enforcement,58,data/crawl/squid/patch_662.diff
https://github.com/squid-cache/squid/commit/cc34568dd6d1a7fa78a4db8927f9d21437d84bbb,27 Apr 2011,"Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.",153,data/crawl/squid/patch_663.diff
https://github.com/squid-cache/squid/commit/da9d3191b043c07215fbb771c69acc4a835d7b96,27 Apr 2011,"Remove updateSize() from Store and make it protected in SwapDir.

A new SwapDir public method swappedOut() added. It is called from
storeSwapOutFileClosed() to notify SwapDir that an object was swapped
out.",77,data/crawl/squid/patch_664.diff
https://github.com/squid-cache/squid/commit/8765bc8cba81d5776992f8b243447e01860d8892,27 Apr 2011,"Change SwapDir::cur_size to bytes, make it private, use currentSize() instead.",40,data/crawl/squid/patch_665.diff
https://github.com/squid-cache/squid/commit/57f583f131ec99afa44e7a72df51538d03f970a7,27 Apr 2011,Make Store::currentSize() return size in bytes.,42,data/crawl/squid/patch_666.diff
https://github.com/squid-cache/squid/commit/88d1e459293cf476300bba80d1fe6da05c862647,20 Apr 2011,"Add errpages option %b for proxy listening port

Use getMyPort() to insert the forward-proxy listening port into error
pages and deny_info redirect URLs. This fixes the current port
hard-coding assumption in ERR_AGENT_CONFIGURE.

The %b option is added for this purpose as a temporary measure until the
codes are merged with the more flexible log formatting set.

This currently depends on squid.conf having a particular http_port
ordering with the forward-proxy port listed first.",11,data/crawl/squid/patch_667.diff
https://github.com/squid-cache/squid/commit/bc9b2391964dc68213923191ec5d33b69c7bde32,19 Apr 2011,Fixed compiler warnings about wrong printf() format for currentSize().,2,data/crawl/squid/patch_668.diff
https://github.com/squid-cache/squid/commit/0d01417890a5b458c14c58e1c967e04c7facb8a9,19 Apr 2011,"Merged from parent (trunk r11387, v3.2.0.7+).",814,data/crawl/squid/patch_669.diff
https://github.com/squid-cache/squid/commit/3a2e025344bbe7244960ee5878be960b113c95a9,19 Apr 2011,negotiate_wrapper_auth: fix strict compiler warnings,25,data/crawl/squid/patch_670.diff
https://github.com/squid-cache/squid/commit/fa61cefe6486fe4f7ff291af66f2d182fcebf88a,19 Apr 2011,"Optimized the number of ""queue is no longer empty"" IpcIo notifications.

The original code relied on the writer (pusher) knowledge to decide when a
notification is needed. That code was simpler but it resulted in many
pointless notifications because the reader could have been busy processing the
last popped item and would have checked the queue after that processing
anyway. This would become especially wasteful when the reader pops multiple
requests before processing them (e.g. to do ""elevator"" seek optimization).

The intermediate implementation (not comitted) placed the reader state in
each queue. That was still fairly simple and worked OK, but it was not
addressing the needs of the disker readers. Diskers have many incoming
queues. If at least one incoming queue has requests, the disker is not
blocked and does not need a notification.

The last implementation allows all incoming queues of a single disker to share
the reader/disker state. The reader state is disassociated from the single
queue.  There is still some wasteful state updates when multiple queues are
iterated in FewToOneBiQueue::pop(), but their overheads should be very minor.
We need to figure out whether a single shared reader state can also be used
for workers though (each worker also has many incoming queues...).

Also added debugging and a few XXXs/TODOs to mark future work items.",357,data/crawl/squid/patch_671.diff
https://github.com/squid-cache/squid/commit/39c1e1d9d66a7a610e2afa2775698d5541f3d16e,18 Apr 2011,"Improve statistic reporting for shared Rock caches.

Rock cache is shared between multiple processes.  We need to make sure
cache related stats are not counted twice by different processes.  The
patch makes Rock store statistics to be reported by the disker process
only.

Some global variables for cache related stats are replaced with Store
class methods.  This is needed because it may be difficult or
impossible to correctly update these variables for shared caches.

The patch also fixes cache manager output for some requests like
mgr:storedir: Before the change stats from disker processes were not
surrounded with ""by kidN"".",204,data/crawl/squid/patch_672.diff
https://github.com/squid-cache/squid/commit/a86a4d3c4e116d50890aa7f8fad12a44db2ea162,16 Apr 2011,negotiate_wrapper_auth: various portability fixes,14,data/crawl/squid/patch_673.diff
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/patch_674.diff
https://github.com/squid-cache/squid/commit/e08b0f778791043501c04a4a0a4b1dd5c97f8bc6,14 Apr 2011,"Use off_t instead of int and size_t for segment sizes
to be able to allocated larger than 4GB segments on some platforms.

Double check the newly created segment size using fstat().",54,data/crawl/squid/patch_675.diff
https://github.com/squid-cache/squid/commit/1a98557c0fff49ee34f09d4ba559968d338d3e90,14 Apr 2011,"Merged from parent (trunk r11379, v3.2.0.6+).",20344,data/crawl/squid/patch_676.diff
https://github.com/squid-cache/squid/commit/c4e688b7b851b9accc082a210fd0efb131cc696f,12 Apr 2011,Added basic stats reporting.,23,data/crawl/squid/patch_677.diff
https://github.com/squid-cache/squid/commit/9487bae9c1514d66499a7015e44648dd9f231d73,12 Apr 2011,"Added initial shared memory cache implementation (MemStore) and integrated it.

Like Rock Store, shared memory cache keeps its own compact index of cached
entries using extended Ipc::StoreMap class (MemStoreMap). Like Rock Store, the
cache also struggles to keep its Root.get() results out of the store_table
except during transit.

There are several XXXs and TODOs that still need to be addressed for a more
polished implementation.

Eventually, the non-shared/local memory cache should also be implemented
using a MemStore-like class, I think. This will allow to clearly isolate
local from shared memory cache code.",624,data/crawl/squid/patch_678.diff
https://github.com/squid-cache/squid/commit/d87154ee577dd41876875ac8ec5273a2e3def960,11 Apr 2011,"SourceLayout: namespace for Auth::User

No logic changes.",356,data/crawl/squid/patch_679.diff
https://github.com/squid-cache/squid/commit/44c95fcf593ff4c2e27107d0f6d4091840737032,09 Apr 2011,"Split Rock-only Rock::DirMap into Rock::DirMap and reusable Ipc pieces
which a shared memory cache implementation can use:

Ipc::StoreMap is responsible for maintaining a collection of lockable slots,
each with readable/writeable/free state and a ""waiting to be free"" flag. Kids
of this class can add more metadata (in parallel structures using the same
index as primary slots). I tried extending the slots themselves, but that 
turned out to be more complex/messy.

Ipc::ReadWriteLock is a basic multiple readers, single writer lock.  Its
earlier implementation inside Rock::DirMap mixed slot locking and slot
state/flags. That simplified the caller code a little, but the current simpler
class is easier to understand and reuse.

Rock::DirMap now just adds Rock::DbCellHeader metadata to Ipc::StoreMap slots.

Simplified mapping API by reducing the number of similar-but-different
methods. For example, instead of putAt, the caller can use an
openForWriting/closeForWriting pair. This helps with moving custom metadata
manipulations outside of the reusable Ipc::StoreMap.

It would be possible to split Ipc::StoreMap further by moving Store-specific
bits outside of its slots. Currently, there is no need for that though.",1188,data/crawl/squid/patch_680.diff
https://github.com/squid-cache/squid/commit/a32a190bb7dbce4b7ae2756609662557e87f8853,05 Apr 2011,"Display ERROR in cache.log for invalid configured paths

The validator that checks system paths for files and directories in the
configuration file sends error messages to stderr. It should send them to
cache.log for the admin to see easily.

Also, this makes the error display as FATAL ERROR when using -k parse to
indicate that it is fatal to the startup. Other management signals where
it is not necessarily fatal will only display as an ERROR.",7,data/crawl/squid/patch_681.diff
https://github.com/squid-cache/squid/commit/d8a82533a7ef59f757d60645c04dfdb4eb5553d1,31 Mar 2011,"Moved ipc/SharedMemory to ipc/mem/ and renamed it to Ipc::Mem::Segment.

All IPC things are ""shared"" by default. 

The new name is also more specific because there are other shared memory
structures such as queues and stacks (all using shared memory segments
internally though).",82,data/crawl/squid/patch_682.diff
https://github.com/squid-cache/squid/commit/8030a2a099a7a50dc05fab1190682741feb02ac6,25 Mar 2011,"Fix stdio: log module segfaults on rotate

The stdio module was still assuming old format for the parameter.

 * update the parser to detect old format and upgrade-warn.       
 * update the stdio module to ignore the stdio: prefix on its parameter",28,data/crawl/squid/patch_683.diff
https://github.com/squid-cache/squid/commit/5cde6e7f53eb77db6d868ff88bbb6f9e5d622323,25 Mar 2011,basic_ldap_auth: error message for missing credentials,10,data/crawl/squid/patch_684.diff
https://github.com/squid-cache/squid/commit/fd0f51c4480a19a03d30d0f3fcecd69f5257c293,15 Mar 2011,"Convert dns_timeout and dns_retransmit_interval configuration options to use millisecond resolution.

One second resolution is too coarse for small timeouts in delay-sensitive
environments, especially when a retransmit, bypass, or another corrective
action is available and is likely to produce a positive outcome. In DNS world
specifically, most timeouts are measured in milliseconds.

This is a Measurement Factory project",89,data/crawl/squid/patch_685.diff
https://github.com/squid-cache/squid/commit/f602c423b782d0c1b4233e70a01b337dcbb824a9,14 Mar 2011,ext_kerberos_ldap_group_acl version 1.3.0sq,337,data/crawl/squid/patch_686.diff
https://github.com/squid-cache/squid/commit/ec4d1a1d75e6b319bf612aa577215917719a0a6c,10 Mar 2011,SourceFormat Enforcement,40,data/crawl/squid/patch_687.diff
https://github.com/squid-cache/squid/commit/ffce5f58438c9a15c0351c7b038fd300228cbcb2,09 Mar 2011,"Support libecap v0.2.0; fixed eCAP body handling and logging.

Summary of changes:

libecap v0.2.0 support: accept/update/log eCAP transaction meta-info.
libecap v0.2.0 support: supply client IP and username to eCAP adapter.
libecap v0.1.0 support: Support blockVirgin() API with ERR_ACCESS_DENIED.

Use pkg-config's PKG_CHECK_MODULES to check for and link with libecap.

Support adapter-specific parameters as a part of ecap_service configuration.
Allow uri=value parameter when specifying adaptation service URIs.

Fixed virgin body handling in our eCAP transaction wrapper (Ecap::XactionRep).
Fixed BodyPipe.cc:144 ""!theConsumer"" assertion.

Log ""important"" messages from eCAP adapters with DBG_IMPORTANT not DBG_DATA!

Added XXXs to identify old unrelated problems to be fixed separately.",1302,data/crawl/squid/patch_688.diff
https://github.com/squid-cache/squid/commit/555aedbf87248fc570f3a645124bcb0150bddb03,09 Mar 2011,"Merged from parent (trunk 11270, circa 3.2.0.5+)",1358,data/crawl/squid/patch_689.diff
https://github.com/squid-cache/squid/commit/80f629d79e830cd60da2efa2d7c7edd93e3fbaa4,02 Mar 2011,"Add support for parameterized Cache Manager queries.

Currently, one sends mgr queries to the ""whole"" Squid. Kids responses may get
aggregated by Coordinator, and we, in general, want to aggregate all responses
that can be aggregated.

This patch allow us to aggregate stats for a subset of kids. For example,
the following query aggregates stats for just the first and the third workers:

    mgr:info?workers=1,3

When query response information cannot be aggregated (or at least is not
aggregated right now), then a parameterized query will result in several
matching ""byKid { ..."" blocks.

This patch support the following scope variants:

    * raw interface with access to any kid process or groups of kids; similar
      to ${process_number} macro we already support in squid.conf:
          mgr:foo?processes=id,id,id...
    * higher-level interface to isolate workers by their numbers, starting
      with 1 for the first worker:
          mgr:foo?workers=num,num,num...

Currently, all kids except Coordinator are workers, but that will change in 
the future as we get more kinds of kids.Currently, one sends mgr queries 
to the ""whole"" Squid. Kids responses may get aggregated by Coordinator, 
and we, in general, want to aggregate all responses that can be aggregated.

This is a Measurement Factory project",512,data/crawl/squid/patch_690.diff
https://github.com/squid-cache/squid/commit/995eb827aaa64d9bcd4110b756e04051ef9d03e9,02 Mar 2011,merge from trunk,12916,data/crawl/squid/patch_691.diff
https://github.com/squid-cache/squid/commit/ed23106148e17198c6c7029e1feec1f3e6ab682d,18 Feb 2011,"Merged from parent (trunk r11240, circa 3.2.0.5+)",22585,data/crawl/squid/patch_692.diff
https://github.com/squid-cache/squid/commit/0eb2165af1e3ba2c6c0f9ae624ac0a61093fa012,16 Feb 2011,Merge 3p2-rock.,817,data/crawl/squid/patch_693.diff
https://github.com/squid-cache/squid/commit/431aae42efb204149e3ba82e8b314e1756292b01,15 Feb 2011,"Bug 3105: malformed Proxy-Authorization leaks memory

This simplifies the header parser for basic auth. Working towards a more
generalized model of AuthUser children. Removing two memory allocations, two
leaks and several unnecessary functions.",228,data/crawl/squid/patch_694.diff
https://github.com/squid-cache/squid/commit/c728b6f9fff43c9e8a2c4af5bf4916dcb4c36fa9,15 Feb 2011,"* Removed old Rock Store hack to update swap_file_sz before it is packed into
store entry disk ""header"". Prepend our own disk to each db cell. Eventually,
the same header may be used to store ""next page"" or other info.

Modern Squid code should not use packed swap_file_sz or object_sz because
neither can be unknown at the packing time.  The storage code should either
record its own size information (Rock Store does that now) or rely on
3rd-party metadata (UFS uses fstat(2) system call).


* Do not promise to read a being-written entry. Use peekAtReader() to check
that we can read the presumably locked (by us) entry.

It is probably possible to queue a reader somehow and wait for the entry to
become readable or even to read initial pages as we write (when we start doing
incremental writing) but it would be rather complex and expensive to
synchronize such shared read/write access across workers.


* Fixed ::StoreIOState::offset_ Rock maintenance. The old code probably
misinterpret offset_ meaning and kept the disk offset there. It should have
been just the distance from the beginning of the db cell (not db file)
instead. It probably worked because we write everything at once and the
offset_ values were usually big enough to pass ""wrote everything"" checks.


* Extracted storeRebuildParseEntry from storeRebuildLoadEntry.

This allows Rock Store to analyze and skip disk cell header before giving
the packed store entry info to the common core code.


* Report more disk stats. Needs more work, especially in SMP reporting case.
Map stats are only reported for tiny maps because scanning the entire map may
be too expensive for bigger maps (is it worth the overhead to maintain these
stats all the time instead of computing them from scratch on-demand?).


* Moved StoreEntryBasics into Rock namespace.


* Be more consistent in setting Rock::IoState's swap_filen, swap_dirn,
diskOffset, and payloadEnd.


* Renamed vague (and confusing after the header was added to the db cell)
entrySize to more specific payloadEnd.


* Synced with r11228 changes (making Store work with SMP-shared max-size
cache_dirs).",356,data/crawl/squid/patch_695.diff
https://github.com/squid-cache/squid/commit/65241974dd23dd36998b52d13cb19e9a0dec373c,08 Feb 2011,Merge 3p2-rock.,848,data/crawl/squid/patch_696.diff
https://github.com/squid-cache/squid/commit/078274f6c5d9547ffc6cfb2fcde9cf04ba3d8e14,07 Feb 2011,"Made Rock::Rebuild an AsyncJob because it is.

Increment StoreController::store_dirs_rebuilding early, when SwapDir is
created and before the disk db file is opened and the actual rebuild starts.
Otherwise, if one SwapDir finishes rebuild before others start,
storeRebuildComplete() will see StoreController::store_dirs_rebuilding equal
to one, and think the rebuild is over.

This was not a problem for cache_dirs using blocking I/O because they either
did not try to open some file at SwapDir::init() time or did so synchronously,
resulting in ""immediate"" StoreController::store_dirs_rebuilding increment from
Store init loop point of view.",63,data/crawl/squid/patch_697.diff
https://github.com/squid-cache/squid/commit/2f1431eab290a090f81695dcbe97821693992f55,07 Feb 2011,"Bug 2870: --disable-auth does not work

This patch attempts to make it work by removing libauth.la and all component
functionality which depends on it. So far this reduces the minimal squid
binary by a further 900 KB on disk.

It also means anything which requires an authentication process wont work.
They get wrapped in USE_AUTH or if its a specific type with the relevant
HAVE_AUTH_MODULE_* wrappers.

So far this does:
 * FTP and CacheMgr dependency on --disable-auth-basic is already committed
 * cache_peer login= functionality is greatly reduced under various
   combinations of --disable-auth, --disable-auth-basic and
   --disable-auth-negotiate
 * peering userhash algorithm is removed
 * delay pools class 4 is removed
 * ACLs testing username are dropped.

Additionally since external ACL user= field is used interchangeably in
several places with a full login and with the right helper can be
considered a full side-band authentication I have disabled the
ExtUser/ext_user components as well.

NP: pinning is not strictly dependent on NTLM, we may use it for other
    things without involving auth so left most of it in. Just the logics
    which use auth to set the pinning flag are now removable.

IDENT not being an authentication mechanism is also left in.",419,data/crawl/squid/patch_698.diff
https://github.com/squid-cache/squid/commit/1d470d8857c8302388486711a8925d18e82f501d,07 Feb 2011,"Author: Phil Oester <kernel@linuxace.com>
Bug 3115: stdio: log module segfaults if access_log is set to a directory",2,data/crawl/squid/patch_699.diff
https://github.com/squid-cache/squid/commit/714a769f772fe5732068bd7a4f2f5d29d4ec54f9,03 Feb 2011,Avoid assertions when mgr:storedir is requested before cache_dir has a map.,10,data/crawl/squid/patch_700.diff
https://github.com/squid-cache/squid/commit/08723f8a014d62c38c4fac205f42068c0df7823a,03 Feb 2011,"SMP SNMP

The attached patch implements aggregation of SNMP responses, similar to how 
we aggregate some cache manager stats. 

The code contains changes that allow us to share some of the classes between 
Cache Manager and SNMP code:

  * implement the following base classes under the ipc directory/module:
    - Ipc::Forwarder (ipc/Forwarder{.cc,.h} files)
    - Ipc::Inquirer (ipc/Inquirer{.cc,.h} files)
    - Ipc::Request (ipc/Request{.cc,.h} files)
    - Ipc::Response (ipc/Response{.cc,.h} files)

  * fix the Mgr::Forwarder, Mgr::Inquirer, Mgr::Request and Mgr::Response 
    classes to be implemented as kid classes of the equivalent Icp::* classes.

Also implements for the SNMP the same mechanism used for cache manager: 
The SNMP requests forwarder to coordinator which collects the statistics from 
kids and aggregate them.

This is a Measurement Factory project",3051,data/crawl/squid/patch_701.diff
https://github.com/squid-cache/squid/commit/e8a8885340de51b1c6f860c02e9e13870f56797e,02 Feb 2011,merge from trunk,1599,data/crawl/squid/patch_702.diff
https://github.com/squid-cache/squid/commit/95be26ed834fa89ac6da8e0e85559614e846364c,01 Feb 2011,"Removed ""multiple of page size"" restriction on cache_dir rock max-size.

The restriction came from mmap writing days and was meant to prevent forcing
mmap to read and merge the unchanged tail of a page we were updating.",9,data/crawl/squid/patch_703.diff
https://github.com/squid-cache/squid/commit/c03c2bade2631aa8548db2b1aab1d9bd9667bdf5,01 Feb 2011,"Use Blocking DiskIO module when runnining in a no-daemon mode.

We cannot use IpcIo module in no-daemon mode because there are no diskers
to communicate with. If our implementation is correct, IpcIo module should
contain no shared map or other rock-specific manipulations and, hence,
should not be required for Rock Store to work.",18,data/crawl/squid/patch_704.diff
https://github.com/squid-cache/squid/commit/fd23a2ca8e404419f3114678828ca87bc310f27d,01 Feb 2011,"Removed restriction on cache_dir max-size to be a multiple of pagesize.
It was specific to Mmapped DiskIO module which we no longer use.",20,data/crawl/squid/patch_705.diff
https://github.com/squid-cache/squid/commit/f1eaa2540453dccde688d900e75f900c67f0dd7e,31 Jan 2011,Shared Rock::DirMap version 5.,283,data/crawl/squid/patch_706.diff
https://github.com/squid-cache/squid/commit/f5eef98cd5550fbd9887b1fd72e8a1be2ddefc5a,30 Jan 2011,Shared Rock::DirMap version 1.,396,data/crawl/squid/patch_707.diff
https://github.com/squid-cache/squid/commit/344d132f84e7f4b502b7c98fdf9dac605106710d,29 Jan 2011,"Added a configuration check to prevent IoState::startWriting() assertions.

Rock::IoState::startWriting() asserts that [padded] write request size does
not exceed the slot size. Padded request size always exceeds the slot size for
slots smaller than the page.

This check may also help avoid using unallocated buffer for padding, but that
part may need more work.",9,data/crawl/squid/patch_708.diff
https://github.com/squid-cache/squid/commit/8c4f6de533ac4a399385239ebfd538514a6fb643,28 Jan 2011,Try to return a template error page. Also return 404 error code,24,data/crawl/squid/patch_709.diff
https://github.com/squid-cache/squid/commit/f5f9e44c983193ed18d7af76dea168173a0cc35e,27 Jan 2011,Miscellaneous useful changes from 3p1-rock (r9630) unrelated to Rock Store.,84,data/crawl/squid/patch_710.diff
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/patch_711.diff
https://github.com/squid-cache/squid/commit/83af6fa2d157bff23080c87724c71c147d420395,27 Jan 2011,"Author: Steven Lawrance <squid@moonlightdesign.org>
Bug: 2968: Show the Vary: headers information in cachemgr objects report",4,data/crawl/squid/patch_712.diff
https://github.com/squid-cache/squid/commit/ac49890a255f5cfbf2242434c98b74da81b90dd4,27 Jan 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Fix IP/FQDN cache accounting to avoid idle caches on busy servers.

When maintaining the IP/FQDN cache size, use the number of entries in the cache
rather than the number of allocated and not freed MEM_IPCACHE_ENTRY and
MEM_FQDNCACHE_ENTRY objects. These objects are used outside the cache
for DNS queries. If queries leak (or perhaps when there are just a lot of them),
the memory-pool-based count overestimates the cache size, sometimes to
such a degree that the cache remains nearly empty despite lots of misses.

Use memory-pool-based counter to estimate cache size also violates IP/FQDN cache
encapsulation boundaries because it effectively prevents others from using
the same memory pool.",23,data/crawl/squid/patch_713.diff
https://github.com/squid-cache/squid/commit/cbff89ba6b249941fe47ad28d4ac2ed50e286b94,26 Jan 2011,"Bug 2581, Bug 3081, Bug 2948: various TCP socket connection problems

Bug 3081:
  During conversion of listening socket handlers to AsyncCalls a violation
of the AsyncCall API was introduced. Resulting in occasional crashes from
invalid re-use of call objects.


This implements a TcpAcceptor async job which receives a listening socket
and a CallSubscription. For every connection attempt on the listener socket
a new AsyncCall is spawned from the subscription template.

Initial users are the HTTP and HTTPS listening sockets and FTP data channel.

In order to implement this job in FTP the logics surrounding data channel
handling had to be extended and reworked. Fixing bug 2948 and 2581 in the
process.",914,data/crawl/squid/patch_714.diff
https://github.com/squid-cache/squid/commit/079c2dd49d857e04fcc51d122865bbe7e972459e,25 Jan 2011,Fixed bug in NTLM auth helper which would show up on non-gcc compilers,2,data/crawl/squid/patch_715.diff
https://github.com/squid-cache/squid/commit/51ea0904875d045eb83a16bdd96cc6c169b1b8b4,19 Jan 2011,importing smp-snmp patch,2936,data/crawl/squid/patch_716.diff
https://github.com/squid-cache/squid/commit/f931485ad46b26cb67d4f982ac671372227c85f4,11 Jan 2011,Portability fix: removed unused code from smblib,34,data/crawl/squid/patch_717.diff
https://github.com/squid-cache/squid/commit/570d3f7565f28594ee6fa7feebf493562215b317,08 Jan 2011,"Author: Henrik Nordstrom <hno@squid-cache.org>
Port from 2.7: maximum staleness limits

The default behaviour of Squid is to provide a stale copy (with Warnigng:
header) until an actove response from the origin server causes the object
to be updated or garbage collection causes its removal.

The max_stale direcive and refresh_pattern max-stale=N option allow admin
to set an upper limit on the objects age when serving stale responses.",49,data/crawl/squid/patch_718.diff
https://github.com/squid-cache/squid/commit/e1e90d26a3ffc69ba87262a25d23e6fa08bd5a0e,18 Dec 2010,"eCAP: (A) Support optional adapter parameters and (B) fix virgin body handling.

(A): Optional adapter-specific eCAP service parameters can be specified after
the Squid-recognized ones:

    ecap_service s1 respmod_precache ecap://...  name1=value1 name2=...

These extra parameters are passed as (name, opaque value) pairs to the
adapter, using the newly added libecap::Config API. Adapters should throw if
they cannot understand the parameters to protect users from typos in optional
Squid-recognized parameters.

Squid-recognized service parameters can also be passed to adapters. Adapters
can distinguish them from custom ones or typos because their names have host
IDs set. We currently only pass one Squid recognized service parameter called
""bypassable"", with a boolean values of ""1"" or ""0"". This tells Adapter whether
Squid can try to bypass the adapter in case of problems. In our experience,
many real adapters benefit from such knowledge because they can be less strict
and more forgiving if Squid might ignore their decisions anyway.

To support optional adapter parameters for eCAP without bothering ICAP,
we now allow ICAP and eCAP to create protocol-specific configuration objects.
ICAP code uses old defaults. eCAP implements parsing of optional adapter
parameters and sharing them with adapters

As a side effect, service configuration objects are now refcounted and each
service (once created) is responsible for its config. The global collection of
configs is emptied once the services are created.


(B) eCAP transaction wrapper code (Ecap::XactionRep) failed to pass a few test
cases when dealing with virgin bodies. The code used complex state and
mishandled several proxyingVb, nil body_pipe, and stillConsuming value
combinations. proxyingVb was especially troubling because it was not clear
whether it refers to us receiving vb from Squid core or sending vb to the
adapter. The two states are related but different because we could be
receiving vb from core but not sending it to the adapter and vice versa.

I have removed proxyingVb completely as the body pipe state alone is
sufficient to understand our dealings with Squid core. I added makingVb to
track adapter vb needs.

Also improved Ecap::XactionRep status debugging.",353,data/crawl/squid/patch_719.diff
https://github.com/squid-cache/squid/commit/d0bbf50ec0e45df6040d8f1d07da439eb8ec0087,17 Dec 2010,Use the right printf args for client_request_buffer_max warning,4,data/crawl/squid/patch_720.diff
https://github.com/squid-cache/squid/commit/1f771fedfcbf32cddeb83fe51bb698c8c0d7b4bc,17 Dec 2010,Add docs and prevent parse loops on client_request_buffer_max,12,data/crawl/squid/patch_721.diff
https://github.com/squid-cache/squid/commit/3af10ac07bfc86881f6e7437faca4ff5fbb550ec,15 Dec 2010,"Support libecap::host::xaction::blockVirgin() API, serving ERR_ACCESS_DENIED.

deny_info logic is supported for these blocked responses, with the ACL name
replaced by the adaptation service name. This allows eCAP adapters to focus on
adaptation and blocking logic while letting Squid to serve a configurable
block message, with language negotiation and such.


Merged noteAdaptationAnswer(msg) and noteAdaptationQueryAbort(bool) into
noteAdaptationAnswer(answer). The Adaptation::Answer class manages all
currently supported adaptation decisions: forward the adapted message, block
user access to the virgin response, and bypassable or fatal error.

This ""single answer hook"" design allows us to add more information to adaption
answers without rewriting all the code that forwards those answers to the
adaptation initiator. We still often use multiple methods to handle multiple
answer categories, but that ""forking"" is optional and the decision to fork is
made locally, inside each answer recepient, reducing the overall code
complexity.


Also fixed a few virgin body handling corner cases that led to unnecessary
exceptions in Adaptation::Ecap::XactionRep despite correct adapter behavior.",365,data/crawl/squid/patch_722.diff
https://github.com/squid-cache/squid/commit/6ca34f6f914c36bca43713622cc8cb297ad86a3b,14 Dec 2010,"Various source format cleanups

undo damage done by earlier astyle versions and adjust some
imported code to follow reasonable style. no functional change.",1804,data/crawl/squid/patch_723.diff
https://github.com/squid-cache/squid/commit/4d16918eadf2b696b160599b3a013310da420ea7,13 Dec 2010,"Report ERR_SECURE_CONNECT_FAIL details to the user via a new error detail API.

Currently, the ERR_SECURE_CONNECT_FAIL response contains no usable error
information. Moreover, there is no interface to pass SSL error information
to the response generation code.

This patch adds an interface to allow Squid error responses to contain detailed
information about SSL certificate verification failure. For example, the error
message may contain the following text:
 ""Server Certificate Verification Failed: Certificate Common Name
  (www.lufthansa.com) does not match the host name you are connecting to
  (www.lufthansa.de).""

This is a Measurement Factory project.

Change details:
--------------------

- errorpage.cc/.h: The error page now supports the '%D'  formating code to 
  display the detail string passed by modules. The detail strings passed by 
  modules can contain error page formating codes. Currently only SSL detail
  errors messages are supported.

- A new class Ssl::ErrorDetail defined in ssl/ErrorDetail.[cc,h]
  The Ssl::ErrorDetail objects passed to the SSL verification callback functions
  (sl_verify_cb callback function defined in support.cc) and filled with error
  detail data (error_no and a pointer to the X509 Certificate) in the case of
  an error and passed back to the forward.cc code.

- The Ssl::ErrorDetail class internally uses (hard coded) templates and 
  formating codes to allow supporting multiple languages and adding easily
   new features

Other changes:
-------------------

- errorpage.cc/.h: The BuildContent method split to BuildContent and ConvertText
  method. The second method does the real conversion from a given text template
  to output. It is used now to allow formating the detail strings passed with 
  %D.

 - sslparseErrorString moved to ssl/ErrorDetail.cc file and renamed to 
   Ssl::parseErrorString

 - sslFindErrorString moved to ssl/ErrorDetail.cc file and renamed to 
   Ssl::getErrorName

 - The ssl_error_t typedef definition moved from ssl/support.h to 
   ssl/ErrorDetail.h and renamed to Ssl::error_t",652,data/crawl/squid/patch_724.diff
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/patch_725.diff
https://github.com/squid-cache/squid/commit/7a545fdbaab654b2d02b0c645f860fa4539d2d6f,09 Dec 2010,"Author: Chad Naugle <chad.naugle@travimp.com>
Bug 2905: ext_edirectory_userip_acl: buffer handling updates",655,data/crawl/squid/patch_726.diff
https://github.com/squid-cache/squid/commit/a8a33c466c764bfe3f710353aeef6e22db52b783,07 Dec 2010,Bootstrapped,56,data/crawl/squid/patch_727.diff
https://github.com/squid-cache/squid/commit/daacd51f6f3f823f02bfb3bba004968bac41b276,04 Dec 2010,Fix many C/C++ ABI warnings,80,data/crawl/squid/patch_728.diff
https://github.com/squid-cache/squid/commit/12e11a5c0e2d896840e65b724f7afa47b5d575ad,04 Dec 2010,"Bug 3068: Actually make SwapDir capacity fields 64-bit.

This one uses uint64_t instead of size_t. It's a bit wider reaching than
the earlier commit since much of the existing code used size_t.",82,data/crawl/squid/patch_729.diff
https://github.com/squid-cache/squid/commit/81dd2d0482a4891bbf608b7e7895dc278d8ab37b,03 Dec 2010,Fixes instance hides CacheManager::instance errors,10,data/crawl/squid/patch_730.diff
https://github.com/squid-cache/squid/commit/9a0a18dedf70390ae43a9302d4096663475c8ff6,27 Nov 2010,"Policy: use USE_* from code wrappers and ENABLE_* for conditionals.

Makes a few more of the build conditionals match our naming policy.
http://wiki.squid-cache.org/Squid3CodingGuidelines

Updates two code wrapper macros:
* CBDATA_DEBUG becomes USE_CBDATA_DEBUG
* DELAY_POOLS becomes USE_DELAY_POOLS

Updates USE_DELAY_POOLS automake conditional to ENABLE_DELAY_POOLS

TODO: There are more of these wrappers to be updated.",381,data/crawl/squid/patch_731.diff
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/patch_732.diff
https://github.com/squid-cache/squid/commit/df1b20e405c3c5bd0e8de9b58a683f599d6a62da,19 Nov 2010,Fix cachemgr http_port config report hiding options,45,data/crawl/squid/patch_733.diff
https://github.com/squid-cache/squid/commit/95d2589c9c45dcbb5c405a4fbaed53675eeb5a2e,18 Nov 2010,"Author: Alex Rousskov, Andrew Balabohin, Christos Tsantilas
Dynamic SSL certificate generartion

This patch implements dynamic SSL certificate generartion in Squid.When
used with SSL Bump, the feature allows Squid to dynamically
generate (using a configurable CA certificate) and cache SSL
certificates for the proxied hosts.

A description for this feature can be found at:
   http://wiki.squid-cache.org/Features/DynamicSslCert

A first version of the patch posted by Alex, some months before:
  http://www.squid-cache.org/mail-archive/squid-dev/201003/0201.html

Some words about the patch:

  * ssl related source files moved under the src/ssl directory

  * Introduce the TidyPointer class similar to std::auto_ptr, which implements
    a  pointer that deletes the object it points to when the pointer's owner 
    or context is gone. It  is designed to avoid memory leaks  in the presence
    of exceptions and processing short cuts.

  * Implements ssl context cache to use with generated ssl contexts. The 
    Ssl::LocalContextStorage class stores the hostname/ssl context pairs for 
    a local listening address/port. The  Ssl::GlobalContextStorage class used 
    to store Ssl::LocalContextStorages per local listening address and handles
    squid shutdown/configure/reconfigure

  * Ssl::Helper class implements the squid part of the ssl_crtd helpers.

  * The ssl_crtd helper implemented in ssl_crtd.cc and certificate_db.* files

  * The Ssl::CertificateDb class (certificate_db.* files)  implements  a
    database of certificates on disk files. It is used by ssl_crtd helper to
    manipulate generated certificates.

  * The ssl related files included in the libraries libsslutil.a which
    contains common classes and functions and the libsquidssl.a which has
    squid related ssl objects and functions

  * Use the Ssl namespace for new ssl code

This is a Measurement Factory Project.",2858,data/crawl/squid/patch_734.diff

