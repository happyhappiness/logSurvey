----++++src/HttpHeader.cc
@@ -155,7 +155,7 @@ HttpHeader::HttpHeader(const http_hdr_owner_type anOwner): owner(anOwner), len(0
 HttpHeader::HttpHeader(const HttpHeader &amp;other): owner(other.owner), len(other.len), conflictingContentLength_(false)
 {
     httpHeaderMaskInit(&amp;mask, 0);
-    update(&amp;other, NULL); // will update the mask as well
+    update(&amp;other); // will update the mask as well
 }
 
 HttpHeader::~HttpHeader()
@@ -170,7 +170,7 @@ HttpHeader::operator =(const HttpHeader &amp;other)
         // we do not really care, but the caller probably does
         assert(owner == other.owner);
         clean();
-        update(&amp;other, NULL); // will update the mask as well
+        update(&amp;other); // will update the mask as well
         len = other.len;
         conflictingContentLength_ = other.conflictingContentLength_;
     }
@@ -239,17 +239,39 @@ HttpHeader::append(const HttpHeader * src)
 }
 
 void
-HttpHeader::update (HttpHeader const *fresh, HttpHeaderMask const *denied_mask)
+HttpHeader::updateWarnings()
+{
+    int count = 0;
+    HttpHeaderPos pos = HttpHeaderInitPos;
+
+    // RFC 7234, section 4.3.4: delete 1xx warnings and retain 2xx warnings
+    while (HttpHeaderEntry *e = getEntry(&amp;pos)) {
+        if (e-&gt;id == Http::HdrType::WARNING &amp;&amp; (e-&gt;getInt()/100 == 1) )
+            delAt(pos, count);
+    }
+}
+
+bool
+HttpHeader::skipUpdateHeader(const Http::HdrType id) const
+{
+    // RFC 7234, section 4.3.4: use fields other from Warning for update
+    return id == Http::HdrType::WARNING;
+}
+
+void
+HttpHeader::update(HttpHeader const *fresh)
 {
     const HttpHeaderEntry *e;
     HttpHeaderPos pos = HttpHeaderInitPos;
     assert(fresh);
     assert(this != fresh);
 
+    updateWarnings();
+
     while ((e = fresh-&gt;getEntry(&amp;pos))) {
         /* deny bad guys (ok to check for Http::HdrType::OTHER) here */
 
-        if (denied_mask &amp;&amp; CBIT_TEST(*denied_mask, e-&gt;id))
+        if (skipUpdateHeader(e-&gt;id))
             continue;
 
         if (e-&gt;id != Http::HdrType::OTHER)
@@ -262,7 +284,7 @@ HttpHeader::update (HttpHeader const *fresh, HttpHeaderMask const *denied_mask)
     while ((e = fresh-&gt;getEntry(&amp;pos))) {
         /* deny bad guys (ok to check for Http::HdrType::OTHER) here */
 
-        if (denied_mask &amp;&amp; CBIT_TEST(*denied_mask, e-&gt;id))
+        if (skipUpdateHeader(e-&gt;id))
             continue;
 
         debugs(55, 7, &quot;Updating header &#39;&quot; &lt;&lt; Http::HeaderLookupTable.lookup(e-&gt;id).name &lt;&lt; &quot;&#39; in cached entry&quot;);
----++++src/HttpHeader.h
@@ -81,7 +81,7 @@ class HttpHeader
     /* Interface functions */
     void clean();
     void append(const HttpHeader * src);
-    void update (HttpHeader const *fresh, HttpHeaderMask const *denied_mask);
+    void update(HttpHeader const *fresh);
     void compact();
     int parse(const char *header_start, size_t len);
     void packInto(Packable * p, bool mask_sensitive_info=false) const;
@@ -145,6 +145,8 @@ class HttpHeader
 protected:
     /** \deprecated Public access replaced by removeHopByHopEntries() */
     void removeConnectionHeaderEntries();
+    bool skipUpdateHeader(const Http::HdrType id) const;
+    void updateWarnings();
 
 private:
     HttpHeaderEntry *findLastEntry(Http::HdrType id) const;
----++++src/HttpReply.cc
@@ -25,39 +25,6 @@
 #include &quot;Store.h&quot;
 #include &quot;StrList.h&quot;
 
-/* local constants */
-
-/* If we receive a 304 from the origin during a cache revalidation, we must
- * update the headers of the existing entry. Specifically, we need to update all
- * end-to-end headers and not any hop-by-hop headers (rfc2616 13.5.3).
- *
- * This is not the whole story though: since it is possible for a faulty/malicious
- * origin server to set headers it should not in a 304, we must explicitly ignore
- * these too. Specifically all entity-headers except those permitted in a 304
- * (rfc2616 10.3.5) must be ignored.
- *
- * The list of headers we don&#39;t update is made up of:
- *     all hop-by-hop headers
- *     all entity-headers except Expires and Content-Location
- *
- * These headers are now stored in RegisteredHeadersHash.gperf and accessible
- * as Http::HeaderLookupTable.lookup(id).denied304
- */
-static HttpHeaderMask Denied304HeadersMask;
-
-/* module initialization */
-void
-httpReplyInitModule(void)
-{
-    assert(Http::scNone == 0); // HttpReply::parse() interface assumes that
-    httpHeaderMaskInit(&amp;Denied304HeadersMask, 0);
-
-    for (auto id : WholeEnum&lt;Http::HdrType&gt;()) {
-        if (Http::HeaderLookupTable.lookup(id).denied304)
-            CBIT_SET(Denied304HeadersMask, id);
-    }
-}
-
 HttpReply::HttpReply() : HttpMsg(hoReply), date (0), last_modified (0),
     expires (0), surrogate_control (NULL), content_range (NULL), keep_alive (0),
     protoPrefix(&quot;HTTP/&quot;), bodySizeMax(-2)
@@ -276,8 +243,7 @@ HttpReply::updateOnNotModified(HttpReply const * freshRep)
     /* clean cache */
     hdrCacheClean();
     /* update raw headers */
-    header.update(&amp;freshRep-&gt;header,
-                  (const HttpHeaderMask *) &amp;Denied304HeadersMask);
+    header.update(&amp;freshRep-&gt;header);
 
     header.compact();
     /* init cache */
----++++src/adaptation/History.cc
@@ -150,9 +150,9 @@ bool Adaptation::History::extractNextServices(String &amp;value)
 void Adaptation::History::recordMeta(const HttpHeader *lm)
 {
     lastMeta.clean();
-    lastMeta.update(lm, NULL);
+    lastMeta.update(lm);
 
-    allMeta.update(lm, NULL);
+    allMeta.update(lm);
     allMeta.compact();
 }
 
----++++src/cache_cf.cc
@@ -946,6 +946,10 @@ configDoConfigure(void)
         }
     }
 #endif
+
+    if (Config.readAheadGap &lt;= 0) {
+        fatalf(&quot;read_ahead_gap must be greater than 0 bytes&quot;);
+    }
 }
 
 /** Parse a line containing an obsolete directive.
----++++src/cf.data.pre
@@ -5650,6 +5650,17 @@ DEFAULT: 16 KB
 DOC_START
 	The amount of data the cache will buffer ahead of what has been
 	sent to the client when retrieving an object from another server.
+	
+	This also influences the maximum network read(2)/write(2) sizes in some
+	circumstances. Reducing the size of this buffer will decrease
+	per-connection memory usage at the cost of more read(2)/write(2) calls.
+	Conversely, increasing the size of this buffer will decrease the number of
+	read(2)/write(2) calls at the cost of memory usage, potentially improving
+	performance.
+
+	Squid does not slow does the response delivery to the client in order to
+	fill the buffer.
+
 DOC_END
 
 NAME: negative_ttl
----++++src/client_side.cc
@@ -1012,12 +1012,9 @@ ConnStateData::abortRequestParsing(const char *const uri)
     http-&gt;uri = xstrdup(uri);
     setLogUri (http, uri);
     auto *context = new Http::Stream(clientConnection, http);
-    StoreIOBuffer tempBuffer;
-    tempBuffer.data = context-&gt;reqbuf;
-    tempBuffer.length = HTTP_REQBUF_SZ;
     clientStreamInit(&amp;http-&gt;client_stream, clientGetMoreData, clientReplyDetach,
                      clientReplyStatus, new clientReplyContext(http), clientSocketRecipient,
-                     clientSocketDetach, context, tempBuffer);
+                     clientSocketDetach, context, context-&gt;getClientStreamBuffer());
     return context;
 }
 
@@ -1359,15 +1356,11 @@ parseHttpRequest(ConnStateData *csd, const Http1::RequestParserPointer &amp;hp)
     http-&gt;req_sz = hp-&gt;messageHeaderSize();
     Http::Stream *result = new Http::Stream(csd-&gt;clientConnection, http);
 
-    StoreIOBuffer tempBuffer;
-    tempBuffer.data = result-&gt;reqbuf;
-    tempBuffer.length = HTTP_REQBUF_SZ;
-
     ClientStreamData newServer = new clientReplyContext(http);
     ClientStreamData newClient = result;
     clientStreamInit(&amp;http-&gt;client_stream, clientGetMoreData, clientReplyDetach,
                      clientReplyStatus, newServer, clientSocketRecipient,
-                     clientSocketDetach, newClient, tempBuffer);
+                     clientSocketDetach, newClient, result-&gt;getClientStreamBuffer());
 
     /* set url */
     debugs(33,5, &quot;Prepare absolute URL from &quot; &lt;&lt;
----++++src/client_side_request.cc
@@ -357,7 +357,7 @@ clientBeginRequest(const HttpRequestMethod&amp; method, char const *url, CSCB * stre
      * correctness.
      */
     if (header)
-        request-&gt;header.update(header, NULL);
+        request-&gt;header.update(header);
 
     http-&gt;log_uri = xstrdup(urlCanonicalClean(request));
 
----++++src/http/RegisteredHeadersHash.cci
@@ -182,7 +182,7 @@ static const struct HeaderTableRecord HttpHeaderDefinitionsTable[] =
 #line 79 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Referer&quot;, Http::HdrType::REFERER, Http::HdrFieldType::ftStr, HdrKind::RequestHeader},
 #line 85 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;TE&quot;, Http::HdrType::TE, Http::HdrFieldType::ftStr, HdrKind::RequestHeader|HdrKind::HopByHopHeader|HdrKind::Denied304Header},
+    {&quot;TE&quot;, Http::HdrType::TE, Http::HdrFieldType::ftStr, HdrKind::RequestHeader|HdrKind::HopByHopHeader},
 #line 94 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Via&quot;, Http::HdrType::VIA, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader},
     {&quot;&quot;},
@@ -191,7 +191,7 @@ static const struct HeaderTableRecord HttpHeaderDefinitionsTable[] =
 #line 51 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Expect&quot;, Http::HdrType::EXPECT, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::RequestHeader},
 #line 87 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Trailer&quot;, Http::HdrType::TRAILER, Http::HdrFieldType::ftStr, HdrKind::HopByHopHeader|HdrKind::Denied304Header},
+    {&quot;Trailer&quot;, Http::HdrType::TRAILER, Http::HdrFieldType::ftStr, HdrKind::HopByHopHeader},
 #line 80 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Request-Range&quot;, Http::HdrType::REQUEST_RANGE, Http::HdrFieldType::ftPRange, HdrKind::None},
 #line 26 &quot;RegisteredHeadersHash.gperf&quot;
@@ -221,7 +221,7 @@ static const struct HeaderTableRecord HttpHeaderDefinitionsTable[] =
 #line 35 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Authorization&quot;, Http::HdrType::AUTHORIZATION, Http::HdrFieldType::ftStr, HdrKind::RequestHeader},
 #line 45 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Content-Range&quot;, Http::HdrType::CONTENT_RANGE, Http::HdrFieldType::ftPContRange, HdrKind::EntityHeader|HdrKind::Denied304Header},
+    {&quot;Content-Range&quot;, Http::HdrType::CONTENT_RANGE, Http::HdrFieldType::ftPContRange, HdrKind::EntityHeader},
 #line 66 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Location&quot;, Http::HdrType::LOCATION, Http::HdrFieldType::ftStr, HdrKind::ReplyHeader},
 #line 77 &quot;RegisteredHeadersHash.gperf&quot;
@@ -231,11 +231,11 @@ static const struct HeaderTableRecord HttpHeaderDefinitionsTable[] =
 #line 49 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Date&quot;, Http::HdrType::DATE, Http::HdrFieldType::ftDate_1123, HdrKind::GeneralHeader},
 #line 46 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Content-Type&quot;, Http::HdrType::CONTENT_TYPE, Http::HdrFieldType::ftStr, HdrKind::EntityHeader|HdrKind::Denied304Header},
+    {&quot;Content-Type&quot;, Http::HdrType::CONTENT_TYPE, Http::HdrFieldType::ftStr, HdrKind::EntityHeader},
 #line 91 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Upgrade&quot;, Http::HdrType::UPGRADE, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader|HdrKind::HopByHopHeader|HdrKind::Denied304Header},
+    {&quot;Upgrade&quot;, Http::HdrType::UPGRADE, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader|HdrKind::HopByHopHeader},
 #line 72 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Proxy-Authenticate&quot;, Http::HdrType::PROXY_AUTHENTICATE, Http::HdrFieldType::ftStr, HdrKind::ReplyHeader|HdrKind::Denied304Header},
+    {&quot;Proxy-Authenticate&quot;, Http::HdrType::PROXY_AUTHENTICATE, Http::HdrFieldType::ftStr, HdrKind::ReplyHeader},
 #line 33 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Alternate-Protocol&quot;, Http::HdrType::ALTERNATE_PROTOCOL, Http::HdrFieldType::ftStr, HdrKind::HopByHopHeader},
 #line 113 &quot;RegisteredHeadersHash.gperf&quot;
@@ -250,17 +250,17 @@ static const struct HeaderTableRecord HttpHeaderDefinitionsTable[] =
     {&quot;Proxy-Connection&quot;, Http::HdrType::PROXY_CONNECTION, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader|HdrKind::HopByHopHeader},
     {&quot;&quot;},
 #line 74 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Proxy-Authorization&quot;, Http::HdrType::PROXY_AUTHORIZATION, Http::HdrFieldType::ftStr, HdrKind::RequestHeader|HdrKind::HopByHopHeader|HdrKind::Denied304Header},
+    {&quot;Proxy-Authorization&quot;, Http::HdrType::PROXY_AUTHORIZATION, Http::HdrFieldType::ftStr, HdrKind::RequestHeader|HdrKind::HopByHopHeader},
 #line 55 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Host&quot;, Http::HdrType::HOST, Http::HdrFieldType::ftStr, HdrKind::RequestHeader},
 #line 41 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Content-Language&quot;, Http::HdrType::CONTENT_LANGUAGE, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::EntityHeader|HdrKind::Denied304Header},
+    {&quot;Content-Language&quot;, Http::HdrType::CONTENT_LANGUAGE, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::EntityHeader},
 #line 101 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;X-Squid-Error&quot;, Http::HdrType::X_SQUID_ERROR, Http::HdrFieldType::ftStr, HdrKind::ReplyHeader},
 #line 83 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Set-Cookie&quot;, Http::HdrType::SET_COOKIE, Http::HdrFieldType::ftStr, HdrKind::ReplyHeader},
 #line 32 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Allow&quot;, Http::HdrType::ALLOW, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::EntityHeader|HdrKind::Denied304Header},
+    {&quot;Allow&quot;, Http::HdrType::ALLOW, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::EntityHeader},
 #line 36 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Cache-Control&quot;, Http::HdrType::CACHE_CONTROL, Http::HdrFieldType::ftPCc, HdrKind::ListHeader|HdrKind::GeneralHeader},
 #line 105 &quot;RegisteredHeadersHash.gperf&quot;
@@ -292,7 +292,7 @@ static const struct HeaderTableRecord HttpHeaderDefinitionsTable[] =
 #line 50 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;ETag&quot;, Http::HdrType::ETAG, Http::HdrFieldType::ftETag, HdrKind::EntityHeader},
 #line 62 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Keep-Alive&quot;, Http::HdrType::KEEP_ALIVE, Http::HdrFieldType::ftStr, HdrKind::HopByHopHeader|HdrKind::Denied304Header},
+    {&quot;Keep-Alive&quot;, Http::HdrType::KEEP_ALIVE, Http::HdrFieldType::ftStr, HdrKind::HopByHopHeader},
 #line 102 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;X-Accelerator-Vary&quot;, Http::HdrType::HDR_X_ACCELERATOR_VARY, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::ReplyHeader},
 #line 103 &quot;RegisteredHeadersHash.gperf&quot;
@@ -318,15 +318,15 @@ static const struct HeaderTableRecord HttpHeaderDefinitionsTable[] =
 #line 99 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;X-Forwarded-For&quot;, Http::HdrType::X_FORWARDED_FOR, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader},
 #line 42 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Content-Length&quot;, Http::HdrType::CONTENT_LENGTH, Http::HdrFieldType::ftInt64, HdrKind::EntityHeader|HdrKind::Denied304Header},
+    {&quot;Content-Length&quot;, Http::HdrType::CONTENT_LENGTH, Http::HdrFieldType::ftInt64, HdrKind::EntityHeader},
 #line 106 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Front-End-Https&quot;, Http::HdrType::FRONT_END_HTTPS, Http::HdrFieldType::ftStr, HdrKind::None},
 #line 68 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Mime-Version&quot;, Http::HdrType::MIME_VERSION, Http::HdrFieldType::ftStr, HdrKind::GeneralHeader},
 #line 44 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Content-MD5&quot;, Http::HdrType::CONTENT_MD5, Http::HdrFieldType::ftStr, HdrKind::EntityHeader|HdrKind::Denied304Header},
+    {&quot;Content-MD5&quot;, Http::HdrType::CONTENT_MD5, Http::HdrFieldType::ftStr, HdrKind::EntityHeader},
 #line 37 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Connection&quot;, Http::HdrType::CONNECTION, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader|HdrKind::HopByHopHeader|HdrKind::Denied304Header},
+    {&quot;Connection&quot;, Http::HdrType::CONNECTION, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader|HdrKind::HopByHopHeader},
 #line 53 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Forwarded&quot;, Http::HdrType::FORWARDED, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader},
 #line 111 &quot;RegisteredHeadersHash.gperf&quot;
@@ -338,12 +338,12 @@ static const struct HeaderTableRecord HttpHeaderDefinitionsTable[] =
 #line 34 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Authentication-Info&quot;, Http::HdrType::AUTHENTICATION_INFO, Http::HdrFieldType::ftStr, HdrKind::ListHeader},
 #line 88 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Transfer-Encoding&quot;, Http::HdrType::TRANSFER_ENCODING, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader|HdrKind::HopByHopHeader|HdrKind::Denied304Header},
+    {&quot;Transfer-Encoding&quot;, Http::HdrType::TRANSFER_ENCODING, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::GeneralHeader|HdrKind::HopByHopHeader},
     {&quot;&quot;},
 #line 108 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;FTP-Arguments&quot;, Http::HdrType::FTP_ARGUMENTS, Http::HdrFieldType::ftStr, HdrKind::None},
 #line 40 &quot;RegisteredHeadersHash.gperf&quot;
-    {&quot;Content-Encoding&quot;, Http::HdrType::CONTENT_ENCODING, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::EntityHeader|HdrKind::Denied304Header},
+    {&quot;Content-Encoding&quot;, Http::HdrType::CONTENT_ENCODING, Http::HdrFieldType::ftStr, HdrKind::ListHeader|HdrKind::EntityHeader},
 #line 73 &quot;RegisteredHeadersHash.gperf&quot;
     {&quot;Proxy-Authentication-Info&quot;, Http::HdrType::PROXY_AUTHENTICATION_INFO, Http::HdrFieldType::ftStr, HdrKind::ListHeader},
     {&quot;&quot;}, {&quot;&quot;}, {&quot;&quot;}, {&quot;&quot;}, {&quot;&quot;}, {&quot;&quot;},
----++++GitHub